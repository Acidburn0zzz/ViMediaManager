#tag ClassProtected Class AniDBInherits HTTPSocket	#tag Event		Sub Error(code as integer)		  SocketError(code, self)		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub ScrapeResults(XmlContent As String)		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem, xleaf as XmlNode		  Dim i, n, t as Integer		  Dim tmpID as string		  		  dim c as new Clipboard		  c.Text = XmlContent		  		  if AnimeAttr.ID_TVDb <> "" then		    tmpID = AnimeAttr.ID_TVDb		  elseif AnimeAttr.ID_TMDb <> "" then		    tmpID = AnimeAttr.ID_TMDb		  elseif AnimeAttr.ID_IMDB <> "" then		    tmpID = AnimeAttr.ID_IMDB		  elseif Scrape.tmpID <> "" then		    tmpID = Scrape.tmpID		  end if		  		  AnimeAttr.ClearProperties		  Xml.PreserveWhitespace = False		  		  // RegEx		  Dim myRegEx As new RegEx		  Dim myMatch As RegExMatch		  myRegEx.Options.TreatTargetAsOneLine = True		  myRegEx.SearchPattern = "http://anidb.net/[a-z][a-z0-9]\d* "		  myRegEx.ReplacementPattern = ""		  		  // Pop up all matches one by one		  myMatch = myRegEx.Search( XmlContent )		  While myMatch <> Nil		    XmlContent = myRegEx.Replace( XmlContent )		    myMatch = myRegEx.Search()		  Wend		  		  XmlContent = XmlContent.ReplaceAll( "[", ""  )		  XmlContent = XmlContent.ReplaceAll( "]", ""  )		  XmlContent = XmlContent.ReplaceAll( "`", "'" )		  		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.Child(0)		  if xroot.FirstChild = nil then Return		  		  AnimeAttr.ID_AniDB = xroot.GetAttribute("id")		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    Select case xnode.Name		      		    case "type"		      AnimeAttr.Type = xnode.FirstChild.Value		      		    case "titles"		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        if xitem.GetAttribute("xml:lang") = "x-jat" and xitem.GetAttribute("type") = "main" then		          if AnimeAttr.Title = "" then AnimeAttr.Title = xitem.FirstChild.Value		          if AnimeAttr.TitleSort = "" then AnimeAttr.TitleSort = Articulator( xitem.FirstChild.Value )		          AnimeAttr.TitleOriginal = xitem.FirstChild.Value		        end if		        		        if xitem.GetAttribute("xml:lang") = "en" and xitem.GetAttribute("type") = "official" then		          AnimeAttr.Title = xitem.FirstChild.Value		          AnimeAttr.TitleSort = Articulator( xitem.FirstChild.Value )		        end if		        		      next		      		    case "startdate"		      AnimeAttr.DatePremiered = xnode.FirstChild.Value		      AnimeAttr.Year = AnimeAttr.DatePremiered.Left(4)		      		    case "description"		      AnimeAttr.Plot = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine + EndOfLine )		      		      // Prepare a regular expression object		      'Dim myRegEx As new RegEx		      'Dim myMatch As RegExMatch		      'myRegEx.Options.TreatTargetAsOneLine = True		      'myRegEx.SearchPattern = "http://anidb.net/[a-z][a-z0-9]\d* "		      'myRegEx.ReplacementPattern = ""		      		      // Pop up all matches one by one		      'myMatch = myRegEx.Search( AnimeAttr.Plot )		      'While myMatch <> Nil		      'AnimeAttr.Plot = myRegEx.Replace( AnimeAttr.Plot )		      'myMatch = myRegEx.Search()		      'Wend		      		      'AnimeAttr.Plot = AnimeAttr.Plot.ReplaceAll( "[", ""  )		      'AnimeAttr.Plot = AnimeAttr.Plot.ReplaceAll( "]", ""  )		      'AnimeAttr.Plot = AnimeAttr.Plot.ReplaceAll( "`", "'" )		      		    case "ratings"		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        Select case xitem.Name		        case "permanent"		          AnimeAttr.Rating = val( xitem.FirstChild.Value )		          AnimeAttr.Votes  = val( xitem.GetAttribute("count") )		          		        case "temporary"		          // Only if there is no permanent		          if AnimeAttr.Rating <= 0 then		            AnimeAttr.Rating = val( xitem.FirstChild.Value )		            AnimeAttr.Votes  = val( xitem.GetAttribute("count") )		          end if		          		        case "review"		          // Let's ignore this		          		        end Select		        		      next		      		    case "relatedanime"		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        AnimeAttr.SimilarAnimeID.Append      val( xitem.GetAttribute("id") )		        AnimeAttr.SimilarAnimeTitle.Append   xitem.FirstChild.Value		      next		      		    case "similaranime"		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        AnimeAttr.SimilarAnimeID.Append      val( xitem.GetAttribute("id") )		        AnimeAttr.SimilarAnimeTitle.Append   xitem.FirstChild.Value		      next		      		    case "creators"		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        if xitem.GetAttribute("type") = "Music" then AnimeAttr.PeopleMusic = xitem.FirstChild.Value		        if xitem.GetAttribute("type") = "Character Design" then AnimeAttr.PeopleCharacterDesign = xitem.FirstChild.Value		        if xitem.GetAttribute("type") = "Work" then  AnimeAttr.Studio = xitem.FirstChild.Value		        if xitem.GetAttribute("type") = "Animation Work" and AnimeAttr.Studio = "" then AnimeAttr.Studio = xitem.FirstChild.Value		        if xitem.GetAttribute("type") = "Original Work" then AnimeAttr.PeopleOriginalWork = xitem.FirstChild.Value		        if xitem.GetAttribute("type") = "Direction" then AnimeAttr.Director = xitem.FirstChild.Value		      next		      		    case "categories"		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        if val( xitem.GetAttribute("weight") ) >= Preferences.AniDBMinGenreWeight then		          		          for t = 0 to xitem.ChildCount - 1		            Select case xitem.Child(t).Name		            case "name"		              AnimeAttr.Genre.Append xitem.Child(t).FirstChild.Value		            end select		            		          next		          		        end if		        		      next		      		    case "characters"		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        for t = 0 to xitem.ChildCount - 1		          xleaf = xitem.Child(t)		          		          'Dim xname, xseiyuu, xthumburl, xdescription as String		          Select case xleaf.Name		          case "seiyuu"		            AnimeAttr.ActorName.Append xleaf.FirstChild.Value		            if xleaf.GetAttribute("picture") <> "" then		              AnimeAttr.ActorThumbURL.Append "http://img7.anidb.net/pics/anime/" + xleaf.GetAttribute("picture")		            else		              AnimeAttr.ActorThumbURL.Append ""		            end if		            		          case "name"		            AnimeAttr.ActorRole.Append xleaf.FirstChild.Value		          case "description"		            AnimeAttr.ActorRoleDescription.Append xleaf.FirstChild.Value.ReplaceAll( "`", "'" )		            		          end select		          		          if AnimeAttr.ActorName.Ubound > AnimeAttr.ActorRoleDescription.Ubound then AnimeAttr.ActorRoleDescription.Append ""		          if AnimeAttr.ActorName.Ubound > AnimeAttr.ActorThumbURL.Ubound then AnimeAttr.ActorThumbURL.Append ""		        next		      next		      		    end select		    		  next		  		  Scrape.tmpID = ""		  if AnimeAttr.ID_TVDb <> "" then		    tmpID = AnimeAttr.ID_TVDb		  elseif AnimeAttr.ID_TMDb <> "" then		    tmpID = AnimeAttr.ID_TMDb		  elseif AnimeAttr.ID_IMDB <> "" then		    tmpID = AnimeAttr.ID_IMDB		  end if		  		  if AnimeAttr.Type = "Movie" and tmpID.Left(2) = "tt" then		    AnimeAttr.ID_IMDB = tmpID		  elseif AnimeAttr.Type = "Movie" and tmpID.Left(2) <> "tt" then		    AnimeAttr.ID_TMDb = tmpID		  elseif AnimeAttr.Type <> "Movie" then		    AnimeAttr.ID_TVDb = tmpID		  end if		  		  if AnimeAttr.Type <> "Movie" then ScrapeTVDB( tmpID )		  if AnimeAttr.Type =  "Movie" then ScrapeTMDB( tmpID )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ScrapeTMDB(ID As String)		  Dim sckt as new TMDB		  Dim XmlContent As String		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  Dim i, n as Integer		  		  sckt.Yield = True		  Xml.PreserveWhitespace = False		  		  if not MassSearch then Progressor("Fetching:", "TMDb Information...", 6, 3)		  		  XmlContent = sckt.Get( sckt.URL_Info( ID ), Preferences.TimeOut )		  sckt.Close		  		  if not MassSearch then Progressor("Processing:", "TMDb Information...", 6, 4)		  		  if XmlContent.Left(5) <> "<?xml" then Return		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.Child(0).Child(2).FirstChild		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      		      Select case xnode.Name		        		      case "name"		      case "original_name"		        		      case "id"		        AnimeAttr.ID_TMDb = xnode.FirstChild.Value		        		      case "imdb_id"		        AnimeAttr.ID_IMDB = xnode.FirstChild.Value		        		      case "overview"		        if Preferences.DBPreferance <> "AniDB" then AnimeAttr.Plot = xnode.FirstChild.Value		        		      case "tagline"		        AnimeAttr.Tagline = xnode.FirstChild.Value		        		      case "certification"		        AnimeAttr.MPAA = xnode.FirstChild.Value		        		      case "rating"		        AnimeAttr.Rating = val( xnode.FirstChild.Value )		        		      case "votes"		        AnimeAttr.Votes = val( xnode.FirstChild.Value )		        		      case "released"		        AnimeAttr.DatePremiered = xnode.FirstChild.Value		        AnimeAttr.Year = xnode.FirstChild.Value.Left(4)		        		      case "runtime"		        AnimeAttr.RuntimeInMinutes = val( xnode.FirstChild.Value )		        		      case "categories"		        for n = 0 to xnode.ChildCount - 1		          AnimeAttr.Genre.Append xnode.Child(n).GetAttribute("name")		        next		        		      case "studios"		        for n = 0 to xnode.ChildCount - 1		          AnimeAttr.Studios.Append xnode.Child(n).GetAttribute("name")		        next		        AnimeAttr.Studio = AnimeAttr.Studios(0)		        		      case "countrie"		        for n = 0 to xnode.ChildCount - 1		          AnimeAttr.countries.Append xnode.Child(n).GetAttribute("name")		        next		        		      case "images"		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          if xitem.GetAttribute("type") = "poster"   and xitem.GetAttribute("size") = "original" then AnimeAttr.ART_PosterURLs.Append      xitem.GetAttribute("url")		          if xitem.GetAttribute("type") = "backdrop" and xitem.GetAttribute("size") = "original" then AnimeAttr.ART_FanartURLs.Append      xitem.GetAttribute("url")		          if xitem.GetAttribute("type") = "backdrop" and xitem.GetAttribute("size") = "thumb"    then AnimeAttr.ART_FanartThumbURLs.Append xitem.GetAttribute("url")		        next		        		        if AnimeAttr.ART_PosterURLs.Ubound > -1 and MovieAttr.MoviePosterFilter( AnimeAttr.FolderParent ) = nil then // Don't overwrite existing poster image		          if not MassSearch then Progressor("Downloading:", "Default poster image...", 4, 3 )		          AnimeAttr.ART_Poster = URL2Picture( AnimeAttr.ART_PosterURLs(0), "poster", "jpg", AnimeAttr.FolderParent )		        end if		        		        if AnimeAttr.ART_FanartURLs.Ubound > -1 and MovieAttr.MovieFanartFilter( AnimeAttr.FolderParent ) = nil then // Don't overwrite existing fanart image		          if not MassSearch then Progressor("Downloading:", "Default fanart image...", 4, 4 )		          AnimeAttr.ART_Fanart = URL2Picture( AnimeAttr.ART_FanartURLs(0), "fanart", "jpg", AnimeAttr.FolderParent )		        end if		        		        		      end Select		      		    end if		    		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ScrapeTVDB(ID As String)		  Dim sckt as new TVDB		  Dim XmlContent, tmp as String		  Dim XmlInfo as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  Dim i, n as Integer		  		  sckt.Yield = True		  XmlInfo.PreserveWhitespace = False		  		  if not MassSearch then Progressor("Fetching:", "TVDB Information...", 6, 3)		  		  XmlContent = sckt.Get( sckt.URL_Info( ID ), Preferences.TimeOut )		  sckt.Close		  		  if not MassSearch then Progressor("Processing:", "TVDB Information...", 6, 4)		  		  if XmlContent.Left(5) <> "<?xml" then Return		  XmlInfo.LoadXml( XmlContent )		  		  // TVDB Info --------------------		  xroot = XmlInfo.FirstChild.FirstChild		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      		      Select case xnode.Name		        		      case "OverView"		        if Preferences.DBPreferance <> "AniDB" then AnimeAttr.Plot = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine )		        		      case "ContentRating"		        AnimeAttr.MPAA = xnode.FirstChild.Value		        		      case "FirstAired"		        AnimeAttr.DatePremiered = xnode.FirstChild.Value		        AnimeAttr.Year = xnode.FirstChild.Value.Left(4)		        		      case "Genre"		        if AnimeAttr.Genre.Ubound = -1 then		          tmp = xnode.FirstChild.Value		          if tmp.Left(1) = "|" then tmp = tmp.Right( tmp.Len - 1 )		          if tmp.Right(1) = "|" then tmp = tmp.Left( tmp.Len - 1 )		          AnimeAttr.Genre = tmp.Split("|")		        end if		        		      case "IMDB_ID"		        'AnimeAttr.ID_IMDB = xnode.FirstChild.Value		        		      case "Network"		        if AnimeAttr.Studio = "" then AnimeAttr.Studio = xnode.FirstChild.Value		        		      case "Rating"		        if AnimeAttr.Rating <= 0 or Preferences.DBPreferance = "TVDB" then AnimeAttr.Rating = val( xnode.FirstChild.Value )		        		      case "RatingCount"		        if AnimeAttr.Votes <= 0 or Preferences.DBPreferance = "TVDB" then AnimeAttr.Votes = val( xnode.FirstChild.Value )		        		      case "Runtime"		        AnimeAttr.RuntimeInMinutes = val( xnode.FirstChild.Value )		        		      case "Status"		        AnimeAttr.Status = xnode.FirstChild.Value		        		      case "Banner"		        AnimeAttr.ART_Banner = URL2Picture( sckt.MirrorPath + "/banners/" + xnode.FirstChild.Value, "Banner", "jpg", AnimeAttr.FolderParent )		        		      case "Fanart"		        AnimeAttr.ART_Fanart = URL2Picture( sckt.MirrorPath + "/banners/" + xnode.FirstChild.Value, "Fanart", "jpg", AnimeAttr.FolderParent )		        		      case "Poster"		        AnimeAttr.ART_Poster = URL2Picture( sckt.MirrorPath + "/banners/" + xnode.FirstChild.Value, "Poster", "jpg", AnimeAttr.FolderParent )		        		      end Select		      		    end if		    		  next		  		  XmlContent = ""		  tmp   = ""		  XmlInfo   = nil		  xroot = nil		  xnode = nil		  xitem = nil		  		  Dim XmlImages as new XmlDocument		  Dim BannerType, BannerType2, BannerPath, ThumbnailPath, Season as String		  XmlImages.PreserveWhitespace = False		  		  if not MassSearch then Progressor("Fetching:", "TVDB Images...", 6, 4)		  		  XmlContent = sckt.Get( sckt.URL_Art( ID ), Preferences.TimeOut )		  sckt.Close		  		  if not MassSearch then Progressor("Fetching:", "TVDB Images...", 6, 5)		  		  if XmlContent.Left(5) <> "<?xml" then Return		  XmlImages.LoadXml( XmlContent )		  		  // TVDB Images ------------------		  xroot = XmlImages.FirstChild		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    for n = 0 to xnode.ChildCount - 1		      xitem = xnode.Child(n)		      		      Select case "xitem.Name"		        		      case "BannerType"		        BannerType = xitem.FirstChild.Value		      case "BannerType2"		        BannerType2 = xitem.FirstChild.Value		      case "BannerPath"		        BannerPath = xitem.FirstChild.Value		      case "ThumbnailPath"		        ThumbnailPath = xitem.FirstChild.Value		      case "Season"		        Season = xitem.FirstChild.Value		        		      end Select		      		    next		    		    if BannerType = "Poster" then AnimeAttr.ART_PosterURLs.Append sckt.MirrorPath + "/banners/" + BannerPath		    if BannerType = "Series" then AnimeAttr.ART_BannerURLs.Append sckt.MirrorPath + "/banners/" + BannerPath		    if BannerType = "Season" then		      AnimeAttr.ART_SeasonNumbers.Append val( Season )		      AnimeAttr.ART_SeasonURLs.Append sckt.MirrorPath + "/banners/" + BannerPath		    elseif BannerType = "Fanart" then		      AnimeAttr.ART_FanartURLs.Append BannerPath		      AnimeAttr.ART_FanartDimensions.Append BannerType2		      AnimeAttr.ART_FanartThumbURLs.Append ThumbnailPath		    end if		    		  next		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SearchResults(XmlContent As String)		  Dim Xml as new XmlDocument		  dim xroot, xnode, xitem as XmlNode		  Dim i, n as Integer		  		  Xml.PreserveWhitespace = False		  Xml.LoadXml( XmlContent )		  xroot = Xml.Child(1)		  		  if xroot.ChildCount > 0 then // 1 or more shows found.		    SearchWindow( Xml )		    		  elseif xroot.ChildCount = 0 and Scrape.ManualSearch then // No shows found during MANUAL search		    Progressor("close")		    MsgBox "No anime found, try again with less keywords or an alternative title"		    		  elseif xroot.ChildCount = 0 and NOT Scrape.ManualSearch then // No shows found during REGULAR search		    Progressor("close")		    		    if wndMain.lstAnime.ListIndex > -1 and dlgWindow("No anime found", "Do you want to do a manual search?") then		      'wndSearchShow.Show		      'wndSearchShow.lstFoundShows.DeleteAllRows		      		      'wndSearchShow.edtSearchField.Text = wndMain.lstAnime.Cell( wndMain.lstAnime.ListIndex, 0 )		      'wndSearchShow.edtSearchField.SelectAll		      		      wndSearchAnime.edtSearch.Text = wndMain.lstAnime.Cell( wndMain.lstAnime.ListIndex, 0 )		      wndSearchAnime.edtSearch.SelectAll		    end if		    		  elseif xroot.ChildCount > 0 and Scrape.ManualSearch then // Manual search		    SearchWindow( Xml )		    		  elseif xroot.ChildCount = 1 and not Scrape.ManualSearch then // Return with the only show found		    		    for i = 0 to xroot.ChildCount - 1		      xnode = xroot.Child(i)		      for n = 0 to xroot.ChildCount - 1		        xitem = xnode.Child(n)		        if xitem.FirstChild <> nil then		          		          if dlgPrompt("Please add IMDB or TVDB ID:") = "" then		            		            if dlgWindow( "Are you sure you don't want to use a TVDB or TMDB ID?", "Without the ID, XBMC might not match the episodes, and you'll miss out on extra metadata." ) then		              Scrape.AniDBApi xnode.GetAttribute("aid"), True		              self.Close		              wndMain.PopulateAnimeList		            end if		            		          else		            		            Scrape.AniDBApi xnode.GetAttribute("aid"), True		          end if		        end if		      next		    next		    		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SearchWindow(Xml as XmlDocument)		  Dim xroot, xnode, xitem as XmlNode		  Dim lstBox as listbox		  Dim i, n as Integer		  Dim xjat, en as string		  		  Xml.PreserveWhitespace = False		  xroot = Xml.Child(1)		  		  Progressor("close")		  wndSearchAnime.Show		  lstBox = wndSearchAnime.lstAnime		  lstBox.DeleteAllRows		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    xjat = ""		    en = ""		    		    for n = 0 to xnode.ChildCount - 1		      xitem = xnode.Child(n)		      		      if xitem.FirstChild <> nil then		        if xitem.GetAttribute("lang") = "en" and xitem.GetAttribute("type") = "official" then en = xitem.FirstChild.Value.ReplaceAll("`", "'")		        if xitem.GetAttribute("lang") = "x-jat" and xitem.GetAttribute("type") = "main" then xjat = xitem.FirstChild.Value.ReplaceAll("`", "'")		      end if		      		    next		    		    if en = "" and xjat <> "" then		      lstBox.AddRow xjat, xnode.GetAttribute("aid")		    elseif en <> "" then		      lstBox.AddRow en, xnode.GetAttribute("aid")		    elseif en = "" and xjat = "" then		      lstBox.AddRow xitem.FirstChild.Value, xnode.GetAttribute("aid")		    end if		    		  next		  		  lstBox.SortedColumn = 0		  lstBox.ColumnSortDirection(0) = 1		  lstBox.Sort		  lstBox.ListIndex = 0		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function URL_Info(ID As String) As String		  Return "http://api.anidb.net:9001/httpapi?request=anime&client=vimediamanager&clientver=1&protover=1&aid=" + ID		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function URL_Search(AnimeTitle As String) As String		  if Preferences.AniDBSearchExact = True then		    Return "http://anisearch.outrance.pl/?task=search&query=""" + String2Entities( AnimeTitle ) + ""		  else		    Return "http://anisearch.outrance.pl/?task=search&query=" + String2Entities( AnimeTitle )		  end if		End Function	#tag EndMethod	#tag Note, Name = AniDB Api Docs				http://wiki.anidb.net/w/API				AniDB Search:		  http://anisearch.outrance.pl/	#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="Address"			Visible=true			Group="Behavior"			Type="String"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="defaultPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyAddress"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Port"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="yield"			Visible=true			Group="Behavior"			InitialValue="1"			Type="boolean"			InheritedFrom="HTTPSocket"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass