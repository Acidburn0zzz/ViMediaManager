#tag ClassProtected Class TMDBInherits HTTPSocket	#tag Event		Sub Error(code as integer)		  SocketError(code, self)		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub GetArt(XmlContent As String, Mode As String)		  // Modes: Poster, Fanart		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  Dim i, n, ArtIndex As Integer = -1		  		  Scrape.ClearArts		  		  Xml.PreserveWhitespace = False		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.Child(0).Child(2).FirstChild		  		  if xroot.Value = "Nothing Found." then		    MsgBox "No " + Mode + " images found."		    Return		  end if		  		  xroot = xroot.Child(2)		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    if xnode.Name = "Poster" and Mode = "Poster" then		      ArtIndex = ArtIndex + 1		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        if xitem.GetAttribute("size") = "original" then		          ArtURL.Append xitem.GetAttribute("url")		          ArtSize.Append xitem.GetAttribute("width") + "x" + xitem.GetAttribute("height")		        end if		        if xitem.GetAttribute("size") = "mid" then ArtThumbURL.Append xitem.GetAttribute("url")		        		      Next		      		    elseif xnode.Name = "backdrop" and Mode = "Fanart" then		      ArtIndex = ArtIndex + 1		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        if xitem.GetAttribute("size") = "original" then		          ArtURL.Append xitem.GetAttribute("url")		          ArtSize.Append xitem.GetAttribute("width") + "x" + xitem.GetAttribute("height")		        end if		        if xitem.GetAttribute("size") = "poster" then ArtThumbURL.Append xitem.GetAttribute("url")		        		      next		      		    end if		    		  next		  		  for i = 0 to ArtThumbURL.Ubound		    Progressor( "Downloading:", str(ArtIndex + 1) + " " + Mode + " images...", ArtIndex, i )		    ArtThumb.Append URL2Picture( ArtThumbURL(i), "Thumb_" + str(i) )		  next		  		  Progressor("close")		  if Mode = "Poster" then		    wndArtPreview.Width = 400		    wndArtPreview.Height = 400 * 1.47 + 52		  elseif Mode = "Fanart" then		    wndArtPreview.Width = 780		    wndArtPreview.Height = 439 + 52		  end if		  wndArtPreview.Mode = "TMDB-" + Mode		  wndArtPreview.Show		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ScrapeFirstResult(XmlContent As String)		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode //, xnode, xitem, xleaf as XmlNode		  Dim i as Integer		  		  Xml.PreserveWhitespace = False		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.Child(0).Child(2)		  		  if xroot.FirstChild <> nil and xroot.FirstChild.Value = "Nothing Found." then Return		  		  if xroot.FirstChild <> nil and xroot.ChildCount > 0 then // 1 or more movies found		    xnode = xroot.Child(0)		    if xnode.FirstChild <> nil then		      for i = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(i)		        if xitem.FirstChild <> nil then		          if xitem.Name = "id" then Scrape.TMDBApi( xitem.FirstChild.Value )		        end if		      next		    end if		  end if		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ScrapeResults(XmlContent As String)		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  Dim i, n as integer		  		  Xml.PreserveWhitespace = False		  		  'dim c as new Clipboard		  'c.Text = XmlContent		  		  Xml.LoadXml( XmlContent )		  xroot = Xml.Child(0).Child(2).FirstChild		  		  MovieAttr.ClearProperties		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      		      Select case xnode.Name		        		      case "name"		        MovieAttr.Title = xnode.FirstChild.Value		        if Preferences.ArticlesLast then MovieAttr.SortTitle = Articulator( MovieAttr.Title ) else MovieAttr.SortTitle = MovieAttr.Title		        		      case "original_name"		        MovieAttr.OriginalTitle = xnode.FirstChild.Value		        		      case "id"		        MovieAttr.TMDbID = xnode.FirstChild.Value		        		      case "imdb_id"		        MovieAttr.IMDBID = xnode.FirstChild.Value		        		      case "overview"		        MovieAttr.Plot = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine )		        		      case "tagline"		        MovieAttr.Tagline = xnode.FirstChild.Value		        		      case "certification"		        MovieAttr.MPAA = xnode.FirstChild.Value		        		      case "rating"		        MovieAttr.Rating = val( xnode.FirstChild.Value )		        		      case "votes"		        MovieAttr.Votes = xnode.FirstChild.Value		        		      case "released"		        MovieAttr.Premiered = xnode.FirstChild.Value		        MovieAttr.Year = MovieAttr.Premiered.Left(4)		        		      case "runtime"		        MovieAttr.videoinfoDurationInMinutes = xnode.FirstChild.Value		        'MovieAttr.RuntimeStr = xnode.FirstChild.Value + " mins"		        		      case "categories"		        for n = 0 to xnode.ChildCount - 1		          MovieAttr.Genre.Append xnode.Child(n).GetAttribute("name")		        next		        		      case "studios"		        for n = 0 to xnode.ChildCount - 1		          MovieAttr.Studios.Append xnode.Child(n).GetAttribute("name")		        next		        MovieAttr.Studio = MovieAttr.Studios(0)		        		      case "countries"		        for n = 0 to xnode.ChildCount - 1		          MovieAttr.Countries.Append xnode.Child(n).GetAttribute("name")		        next		        MovieAttr.Country = MovieAttr.Countries(0)		        		      case "cast"		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          		          // Append Actor		          if xitem.GetAttribute("job") = "Actor" and xitem.GetAttribute("name") <> "" and xitem.GetAttribute("character") <> "" and xitem.GetAttribute("thumb") <> "" then		            // Job = actor, name = name, character = character, thumburl = thumburl		            MovieAttr.ActorName.Append xitem.GetAttribute("name")		            MovieAttr.ActorRole.Append xitem.GetAttribute("character")		            MovieAttr.ActorThumbURL.Append xitem.GetAttribute("thumb").ReplaceAll("-thumb", "-profile")		          elseif xitem.GetAttribute("job") = "Actor" and xitem.GetAttribute("name") <> "" and xitem.GetAttribute("character") <> "" and xitem.GetAttribute("thumb") = "" then		            // Job = actor, name = name, character = character, thumburl = empty		            MovieAttr.ActorName.Append xitem.GetAttribute("name")		            MovieAttr.ActorRole.Append xitem.GetAttribute("character")		            MovieAttr.ActorThumbURL.Append ""		          elseif xitem.GetAttribute("job") = "Actor" and xitem.GetAttribute("name") <> "" and xitem.GetAttribute("character") = "" and xitem.GetAttribute("thumb") = "" then		            // Job = actor, name = name, character = empty, thumburl = empty		            MovieAttr.ActorName.Append xitem.GetAttribute("name")		            MovieAttr.ActorRole.Append ""		            MovieAttr.ActorThumbURL.Append ""		          elseif xitem.GetAttribute("job") = "Actor" and xitem.GetAttribute("name") <> "" and xitem.GetAttribute("character") = "" and xitem.GetAttribute("thumb") <> "" then		            // Job = actor, name = name, character = empty, thumburl = thumburl		            MovieAttr.ActorName.Append xitem.GetAttribute("name")		            MovieAttr.ActorRole.Append ""		            MovieAttr.ActorThumbURL.Append xitem.GetAttribute("thumb").ReplaceAll("-thumb", "-profile")		          end if		          		          // Append Director		          if xnode.GetAttribute("job") = "Director" then		            if MovieAttr.Director <> "" then		              MovieAttr.Director = MovieAttr.Director + ", " + xnode.GetAttribute("name")		            else		              MovieAttr.Director = xnode.GetAttribute("name")		            end if		          end if		          		          // Append Writer		          if xnode.GetAttribute("job") = "screenplay" then		            if MovieAttr.Writer <> "" then		              MovieAttr.Writer = MovieAttr.Writer + ", " + xnode.GetAttribute("name")		            else		              MovieAttr.Writer = xnode.GetAttribute("name")		            end if		          end if		        next		        		      case "images"		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          if xitem.GetAttribute("type") = "poster" and xitem.GetAttribute("size") = "original" then MovieAttr.ART_PosterURLs.Append xitem.GetAttribute("url")		          if xitem.GetAttribute("type") = "backdrop" and xitem.GetAttribute("size") = "original" then MovieAttr.ART_FanartURLs.Append xitem.GetAttribute("url")		          if xitem.GetAttribute("type") = "backdrop" and xitem.GetAttribute("size") = "thumb" then MovieAttr.ART_FanartThumbURLs.Append xitem.GetAttribute("url")		        next		        		        if MovieAttr.ART_PosterURLs.Ubound > -1 and MovieAttr.MoviePosterFilter( MovieAttr.FolderParent ) = nil then // Don't overwrite existing poster image		          if not MassSearch then Progressor("Downloading:", "Default poster image...", 4, 3 )		          MovieAttr.ART_Poster = URL2Picture( MovieAttr.ART_PosterURLs(0), "poster", "jpg", MovieAttr.FolderParent )		        end if		        		        if MovieAttr.ART_FanartURLs.Ubound > -1 and MovieAttr.MovieFanartFilter( MovieAttr.FolderParent ) = nil then // Don't overwrite existing fanart image		          if not MassSearch then Progressor("Downloading:", "Default fanart image...", 4, 4 )		          MovieAttr.ART_Fanart = URL2Picture( MovieAttr.ART_FanartURLs(0), "fanart", "jpg", MovieAttr.FolderParent )		        end if		        		      end select // @END xnode.Name		      		    end if // @END xnode.FirstChild <> NIL		    		  next // @END xroot.ChildCount		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SearchResults(XmlContent As String)		  Dim Xml as new XmlDocument		  Dim xroot as XmlNode //, xnode, xitem, xleaf as XmlNode		  		  Xml.PreserveWhitespace = False		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.Child(0).Child(2)		  		  if xroot.ChildCount > 1 then // 2 or more movies found		    SearchWindow( Xml )		    		  elseif xroot.FirstChild.Value = "Nothing Found." and Scrape.ManualSearch then // No Movies found during manual search		    MsgBox "No movies found, try again with less keywords or an alternative title"		    		  elseif xroot.FirstChild.Value = "Nothing Found." and NOT Scrape.ManualSearch then // No movies found during normal search		    		    if dlgWindow("No movies found", "Do you want to do a manual search for the movie?") then		      		      wndSearchMovie.Show		      wndSearchMovie.lstFoundMovies.DeleteAllRows		      		      Dim MovieName as String = MovieAttr.MovieNameFilter( MovieAttr.FolderParent, True )		      if MovieName <> "" then		        wndSearchMovie.edtSearchField.Text = MovieName		      else		        wndSearchMovie.edtSearchField.Text = wndMain.lstMovies.Cell( wndMain.lstMovies.ListIndex, 0 ).ReplaceAll( ".", " " )		      end if		      		      wndSearchMovie.edtSearchField.SelectAll		      wndSearchMovie.lstFoundMovies.ListIndex = - 1		      		    end if		    		  elseif xroot.ChildCount > 0 and Scrape.ManualSearch then // Manual search		    SearchWindow( Xml )		    		  elseif xroot.ChildCount = 1 and not Scrape.ManualSearch then // Only 1 movie found		    Dim xnode, xitem as XmlNode		    Dim i, n as Integer		    		    for i = 0 to xroot.ChildCount - 1		      xnode = xroot.Child(i)		      if xnode.FirstChild <> nil then		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          if xitem.FirstChild <> nil then		            if xitem.Name = "id" then Scrape.TMDBApi( xitem.FirstChild.Value )		          end if		        next		      end if		    next		    		  end if		  		  return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SearchWindow(Xml as XmlDocument)		  Dim xroot, xnode, xitem, xleaf As XmlNode		  Dim lstBox As Listbox		  Dim i, n, t As Integer		  Dim sTitle, sYear As String		  		  xroot = Xml.Child(0).Child(2)		  		  Progressor("close")		  wndSearchMovie.Show		  lstBox = wndSearchMovie.lstFoundMovies		  lstBox.DeleteAllRows		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      		      lstBox.AddRow		      		      for n = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        if xitem.FirstChild <> nil then		          		          select case xitem.Name		            		          case "name"		            lstBox.Cell( lstBox.LastIndex, 2 ) = xitem.FirstChild.Value		            sTitle = xitem.FirstChild.Value		          case "id"		            lstBox.Cell( lstBox.LastIndex, 1 ) = xitem.FirstChild.Value		          case "released"		            lstBox.Cell( lstBox.LastIndex, 3 ) = xitem.FirstChild.Value		            sYear = xitem.FirstChild.Value.Left(4)		          case "overview"		            lstBox.Cell( lstBox.LastIndex, 4 ) = xitem.FirstChild.Value		          case "images"		            for t = 0 to xitem.ChildCount - 1		              xleaf = xitem.Child(t)		              		              if xleaf.GetAttribute("type") = "poster"   and xleaf.GetAttribute("size") = "w154"  then lstBox.Cell( lstBox.LastIndex, 5 ) = xleaf.GetAttribute("url")		              if xleaf.GetAttribute("type") = "backdrop" and xleaf.GetAttribute("size") = "thumb" then lstBox.Cell( lstBox.LastIndex, 6 ) = xleaf.GetAttribute("url")		              		            next // @END xitem.ChildCount		            		          end select // @END xitem.Name		          		          lstBox.Cell( lstBox.LastIndex, 0 ) = "(" + sYear + ") " + sTitle		          		        end if // @END xitem.FirstChild <> nil		        		      next // @END xnode.ChildCount		      		    end if // @END xnode.FirstChild <> nil		    		  next // @END xroot.ChildCount		  		  lstBox.SortedColumn = 0		  lstBox.ColumnSortDirection(0) = 2		  lstBox.Sort		  lstBox.ListIndex = 0		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function URL_Images(ID As String) As String		  Return "http://api.themoviedb.org/2.1/Movie.getImages/" + DBLanguage + "/xml/" + ApiKey + "/" + ID		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function URL_Info(ID As String) As String		  if ID.Left(2) = "tt" then		    // Use IMDB ID for lookup		    return "http://api.themoviedb.org/2.1/Movie.imdbLookup/" + DBLanguage + "/xml/" + ApiKey + "/" + ID		  else		    // Use TMDB ID for lookup		    return "http://api.themoviedb.org/2.1/Movie.getInfo/" + DBLanguage + "/xml/" + ApiKey + "/" + ID		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function URL_Search(MovieName As String) As String		  return "http://api.themoviedb.org/2.1/Movie.search/" + DBLanguage + "/xml/" + ApiKey + "/" + String2Entities( MovieName )		End Function	#tag EndMethod	#tag Note, Name = TMDB Api Docs				http://api.themoviedb.org/2.1	#tag EndNote	#tag Constant, Name = ApiKey, Type = String, Dynamic = False, Default = \"683359f622e4e27f41832a019d90b002", Scope = Public	#tag EndConstant	#tag Constant, Name = MirrorPath, Type = String, Dynamic = False, Default = \"http://hwcdn.themoviedb.org", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Address"			Visible=true			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="defaultPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyAddress"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Port"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="yield"			Visible=true			Group="Behavior"			InitialValue="1"			Type="boolean"			InheritedFrom="HTTPSocket"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass