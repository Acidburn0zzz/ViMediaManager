#tag ModuleProtected Module Scrape	#tag Method, Flags = &h1		Protected Sub AllAnime()		  Dim ShowName, XmlContent, CheckName As String		  Dim i, LstCount As Integer		  Dim sckt as new TVDB		  sckt.Yield = True		  MassSearch = True		  		  LstCount = wndMain.lstAnime.ListCount		  		  for i = 0 to LstCount - 1		    if wndMain.lstAnime.Cell(i, 1) = "" then		      ShowName = wndMain.lstAnime.Cell( i, 0 )		      TVAttr.FolderParent = wndMain.lstAnime.CellTag( i, 0 )		      Progressor( "Fetching:",  ShowName.ReplaceAll("&", "&&") + "...", LstCount, i )		      if ShowName <> "" then XmlContent = sckt.Get( sckt.URL_Search( ShowName ), Preferences.TimeOut )		      		      if XmlContent.Left(5) = "<?xml" then		        CheckName = XmlContent.Left( XmlContent.InStr(0, "</seriesname>") - 1 )		        CheckName = CheckName.right( CheckName.Len - CheckName.InStr(0, "<seriesname>") - 11 )		        Progressor( "Processing:", CheckName.ReplaceAll("&amp;", "&&") + "...", LstCount, i )		        sckt.ScrapeFirstResult( XmlContent )		      end if		    end if		  next		  		  sckt.Close		  Progressor("close")		  wndMain.PopulateAnimeList		  MassSearch = False		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AllMovies()		  Dim MovieName, XmlContent As String		  Dim i As Integer		  Dim sckt as new TMDB		  sckt.Yield = True		  MassSearch = True		  		  for i = 0 to wndMain.lstMovies.ListCount - 1		    		    if wndMain.lstMovies.Cell( i, 1 ) = "" then		      MovieAttr.FolderParent = wndMain.lstMovies.CellTag( i, 0 )		      MovieName = MovieAttr.MovieNameFilter( MovieAttr.FolderParent, True )		      Progressor( "Fetching:", MovieName + "...", wndMain.lstMovies.ListCount - 1, i )		      if MovieName <> "" then XmlContent = sckt.Get( sckt.URL_Search( MovieName ), Preferences.TimeOut )		      if XmlContent.left(5) = "<?xml" then sckt.ScrapeFirstResult( XmlContent )		    end if		  next		  		  sckt.Close		  MassSearch = False		  wndMain.PopulateMoviesList		  Progressor("close")		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AllTVShows()		  Dim ShowName, XmlContent, CheckName As String		  Dim i, LstCount As Integer		  Dim sckt as new TVDB		  sckt.Yield = True		  MassSearch = True		  		  LstCount = wndMain.lstTVShows.ListCount		  		  for i = 0 to LstCount - 1		    if wndMain.lstTVShows.Cell(i, 1) = "" then		      ShowName = wndMain.lstTVShows.Cell( i, 0 )		      TVAttr.FolderParent = wndMain.lstTVShows.CellTag( i, 0 )		      Progressor( "Fetching:",  ShowName.ReplaceAll("&", "&&") + "...", LstCount, i )		      if ShowName <> "" then XmlContent = sckt.Get( sckt.URL_Search( ShowName ), Preferences.TimeOut )		      		      if XmlContent.Left(5) = "<?xml" then		        CheckName = XmlContent.Left( XmlContent.InStr(0, "</seriesname>") - 1 )		        CheckName = CheckName.right( CheckName.Len - CheckName.InStr(0, "<seriesname>") - 11 )		        Progressor( "Processing:", CheckName.ReplaceAll("&amp;", "&&") + "...", LstCount, i )		        sckt.ScrapeFirstResult( XmlContent )		      end if		    end if		  next		  		  sckt.Close		  Progressor("close")		  wndMain.PopulateTVShowsList		  MassSearch = False		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AniDBApi(Content As String, ID As Boolean = False)		  Dim XmlContent As String		  Dim sckt as new AniDB		  sckt.Yield = True		  		  // ID Mode		  if ID and Content = "" then		    MsgBox "I don't know which anime this is!" + chr(13) + chr(13) + "Please fetch the metadata for this anime first."		    Return		  elseif ID and Content <> "" then		    if not MassSearch then Progressor("Fetching:", "AniDB Information...",6, 1)		    wndMain.HTMLDecoder.LoadURL "http://api.anidb.net:9001/httpapi?request=anime&client=vimediamanager&clientver=1&protover=1&aid=" + Content		    Return		  end if		  		  // Content Mode		  if NOT ID and Content.Left(5) = "<?xml" then		    if not MassSearch then Progressor("Processing:", "AniDB Information...", 6, 2)		    sckt.ScrapeResults( Content )		    		    if not MassSearch then Progressor("Processing:", "Found Information...", 6, 6)		    		    SaveNFOFile( AnimeAttr.FolderParent, "Anime" )		    		    if not MassSearch then Progressor("close")		  elseif NOT ID then		    if not MassSearch then Progressor("close")		    MsgBox "Invalid content found:" + chr(13) + chr(13) + Content		  end if		  		  sckt.Close		  if not MassSearch then wndMain.PopulateAnimeList		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AniDBApiSearch(AnimeTitle As String)		  Dim XmlContent as String		  Dim sckt as new AniDB		  sckt.Yield = True		  		  Progressor("Fetching:", "The AniDB information...", 2, 1 )		  XmlContent = sckt.Get( sckt.URL_Search( AnimeTitle ), Preferences.TimeOut )		  		  XmlContent = DefineEncoding( XmlContent, Encodings.UTF8 )		  		  if XmlContent.Left(5) = "<?xml" then		    Progressor("Processing:", "The AniDB information...", 2, 2 )		    sckt.SearchResults( XmlContent )		    Progressor("close")		  else		    Progressor("close")		    MsgBox "http://anisearch.outrance.pl cannot be reached. please try again later!"		    if DebugBuild then MsgBox "Invalid content found:" + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearArts()		  ReDim ArtSize(-1)		  ReDim ArtThumb(-1)		  ReDim ArtThumbURL(-1)		  ReDim ArtURL(-1)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub FanartTVApi(ID As String, Mode As String = "")		  // Modes: clearart, clearlogo, tvthumb, seasonthumb		  Dim XmlContent As String		  Dim sckt as new FanartTV		  sckt.Yield = True		  		  if ID = "" and AnimeAttr.Type <> "Movie" then		    MsgBox "I don't know which show this is!" + chr(13) + chr(13) + "Please fetch the metadata for this show first."		    Return		  elseif ID = "" and AnimeAttr.Type = "Movie" then		    MsgBox "This is an anime movie, not an anime tv show." + chr(13) + chr(13) + "Movies don't have banners, clearart, logo's and thumbnails."		    Return		  end if		  		  if NOT MassSearch then Progressor("Fetching:", "FanartTV Information...", 2, 1)		  XmlContent = sckt.Get( sckt.URL_Images( ID, Mode ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    if NOT MassSearch then Progressor("Processing:", "FanartTV Information...", 2, 2)		    sckt.GetArt( XmlContent, Mode )		    if NOT MassSearch then Progressor("close")		  else		    if NOT MassSearch then Progressor("close")		    MsgBox "Invalid content found:" + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub IMDbApi(ID As String, Full As Boolean = True)		  Dim XmlContent As String		  Dim sckt as new IMDB		  sckt.Yield = True		  		  if ID = "" then		    MsgBox "I don't know which movie this is!" + chr(13) + chr(13) + "Please fetch the metadata for this show first."		    Return		  end if		  		  if not MassSearch then Progressor("Fetching:", "IMDb Information...", 3, 1)		  XmlContent = sckt.Get( sckt.URL_IMDBApi( ID, Full ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    		    if full then		      if not MassSearch then Progressor("Processing:", "IMDb Information...", 3, 2)		      sckt.IMDbFullInfo( XmlContent )		      IMDbApi( ID, false )		    else		      if not MassSearch then Progressor("Processing:", "IMDb Information...", 3, 3)		      sckt.IMDbShortInfo( XmlContent )		      SaveNFOFile( MovieAttr.FolderParent, "Movie" )		      if not MassSearch then Progressor("close")		    end if		    		  else		    if not MassSearch then MsgBox "IMDb Api did not respond, please try again later" + chr(13) + chr(13) + "While the IMDb Api did not work, The MovieDB information has still been saved"		    if not MassSearch then Progressor("close")		    if debugbuild then MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub IMDbApiTV(ID As String)		  Dim XmlContent As String		  Dim sckt as new IMDB		  sckt.Yield = True		  		  if ID = "" then		    MsgBox "I don't know which movie this is!" + chr(13) + chr(13) + "Please fetch the metadata for this show first."		    Return		  end if		  		  if not MassSearch then Progressor("Fetching:", "IMDb Information...", 8, 7)		  XmlContent = sckt.Get( sckt.URL_IMDBApi( ID, True ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    		    if not MassSearch then Progressor("Processing:", "IMDb Information...", 8, 8)		    sckt.IMDbTV( XmlContent )		    SaveNFOFile( TVAttr.FolderParent, "TVShow" )		    if not MassSearch then Progressor("close")		    		  else		    if not MassSearch then MsgBox "IMDb Api did not respond, please try again later"		    if not MassSearch then Progressor("close")		    if debugbuild then MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SaveNFOFile(NFOParent As FolderItem, Type As String)		  // Locate and Save NFO file		  Dim NFOFile, MovieFile As FolderItem		  Dim MovieName As String		  		  if Type = "Movie" then		    		    NFOFile = MovieAttr.MovieNFOFilter( NFOParent )		    		    if NFOFile <> nil and NFOFile.Exists then		      MovieAttr.WriteInformation( NFOFile )		      		    elseif NFOFile = nil then		      MovieName = MovieAttr.MovieNameFilter( NFOParent, False )		      MovieFile = MovieAttr.MovieItemFilter( NFOParent )		      		      if MovieName <> "" and MovieFile <> nil and MovieFile.Exists then		        NFOFile = NFOParent.Child( MovieName + ".nfo" )		      else		        NFOFile = NFOParent.Child( "movie.nfo" )		      end if		      		      MovieAttr.WriteInformation( NFOFile )		    end if		    		  elseif Type = "TVShow" then		    TVAttr.WriteInformation( NFOParent )		  elseif Type = "Anime" then		    AnimeAttr.WriteInformation( NFOParent )		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApi(ID As String)		  Dim XmlContent As String		  Dim sckt as new TMDB		  sckt.Yield = True		  		  if ID = "" then		    MsgBox "I don't know which movie this is!" + chr(13) + chr(13) + "Please fetch the metadata for this movie first."		    Return		  end if		  		  if not MassSearch then Progressor("Fetching:", "TMDb Information...", 4, 1)		  XmlContent = sckt.Get( sckt.URL_Info( ID ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    if not MassSearch then Progressor("Processing:", "TMDb Information...", 4, 2)		    sckt.ScrapeResults( XmlContent )		    SaveNFOFile( MovieAttr.FolderParent, "Movie" )		    if Preferences.IMDBScrapeEnabled and MovieAttr.IMDBID <> "" then IMDbApi( MovieAttr.IMDBID )		    if not MassSearch then Progressor("close")		  else		    if not MassSearch then Progressor("close")		    MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		  if NOT MassSearch and NOT Preferences.IMDBScrapeEnabled then wndMain.PopulateMoviesList		End Sub	#tag EndMethod	#tag Method, Flags = &h1, CompatibilityFlags = TargetHasGUI		Protected Sub TMDBApiArt(ID As String, Mode As String = "")		  Dim XmlContent As String		  Dim sckt as new TMDB		  sckt.Yield = True		  		  if ID = "" then		    MsgBox "I don't know which movie this is!" + chr(13) + chr(13) + "Please fetch the metadata for this show first."		    Return		  end if		  		  Progressor("Fetching:", "TMDb " + Mode + " URls...", 2, 1)		  XmlContent = sckt.Get( sckt.URL_Images( ID ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    Progressor("Processing:", "TMDb " + Mode + " Information...", 2, 2)		    sckt.GetArt( XmlContent, Mode )		  elseif XmlContent = "<h1>Not Found</h1>" then		    Progressor("close")		    MsgBox "No images found"		  else		    Progressor("close")		    MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApiSearch(MovieName As String)		  Dim XmlContent As String		  Dim sckt as new TMDB		  sckt.Yield = True		  		  Progressor("Fetching:", "The MovieDB information...", 2, 1)		  XmlContent = sckt.Get( sckt.URL_Search( MovieName ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    Progressor("Processing:", "The MovieDB information...", 2, 2 )		    sckt.SearchResults( XmlContent )		    Progressor("close")		  else		    Progressor("close")		    MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TVDBApi(ID As String, Mode As String = "Info")		  Dim XmlContent As String		  Dim sckt as new TVDB		  sckt.Yield = True		  		  if ID = "" then		    MsgBox "I don't know which show this is!" + chr(13) + chr(13) + "Please fetch the metadata for this show first."		    Return		  end if		  		  if Mode = "Info" then		    if not MassSearch then Progressor("Fetching:", "TVDB Information...", 8, 1)		    XmlContent = sckt.Get( sckt.URL_Info( ID ), Preferences.TimeOut )		  elseif Mode = "Actors" then		    if not MassSearch then Progressor("Fetching:", "TVDB Actors..", 8, 3)		    XmlContent = sckt.Get( sckt.URL_Actors( ID ), Preferences.TimeOut )		  elseif Mode = "Art" then		    if not MassSearch then Progressor("Fetching:", "TVDB Images...", 8, 5)		    XmlContent = sckt.Get( sckt.URL_Art( ID ), Preferences.TimeOut )		  end if		  		  if XmlContent.Left(5) = "<?xml" then		    		    if Mode = "Info" then		      if not MassSearch then Progressor("Processing:", "TVDB Information...", 8, 2)		      sckt.ScrapeResults( XmlContent )		      TVDBApi( TVAttr.TVDBID, "Actors" )		    elseif Mode = "Actors" then		      if not MassSearch then Progressor("Processing:", "TVDB Actors...", 8, 4)		      sckt.ScrapeActors( XmlContent )		      TVDBApi( TVAttr.TVDBID, "Art" )		    elseif Mode = "Art" then		      if not MassSearch then Progressor("Processing:", "TVDB Images...", 8, 6)		      sckt.ScrapeArt( XmlContent )		      if TVAttr.IMDBID <> "" then IMDbApiTV( TVAttr.IMDBID )		    end if		    		    if mode = "Art" then SaveNFOFile( TVAttr.FolderParent, "TVShow" )		    if not MassSearch then Progressor("close")		    		    sckt.Close		    if not MassSearch and wndMain.ppMedia.Value = 1 and mode = "Art" then		      wndMain.PopulateTVShowsList		    elseif not MassSearch and wndMain.ppMedia.Value = 2 and mode = "Art" then		      wndMain.PopulateAnimeList		    end if		    		  else		    if not MassSearch then Progressor("close")		    MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TVDBApiArt(ID As String, Mode As String = "")		  Dim XmlContent As String		  Dim sckt As new TVDB		  sckt.Yield = True		  		  if ID = "" and AnimeAttr.Type <> "Movie" then		    MsgBox "I don't know which show this is!" + chr(13) + chr(13) + "Please fetch the metadata for this show first."		    Return		  elseif ID = "" and AnimeAttr.Type = "Movie" then		    MsgBox "This is an anime movie, not an anime tv show." + chr(13) + chr(13) + "Movies don't have banners, clearart, logo's and thumbnails."		    Return		  end if		  		  Progressor( "Fetching:", "TVDB " + Mode + " URls...", 2, 1 )		  XmlContent = sckt.Get( sckt.URL_Art( ID ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    Progressor( "Processing:", "TVDB " + Mode + " information...", 2, 2 )		    sckt.GetArt( XmlContent, Mode )		  elseif XmlContent = "</h1>Not Found</h1>" then		    Progressor("close")		    MsgBox "No images found"		  else		    Progressor("close")		    MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TVDBApiSearch(SeriesName As String)		  Dim XmlContent As String		  Dim sckt as new TVDB		  sckt.Yield = True		  		  Progressor("Fetching:", "The TVDB information...", 2, 1)		  XmlContent = sckt.Get( sckt.URL_Search( SeriesName ), Preferences.TimeOut )		  		  if XmlContent.Left(5) = "<?xml" then		    Progressor("Processing:", "The TVDB information...", 2, 2 )		    sckt.SearchResults( XmlContent )		    Progressor("close")		  else		    Progressor("close")		    if DebugBuild then MsgBox "Invalid content found: " + chr(13) + chr(13) + XmlContent		  end if		  		  sckt.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TVRageNextAired(Name As String)		  Dim Content As String		  Dim sckt as new TVRage		  sckt.Yield = True		  		  Content = sckt.Get( sckt.URL_QuickInfo( Name ), Preferences.TimeOut )		  		  if Content.Left(7) <> "No Show" then sckt.ScrapeResults( Content )		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub UpdateAnimeStatus()		  Dim sckt as new TVDB		  Dim ID, XmlContent As String		  Dim LstBox As Listbox = wndMain.lstAnime		  Dim i as integer		  		  sckt.Yield = True		  MassSearch = True		  		  for i = 0 to LstBox.ListCount - 1		    if LstBox.Cell(i, 1) <> "" then		      		      Progressor("Fetching:", LstBox.Cell(i, 0) + " Information...", LstBox.ListCount - 1, i)		      AnimeAttr.FolderParent = LstBox.CellTag(i, 0)		      AnimeAttr.ReadInformation( AnimeAttr.FolderParent )		      		      if AnimeAttr.Type <> "Movie" then		        ID = AnimeAttr.ID_TVDb'LstBox.Cell(i, 1)		        XmlContent = sckt.Get( sckt.URL_Info( ID ), Preferences.TimeOut )		        sckt.Close		        		        if XmlContent.Left(5) = "<?xml" then		          Progressor("Processing:", AnimeAttr.Title + " Information...", LstBox.ListCount - 1, i)		          sckt.UpdateShowStatus( XmlContent )		          SaveNFOFile( AnimeAttr.FolderParent, "Anime" )		        end if		        		      else		        		      end if		      		    end if		  next		  		  Progressor("close")		  MassSearch = False		  sckt.Close		  wndMain.PopulateAnimeList		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub UpdateTVShowStatus()		  Dim sckt as new TVDB		  Dim ID, XmlContent As String		  Dim LstBox As Listbox = wndMain.lstTVShows		  Dim i as integer		  		  sckt.Yield = True		  MassSearch = True		  		  for i = 0 to LstBox.ListCount - 1		    if LstBox.Cell(i, 1) <> "" then		      		      Progressor("Fetching:", LstBox.Cell(i, 0) + " Information...", LstBox.ListCount - 1, i)		      ID = LstBox.Cell(i, 1)		      TVAttr.FolderParent = LstBox.CellTag(i, 0)		      TVAttr.ReadInformation( TVAttr.FolderParent )		      		      XmlContent = sckt.Get( sckt.URL_Info( ID ), Preferences.TimeOut )		      sckt.Close		      		      if XmlContent.Left(5) = "<?xml" then		        Progressor("Processing:", TVAttr.Title + " Information...", LstBox.ListCount - 1, i)		        sckt.UpdateShowStatus( XmlContent )		        SaveNFOFile( TVAttr.FolderParent, "TVShow" )		      end if		    end if		  next		  		  Progressor("close")		  MassSearch = False		  sckt.Close		  wndMain.PopulateTVShowsList		End Sub	#tag EndMethod	#tag Note, Name = MoviePoster DB's				http://www.themoviedb.org/		http://www.movieposterdb.com/		http://www.impawards.com/	#tag EndNote	#tag Note, Name = XBMC NFO files				http://wiki.xbmc.org/?title=Import_-_Export_Library#Video_nfo_Files		http://code.google.com/p/moviejukebox/wiki/NFO_Files	#tag EndNote	#tag Property, Flags = &h0		AniDBXMLDocs() As String	#tag EndProperty	#tag Property, Flags = &h0		ArtSize() As String	#tag EndProperty	#tag Property, Flags = &h0		ArtThumb() As Picture	#tag EndProperty	#tag Property, Flags = &h0		ArtThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h0		ArtURL() As String	#tag EndProperty	#tag Property, Flags = &h0		ManualSearch As Boolean = False	#tag EndProperty	#tag Property, Flags = &h0		MassSearch As Boolean	#tag EndProperty	#tag Property, Flags = &h0		tmpID As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="ManualSearch"			Group="Behavior"			InitialValue="False"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="MassSearch"			Group="Behavior"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="tmpID"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule