#tag ModuleProtected Module Glimmer	#tag Method, Flags = &h1		Protected Sub CheckForUpdates()		  BackgroundCheck = False		  wndUpdateProgress.Show		  		  AppcastContent = wndUpdateProgress.UpdateSocket.Get( VersionCheckURL, 30 )		  wndUpdateProgress.UpdateSocket.Close		  		  ParseAppcast( AppcastContent )		  wndUpdateProgress.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub CheckForUpdatesBackground()		  Dim sckt as new HTTPSocket		  sckt.Yield = True		  		  BackgroundCheck = True		  AppcastContent = sckt.Get( VersionCheckURL, 30 )		  sckt.Close		  		  ParseAppcast( AppcastContent )		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub GetCurrentVersion()		  Dim StageCode As String		  		  select case app.StageCode		  case 0		    StageCode = "d"		  case 1		    StageCode = "a"		  case 2		    StageCode = "b"		  case 3		    StageCode = "f"		  end select		  		  if StageCode = "d" then		    Glimmer.CurrentVersion = "Developement"		  elseif StageCode = "b" and app.NonReleaseVersion > 0 then		    if app.BugVersion > 0 then		      Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion) + "." + str(app.BugVersion) + StageCode + str(app.NonReleaseVersion)		    else		      Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion) + StageCode + str(app.NonReleaseVersion)		    end if		  else		    if app.BugVersion > 0 then		      Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion) + "." + str(app.BugVersion)		    else		      Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion)		    end if		  end if		  		  'if Glimmer.CheckForBetaReleases then		  '		  'if app.BugVersion > 0 then		  '		  'if StageCode = "b" then		  'Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion) + "." + str(app.BugVersion) + StageCode + str(app.NonReleaseVersion)		  'else		  'Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion) + "." + str(app.BugVersion)		  'end if		  '		  'else		  '		  'if StageCode = "b" then		  'Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion) + StageCode + str(app.NonReleaseVersion)		  'else		  'Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion)		  'end if		  '		  'end if		  '		  'else		  '		  'if app.BugVersion > 0 then		  'Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion) + "." + str(app.BugVersion)		  'else		  'Glimmer.CurrentVersion = str(app.MajorVersion) + "." + str(app.MinorVersion)		  'end if		  '		  'end if		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub ParseAppcast(AppcastXML As String)		  Dim Xml As New XmlDocument		  Dim xroot, xnode, xitem As XmlNode		  Dim i As Integer		  		  xml.PreserveWhitespace = False		  		  if AppcastXML.Left(5) = "<?xml" then		    Xml.LoadXml( AppcastXML )		  else		    if DebugBuild then MsgBox "No valid appcast available."		    return		  end if		  		  xroot = Xml.Child(0).FirstChild		  for i = 0 to xroot.ChildCount - 1		    		    xnode = xroot.Child(i)		    		    if xnode.Name = "item" then		      xitem = xroot.Child(i)		      		      if Preferences.CheckForBetaUpdates = "True" then		        NewVersion = xitem.Child(0).FirstChild.Value		        ReleasenotesLink = xitem.Child(3).FirstChild.Value		        		        DownloadURLMac = xitem.Child(4).GetAttribute("url")		        DownloadURLWin = xitem.Child(5).GetAttribute("url")		        DownloadURLLinux = xitem.Child(6).GetAttribute("url")		        		        i = xroot.ChildCount		      elseif Preferences.CheckForBetaUpdates = "False" and xitem.FirstChild.FirstChild.Value.InStr(-1, "b") = 0 then		        NewVersion = xitem.Child(0).FirstChild.Value		        ReleasenotesLink = xitem.Child(3).FirstChild.Value		        		        DownloadURLMac = xitem.Child(4).GetAttribute("url")		        DownloadURLWin = xitem.Child(5).GetAttribute("url")		        DownloadURLLinux = xitem.Child(6).GetAttribute("url")		        		        i = xroot.ChildCount		      end if		      		    end if		    		  next		  		  if CurrentVersion = "Developement" then		    #if not DebugBuild then MsgBox "This is a 'Development' build, Update to the latest version!"		    Return		  elseif Preferences.SkipVersion = NewVersion or CurrentVersion = NewVersion then		    if NOT BackgroundCheck then wndUpToDate.Show		    Return		  else		    if NOT Silent then		      wndUpdateAvailable.Show		      wndUpdateAvailable.HTMLReleaseNotes.LoadURL ReleasenotesLink		    end if		    Return		  end if		  		  if UpdateAvailable( CurrentVersion, NewVersion ) = True then		    wndUpdateAvailable.Show		    wndUpdateAvailable.HTMLReleaseNotes.LoadURL ReleasenotesLink		  else		    if NOT BackgroundCheck then wndUpToDate.Show		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function UpdateAvailable(CurrVers As String, NewVers As String) As Boolean		  'MsgBox "Current: " + CurrVers + ", New: " + NewVers		  		  Dim NewMajorVers,  NewMinorVers,  NewBugVers,  NewBetaVers  As Integer = 0		  Dim CurrMajorVers, CurrMinorVers, CurrBugVers, CurrBetaVers As Integer = 0		  		  Dim MajorBigger, MinorBigger, BugBigger, BetaBigger as Boolean = False		  		  NewMajorVers = val( NewVers.NthField(".", 1) )		  NewMinorVers = val( NewVers.NthField(".", 2) )		  NewBugVers =   val( NewVers.NthField(".", 3) )		  		  CurrMajorVers = val( CurrVers.NthField(".", 1) )		  CurrMinorVers = val( CurrVers.NthField(".", 2) )		  CurrBugVers =   val( CurrVers.NthField(".", 3) )		  		  if Preferences.CheckForBetaUpdates = "True" then		    NewBetaVers = val( NewVers.NthField("b", 1) )		    CurrBetaVers = Val( CurrVers.NthField("b", 1) )		  end if		  		  'MsgBox str(NewMajorVers) + "." + str(NewMinorVers) + "." + str(NewBugVers) + "b" + str(NewBetaVers)		  'MsgBox str(CurrMajorVers) + "." + str(CurrMinorVers) + "." + str(CurrBugVers) + "b" + str(CurrBetaVers)		  		  if NewMajorVers > CurrMajorVers then MajorBigger = True		  if NewMinorVers > CurrMinorVers then MinorBigger = True		  if NewBugVers > CurrBugVers     then BugBigger   = True		  if NewBetaVers > CurrBetaVers   then BetaBigger  = True		  		  return true		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected AppcastContent As String	#tag EndProperty	#tag Property, Flags = &h1		Protected BackgroundCheck As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected CurrentVersion As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DownloadURLLinux As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DownloadURLMac As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DownloadURLWin As String	#tag EndProperty	#tag Property, Flags = &h1		Protected NewVersion As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ReleasenotesLink As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Silent As Boolean	#tag EndProperty	#tag Constant, Name = VersionCheckURL, Type = String, Dynamic = False, Default = \"http://mariusth.channelwood.org/vimediamanager/appcast.xml", Scope = Protected	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule