#tag WindowBegin Window wndMain   BackColor       =   16777215   Backdrop        =   ""   CloseButton     =   True   Composite       =   True   Frame           =   0   FullScreen      =   False   HasBackColor    =   False   Height          =   640   ImplicitInstance=   True   LiveResize      =   True   MacProcID       =   0   MaxHeight       =   32000   MaximizeButton  =   True   MaxWidth        =   32000   MenuBar         =   266799493   MenuBarVisible  =   True   MinHeight       =   640   MinimizeButton  =   True   MinWidth        =   900   Placement       =   2   Resizeable      =   True   Title           =   "ViMediaManager"   Visible         =   True   Width           =   1200   Begin PagePanel ppMedia      AutoDeactivate  =   True      Enabled         =   True      Height          =   640      HelpTag         =   ""      Index           =   -2147483648      InitialParent   =   ""      Left            =   0      LockBottom      =   True      LockedInPosition=   False      LockLeft        =   True      LockRight       =   True      LockTop         =   True      PanelCount      =   3      Panels          =   ""      Scope           =   0      TabIndex        =   0      TabPanelIndex   =   0      Top             =   0      Value           =   2      Visible         =   True      Width           =   1200      Begin ifkSegmentView ListToolbar         AcceptFocus     =   True         AcceptTabs      =   ""         AutoDeactivate  =   True         DoubleBuffer    =   False         Enabled         =   True         EraseBackground =   ""         Height          =   25         HelpTag         =   ""         Index           =   1         InitialParent   =   "ppMedia"         Left            =   -1         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   False         Mode            =   2         Scope           =   0         Size            =   0         Style           =   1         TabIndex        =   1         TabPanelIndex   =   2         TabStop         =   True         TextFont        =   "SmallSystem"         TextSize        =   0         Top             =   616         UseFocusRing    =   ""         Visible         =   True         Width           =   252      End      Begin Canvas cvsMovies         AcceptFocus     =   ""         AcceptTabs      =   ""         AutoDeactivate  =   True         Backdrop        =   ""         DoubleBuffer    =   True         Enabled         =   True         EraseBackground =   False         Height          =   575         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Left            =   300         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   True         LockTop         =   True         Scope           =   0         TabIndex        =   2         TabPanelIndex   =   1         TabStop         =   True         Top             =   0         UseFocusRing    =   True         Visible         =   True         Width           =   900      End      Begin Canvas cvsTVShows         AcceptFocus     =   ""         AcceptTabs      =   ""         AutoDeactivate  =   True         Backdrop        =   ""         DoubleBuffer    =   True         Enabled         =   True         EraseBackground =   False         Height          =   583         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Left            =   250         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   True         LockTop         =   True         Scope           =   0         TabIndex        =   1         TabPanelIndex   =   2         TabStop         =   True         Top             =   0         UseFocusRing    =   True         Visible         =   True         Width           =   950      End      Begin PushButton btnTVTest         AutoDeactivate  =   True         Bold            =   ""         ButtonStyle     =   0         Cancel          =   ""         Caption         =   "Test"         Default         =   ""         Enabled         =   True         Height          =   20         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Italic          =   ""         Left            =   269         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   False         Scope           =   0         TabIndex        =   2         TabPanelIndex   =   2         TabStop         =   True         TextFont        =   "System"         TextSize        =   0         TextUnit        =   0         Top             =   600         Underline       =   ""         Visible         =   True         Width           =   80      End      Begin PushButton btnTestMovies         AutoDeactivate  =   True         Bold            =   ""         ButtonStyle     =   0         Cancel          =   ""         Caption         =   "Test"         Default         =   ""         Enabled         =   True         Height          =   20         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Italic          =   ""         Left            =   320         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   False         Scope           =   0         TabIndex        =   3         TabPanelIndex   =   1         TabStop         =   True         TextFont        =   "System"         TextSize        =   0         TextUnit        =   0         Top             =   600         Underline       =   ""         Visible         =   True         Width           =   80      End      Begin Canvas cvsAnime         AcceptFocus     =   ""         AcceptTabs      =   ""         AutoDeactivate  =   True         Backdrop        =   ""         DoubleBuffer    =   True         Enabled         =   True         EraseBackground =   False         Height          =   583         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Left            =   250         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   True         LockTop         =   True         Scope           =   0         TabIndex        =   3         TabPanelIndex   =   3         TabStop         =   True         Top             =   0         UseFocusRing    =   True         Visible         =   True         Width           =   950      End      Begin ListboxPRO lstTVShows         AlternatingRows =   False         AppleSidebar    =   True         AutoDeactivate  =   True         AutoHideScrollbars=   True         Bold            =   ""         Border          =   True         ColumnCount     =   3         ColumnsResizable=   ""         ColumnWidths    =   "100%, *"         DataField       =   ""         DataSource      =   ""         DefaultRowHeight=   20         Enabled         =   True         EnableDrag      =   ""         EnableDragReorder=   ""         GridLinesHorizontal=   0         GridLinesVertical=   0         HasHeading      =   False         HeadingIndex    =   -1         Height          =   615         HelpTag         =   ""         Hierarchical    =   False         Index           =   -2147483648         InitialParent   =   "ppMedia"         InitialValue    =   ""         Italic          =   ""         LastKeyPressedAt=   0         Left            =   0         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   False         LockRight       =   False         LockTop         =   True         RequiresSelection=   True         RightSidePicture=   False         Scope           =   0         ScrollbarHorizontal=   True         ScrollBarVertical=   True         SelectionGradient=   True         SelectionType   =   0         TabIndex        =   0         TabPanelIndex   =   2         TabStop         =   True         TextFont        =   "System"         TextSize        =   13         TextUnit        =   0         Top             =   0         Underline       =   ""         UseFocusRing    =   False         Visible         =   True         Width           =   251         _ScrollWidth    =   -1      End      Begin ifkSplitter splitTVShows         AcceptFocus     =   ""         AcceptTabs      =   ""         AutoDeactivate  =   True         Direction       =   0         DoubleBuffer    =   False         Enabled         =   True         EraseBackground =   ""         Height          =   640         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Left            =   250         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   True         Maximum         =   500         Minimum         =   50         Scope           =   0         Style           =   1         TabIndex        =   3         TabPanelIndex   =   2         TabStop         =   True         Top             =   0         UseFocusRing    =   ""         Visible         =   True         Width           =   12      End      Begin ifkSegmentView ListToolbar         AcceptFocus     =   True         AcceptTabs      =   ""         AutoDeactivate  =   True         DoubleBuffer    =   False         Enabled         =   True         EraseBackground =   ""         Height          =   25         HelpTag         =   ""         Index           =   0         InitialParent   =   "ppMedia"         Left            =   -1         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   False         Mode            =   2         Scope           =   0         Size            =   0         Style           =   1         TabIndex        =   5         TabPanelIndex   =   1         TabStop         =   True         TextFont        =   "SmallSystem"         TextSize        =   0         Top             =   616         UseFocusRing    =   ""         Visible         =   True         Width           =   302      End      Begin ListboxPRO lstMovies         AlternatingRows =   False         AppleSidebar    =   True         AutoDeactivate  =   True         AutoHideScrollbars=   True         Bold            =   ""         Border          =   True         ColumnCount     =   7         ColumnsResizable=   True         ColumnWidths    =   "100%, *"         DataField       =   ""         DataSource      =   ""         DefaultRowHeight=   20         Enabled         =   True         EnableDrag      =   ""         EnableDragReorder=   ""         GridLinesHorizontal=   0         GridLinesVertical=   0         HasHeading      =   False         HeadingIndex    =   -1         Height          =   615         HelpTag         =   ""         Hierarchical    =   False         Index           =   -2147483648         InitialParent   =   "ppMedia"         InitialValue    =   ""         Italic          =   ""         LastKeyPressedAt=   0         Left            =   0         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   True         RequiresSelection=   True         RightSidePicture=   False         Scope           =   0         ScrollbarHorizontal=   False         ScrollBarVertical=   True         SelectionGradient=   True         SelectionType   =   0         TabIndex        =   0         TabPanelIndex   =   1         TabStop         =   True         TextFont        =   "System"         TextSize        =   13         TextUnit        =   0         Top             =   0         Underline       =   ""         UseFocusRing    =   False         Visible         =   True         Width           =   301         _ScrollWidth    =   -1      End      Begin ifkSplitter splitMovies         AcceptFocus     =   ""         AcceptTabs      =   ""         AutoDeactivate  =   True         Direction       =   0         DoubleBuffer    =   False         Enabled         =   True         EraseBackground =   ""         Height          =   640         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Left            =   300         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   True         Maximum         =   500         Minimum         =   50         Scope           =   0         Style           =   1         TabIndex        =   4         TabPanelIndex   =   1         TabStop         =   True         Top             =   0         UseFocusRing    =   ""         Visible         =   True         Width           =   12      End      Begin ifkSegmentView ListToolbar         AcceptFocus     =   True         AcceptTabs      =   ""         AutoDeactivate  =   True         DoubleBuffer    =   False         Enabled         =   True         EraseBackground =   ""         Height          =   25         HelpTag         =   ""         Index           =   2         InitialParent   =   "ppMedia"         Left            =   -1         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   False         Mode            =   2         Scope           =   0         Size            =   0         Style           =   1         TabIndex        =   1         TabPanelIndex   =   3         TabStop         =   True         TextFont        =   "SmallSystem"         TextSize        =   0         Top             =   616         UseFocusRing    =   ""         Visible         =   True         Width           =   252      End      Begin ListboxPRO lstAnime         AlternatingRows =   False         AppleSidebar    =   True         AutoDeactivate  =   True         AutoHideScrollbars=   True         Bold            =   ""         Border          =   True         ColumnCount     =   7         ColumnsResizable=   ""         ColumnWidths    =   "100%, *"         DataField       =   ""         DataSource      =   ""         DefaultRowHeight=   20         Enabled         =   True         EnableDrag      =   ""         EnableDragReorder=   ""         GridLinesHorizontal=   0         GridLinesVertical=   0         HasHeading      =   ""         HeadingIndex    =   -1         Height          =   615         HelpTag         =   ""         Hierarchical    =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         InitialValue    =   ""         Italic          =   ""         LastKeyPressedAt=   0         Left            =   0         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   True         RequiresSelection=   True         RightSidePicture=   False         Scope           =   0         ScrollbarHorizontal=   True         ScrollBarVertical=   True         SelectionGradient=   True         SelectionType   =   0         TabIndex        =   0         TabPanelIndex   =   3         TabStop         =   True         TextFont        =   "System"         TextSize        =   13         TextUnit        =   0         Top             =   0         Underline       =   ""         UseFocusRing    =   False         Visible         =   True         Width           =   251         _ScrollWidth    =   -1      End      Begin ifkSplitter splitAnime         AcceptFocus     =   ""         AcceptTabs      =   ""         AutoDeactivate  =   True         Direction       =   0         DoubleBuffer    =   False         Enabled         =   True         EraseBackground =   ""         Height          =   640         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Left            =   250         LockBottom      =   True         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   True         Maximum         =   500         Minimum         =   50         Scope           =   0         Style           =   1         TabIndex        =   4         TabPanelIndex   =   3         TabStop         =   True         Top             =   0         UseFocusRing    =   ""         Visible         =   True         Width           =   12      End      Begin PushButton btnTestAnime         AutoDeactivate  =   True         Bold            =   ""         ButtonStyle     =   0         Cancel          =   ""         Caption         =   "Test"         Default         =   ""         Enabled         =   True         Height          =   20         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "ppMedia"         Italic          =   ""         Left            =   269         LockBottom      =   ""         LockedInPosition=   False         LockLeft        =   True         LockRight       =   ""         LockTop         =   True         Scope           =   0         TabIndex        =   5         TabPanelIndex   =   3         TabStop         =   True         TextFont        =   "System"         TextSize        =   0         TextUnit        =   0         Top             =   600         Underline       =   ""         Visible         =   True         Width           =   80      End   End   Begin ToolMain MainToolBar      Enabled         =   True      Height          =   61      Index           =   -2147483648      InitialParent   =   ""      Left            =   0      LockedInPosition=   False      Scope           =   0      TabPanelIndex   =   0      Top             =   662      Visible         =   True      Width           =   1127   End   Begin HTMLViewer HTMLDecoder      AutoDeactivate  =   True      Enabled         =   True      Height          =   61      HelpTag         =   ""      Index           =   -2147483648      InitialParent   =   ""      Left            =   1139      LockBottom      =   True      LockedInPosition=   False      LockLeft        =   False      LockRight       =   True      LockTop         =   False      Scope           =   0      TabIndex        =   0      TabPanelIndex   =   0      Top             =   662      Visible         =   True      Width           =   61   EndEnd#tag EndWindow#tag WindowCode	#tag Event		Sub Close()		  Preferences.MainWindowMode = ppMedia.Value		  WritePrefs		End Sub	#tag EndEvent	#tag Event		Sub Open()		  LoadPrefs		  		  'if Not DebugBuild then ToolButton( MainToolBar.Item(2) ).Enabled = False		  		  'ToolButton( MainToolBar.Item( MainWindowMode ) ).Pushed = true		  'ppMedia.Value = Preferences.MainWindowMode		  		  SwitchPanels(MainWindowMode)		  		  #if NOT TargetMacOS then FileOpenSelection.Text = "Open in Explorer"		  		  'ToolButton( MainToolBar.Item( 5 ) ).DropDownMenu = FanartDropdownMenu		  		  if not SpecialFolder.Preferences.Child("com.vidalvanbergen.vimediamanager.xml").Exists then		    wndSplash.Show		  elseif SpecialFolder.Preferences.Child("com.vidalvanbergen.vimediamanager.xml").Exists and _		    Preferences.CheckForUpdates = "True" then		    Glimmer.CheckForUpdatesBackground		  end if		  		  'self.FullScreenPrimaryMBS = true		  		  if isLion then		    ToolButton( MainToolBar.Item(3) ).Style = ToolButton.ToolStyleSpace		    ToolButton( MainToolBar.Item(7) ).Style = ToolButton.ToolStyleSpace		  end if		End Sub	#tag EndEvent	#tag Event		Sub Resized()		  splitMovies.Maximum  = self.Width - 50		  splitTVShows.Maximum = self.Width - 50		  splitAnime.Maximum  = self.Width - 50		End Sub	#tag EndEvent	#tag MenuHandler		Function FileBulkRenamer() As Boolean Handles FileBulkRenamer.Action			if ppMedia.Value = 0 then			MassRenamer( lstMovies )			elseif ppMedia.Value = 1 then			MassRenamer( lstTVShows )			elseif ppMedia.Value = 2 then			MassRenamer( lstAnime )			end if						Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileCloseWindow() As Boolean Handles FileCloseWindow.Action			Quit			Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileFetchAllMetadata() As Boolean Handles FileFetchAllMetadata.Action			if ppMedia.Value = 0 then			Scrape.AllMovies			elseif ppMedia.Value = 1 then			Scrape.AllTVShows			ElseIf ppMedia.Value = 2 then			'Scrape.AllAnime			end if			Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileFetchMetadata() As Boolean Handles FileFetchMetadata.Action			FetchMetadata			Return True		End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileManualSearch() As Boolean Handles FileManualSearch.Action						if ppMedia.Value = 0 then			Dim MovieTitle As String = MovieAttr.MovieNameFilter( MovieAttr.FolderParent )			wndSearchMovie.Show			wndSearchMovie.lstFoundMovies.DeleteAllRows			if MovieTitle <> "" then			wndSearchMovie.edtSearchField.Text = MovieTitle			else			wndSearchMovie.edtSearchField.Text = lstMovies.Cell( lstMovies.ListIndex, 0 )			end if			wndSearchMovie.edtSearchField.SelectAll						elseif ppMedia.Value = 1 then			wndSearchShow.Show			wndSearchShow.lstFoundShows.DeleteAllRows			wndSearchShow.edtSearchField.text = lstTVShows.Cell( lstTVShows.ListIndex, 0 )			wndSearchShow.edtSearchField.SelectAll						elseif ppMedia.Value = 2 then			wndSearchAnime.Show			wndSearchAnime.lstAnime.DeleteAllRows			wndSearchAnime.edtSearch.Text = lstAnime.Cell( lstAnime.ListIndex, 0 )			wndSearchAnime.edtSearch.SelectAll			end if						Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileOpenSelection() As Boolean Handles FileOpenSelection.Action			if ppMedia.Value = 0 then			CommonMenuActions( lstMovies, "Open in Finder")			elseif ppMedia.Value = 1 then			CommonMenuActions( lstTVShows, "Open in Finder" )			elseif ppMedia.Value = 2 then			CommonMenuActions( lstAnime, "Open in Finder" )			end if			Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileReloadAll() As Boolean Handles FileReloadAll.Action			select case FileReloadAll.text			case "Reload Movies"			PopulateMoviesList			case "Reload TV Shows"			PopulateTVShowsList			case "Reload Anime"			PopulateAnimeList			end select						Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileUpdateStatus() As Boolean Handles FileUpdateStatus.Action			if ppMedia.Value = 1 then			Scrape.UpdateTVShowStatus			elseif ppMedia.Value = 2 then			Scrape.UpdateAnimeStatus			end if			Return True		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ToolsSortFilesIntoFolders() As Boolean Handles ToolsSortFilesIntoFolders.Action			Dim i as Integer			Dim f as FolderItem						if ppMedia.Value = 0 then			for i = 0 to Preferences.MoviePaths.Ubound			f = GetFolderItem( NthField( MoviePaths( i ), "|", 2) )			if f <> nil and f.Exists then SortFilesIntoFolders( f )			next						PopulateMoviesList			elseif ppMedia.Value = 1 then			// :ToDo			// Recursive search to find episodes and filter season & episode numbers.			// Do a lookup and rename/move episodes to correct locations			//   ShowName/Season01/ShowName - EpisodeTitle S01E02.ext						ElseIf ppMedia.Value = 2 then			// :ToDo			// Recursive search to find episodes and filter season & episode numbers.			// Do a lookup and rename/move episodes to correct locations			//   ShowName/Season01/ShowName - EpisodeTitle S01E02.ext			end if						Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function ViewAnime() As Boolean Handles ViewAnime.Action			SwitchPanels(2)			Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function ViewEditMetadata() As Boolean Handles ViewEditMetadata.Action			if ppMedia.Value = 0 and lstMovies.ListIndex <> -1 then			wndMovieMetadata.Show			elseif ppMedia.Value = 1 and lstTVShows.ListIndex <> -1 then			wndShowMetadata.Show			elseif ppMedia.Value = 2 and lstAnime.ListIndex <> -1 then			if AnimeAttr.Type <> "Movie" then			wndAnimeMetadata.Show			else			wndAnimeMovieMetadata.Show			end if						else			MsgBox "Make a selection first"			end if			Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function ViewMovies() As Boolean Handles ViewMovies.Action			SwitchPanels(0)			Return True		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ViewTVShows() As Boolean Handles ViewTVShows.Action			SwitchPanels(1)			Return True		End Function	#tag EndMenuHandler	#tag MenuHandler		Function WindowMinimize() As Boolean Handles WindowMinimize.Action			self.Minimize			Return True					End Function	#tag EndMenuHandler	#tag MenuHandler		Function WindowZoom() As Boolean Handles WindowZoom.Action			self.Maximize			Return True					End Function	#tag EndMenuHandler	#tag Method, Flags = &h0		Sub CommonMenuActions(lstbox as listbox, HitItemName as String)		  Dim f as FolderItem		  Dim MovieTitle As String		  		  select case HitItemName		    		    // Open Folder --------------------		  case "Open in Finder"		    if lstbox.ListIndex <> -1 then f = lstbox.CellTag(lstbox.ListIndex, 0)		    if f <> nil then f.Launch		    		  case "Open in Explorer"		    if lstbox.ListIndex <> -1 then f = lstbox.CellTag(lstbox.ListIndex, 0)		    if f <> nil then f.Launch		    		    // Reload -------------------------		  case "Reload"		    if lstbox = lstTVShows then		      PopulateTVShowsList		    elseif lstbox = lstMovies then		      PopulateMoviesList		    ElseIf lstbox = lstAnime then		      PopulateAnimeList		    end if		    		  case "Remove Item..."		    if lstbox.ListIndex > -1 and dlgWindow("Are you sure you want to remove " + lstbox.Cell( lstbox.ListIndex, 0 ) + "?", "The selected item will be moved to the trash." ) then		      if ppMedia.Value = 0 then		        MovieAttr.FolderParent.MoveFileTo( SpecialFolder.Trash )		        PopulateMoviesList		      elseif ppMedia.Value = 1 then		        TVAttr.FolderParent.MoveFileTo( SpecialFolder.Trash )		        PopulateTVShowsList		      elseif ppMedia.Value = 2 then		        AnimeAttr.FolderParent.MoveFileTo( SpecialFolder.Trash )		        PopulateAnimeList		      end if		    else		      MsgBox "Make a selection first!"		    end if		    		    // Manual Search ------------------		  case "Manual Search..."		    if ppMedia.Value = 0 then		      wndSearchMovie.Show		      wndSearchMovie.lstFoundMovies.DeleteAllRows		      MovieTitle = MovieAttr.MovieNameFilter( MovieAttr.FolderParent, True )		      if MovieTitle <> "" then wndSearchMovie.edtSearchField.Text = MovieTitle else wndSearchMovie.edtSearchField.Text = lstMovies.Cell( lstMovies.ListIndex, 0 )		      wndSearchMovie.edtSearchField.SelectAll		    elseif ppMedia.Value = 1 then		      wndSearchShow.Show		      wndSearchShow.lstFoundShows.DeleteAllRows		      wndSearchShow.edtSearchField.text = lstbox.Cell( lstbox.ListIndex, 0 )		      wndSearchShow.edtSearchField.SelectAll		    elseif ppMedia.Value = 2 then		      wndSearchAnime.Show		      wndSearchAnime.lstAnime.DeleteAllRows		      wndSearchAnime.edtSearch.Text = lstbox.Cell( lstbox.ListIndex, 0 )		      wndSearchAnime.edtSearch.SelectAll		    end if		    		    // Metadata -----------------------		  case "Fetch Metadata"		    FetchMetadata		    		    // Poster -------------------------		  case "Get Poster..."		    if lstbox = lstTVShows then		      Scrape.TVDBApiArt( TVAttr.TVDBID, "poster" )		      		    elseif lstbox = lstAnime then		      Scrape.TVDBApiArt( AnimeAttr.ID_TVDb, "poster" )		      		    elseif lstbox = lstMovies and lstMovies.Cell( lstMovies.ListIndex, 1 ) <> "" then		      if MovieAttr.TMDbID <> "" then		        Scrape.TMDBApiArt( MovieAttr.TMDbID, "Poster" )		      else		        Scrape.TMDBApiArt( MovieAttr.IMDBID, "Poster" )		      end if		      		    end if		    		    // Fanart -------------------------		  case "Get Fanart..."		    if lstbox = lstTVShows then		      Scrape.TVDBApiArt( TVAttr.TVDBID, "fanart" )		      		    elseif lstbox = lstAnime then		      Scrape.TVDBApiArt( AnimeAttr.ID_TVDb, "fanart" )		      		    elseif lstbox = lstMovies and lstMovies.Cell( lstMovies.ListIndex, 1 ) <> "" then		      if MovieAttr.TMDbID <> "" then		        Scrape.TMDBApiArt( MovieAttr.TMDbID, "Fanart" )		      else		        Scrape.TMDBApiArt( MovieAttr.IMDBID, "Fanart" )		      end if		      		    end if		    		    // Banner -------------------------		  case "Get Banner..."		    if lstbox = lstTVShows then		      Scrape.TVDBApiArt( TVAttr.TVDBID, "series" )		    elseif lstbox = lstAnime then		      Scrape.TVDBApiArt( AnimeAttr.ID_TVDb, "series" )		    end if		    		    // TV Show Art --------------------		  case "Get ClearArt..."		    if lstbox = lstTVShows then		      Scrape.FanartTVApi( TVAttr.TVDBID, "clearart" )		    elseif lstbox = lstAnime then		      Scrape.FanartTVApi( AnimeAttr.ID_TVDb, "clearart" )		    end if		    		  case "Get Logo..."		    if lstbox = lstTVShows then		      Scrape.FanartTVApi( TVAttr.TVDBID, "clearlogo" )		    elseif lstbox = lstAnime then		      Scrape.FanartTVApi( AnimeAttr.ID_TVDb, "clearlogo" )		    end if		    		  case "Get TV Thumb..."		    if lstbox = lstTVShows then		      Scrape.FanartTVApi( TVAttr.TVDBID, "tvthumb" )		    elseif lstbox = lstAnime then		      Scrape.FanartTVApi( AnimeAttr.ID_TVDb, "tvthumb" )		    end if		    		  end select		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function FanartDropdownMenu() As MenuItem		  Dim miBase as new MenuItem		  Dim menuSeperator as new MenuItem		  Dim dwnloadFanart as new MenuItem, dwnloadPoster as new MenuItem, dwnloadBanner as new MenuItem		  Dim dwnloadClearArt as new MenuItem, dwnloadLogo as new MenuItem, dwnloadTVThumb as new MenuItem		  		  dwnloadFanart.text = "Get Fanart..."		  dwnloadPoster.text = "Get Poster..."		  dwnloadBanner.text = "Get Banner..."		  		  menuSeperator.Text = "-"		  		  dwnloadClearArt.text = "Get ClearArt..."		  dwnloadLogo.text     = "Get Logo..."		  dwnloadTVThumb.text  = "Get TV Thumb..."		  		  if ppMedia.Value = 0 then		    // Movies		    miBase.Append dwnloadPoster		    miBase.Append dwnloadFanart		    		  elseif ppMedia.Value = 1 then		    // TV Shows		    miBase.Append dwnloadPoster		    miBase.Append dwnloadFanart		    miBase.Append dwnloadBanner		    		    miBase.Append menuSeperator		    		    miBase.Append dwnloadClearArt		    miBase.Append dwnloadLogo		    miBase.Append dwnloadTVThumb		    		  elseif ppMedia.Value = 2 then		    // Anime		    miBase.Append dwnloadPoster		    miBase.Append dwnloadFanart		    if AnimeAttr.Type <> "Movie" then		      miBase.Append dwnloadBanner		      		      miBase.Append menuSeperator		      		      miBase.Append dwnloadClearArt		      miBase.Append dwnloadLogo		      miBase.Append dwnloadTVThumb		    end if		    		  end if		  miBase.text = "Extra Arts"		  return miBase		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub FetchMetadata()		  if ppMedia.Value = 0 and lstMovies.ListIndex <> -1 then		    		    Dim MovieName As String = MovieAttr.MovieNameFilter( lstMovies.CellTag( lstMovies.ListIndex, 0 ), True )		    if MovieName <> "" then		      Scrape.TMDBApiSearch( MovieName )		    else		      Scrape.TMDBApiSearch( lstMovies.Cell( lstMovies.ListIndex, 0 ) )		    end if		    		  ElseIf ppMedia.Value = 1 and lstTVShows.ListIndex <> -1 then		    Scrape.TVDBApiSearch( lstTVShows.Cell( lstTVShows.ListIndex, 0 ) )		    		  ElseIf ppMedia.Value = 2 and lstAnime.ListIndex <> -1 then		    Scrape.AniDBApiSearch( lstAnime.Cell( lstAnime.ListIndex, 0 ) )		  end if		  		  return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub PopulateAnimeList()		  // TVDBID  ||  Title  ||  Fanart  ||  Poster  ||  Banner  ||  Logo  ||  ClearArt  ||  TVThumb //		  #pragma disablebackgroundtasks		  #if NOT targetwin32 and NOT DebugBuild then		    #pragma disableboundsChecking		    #pragma nilObjectChecking false		    #pragma stackOverflowChecking false		    '#pragma disableautoWaitCursor		  #endif		  		  Dim f, nfofile as FolderItem		  Dim i, foldercount, paths, lindex as integer		  		  if lstAnime.ListIndex <> -1 then lindex = lstAnime.ListIndex		  lstAnime.DeleteAllRows		  Populating = True		  		  for paths = 0 to AnimePaths.Ubound		    		    f = GetFolderItem( NthField( AnimePaths( paths ), "|", 2) )		    		    if f <> nil and f.Exists then		      		      foldercount = f.Count		      		      if foldercount > 0 then		        		        for i = 1 to foldercount		          		          if f.Item(i).Visible and f.Item(i).Directory then		            		            lstAnime.AddRow		            lstAnime.Cell(lstAnime.LastIndex, 0) = f.Item(i).Name		            lstAnime.CellTag(lstAnime.LastIndex, 0) = f.item(i)		            		            lstAnime.RowPicture(lstAnime.LastIndex) = anime		            		            nfofile = MovieAttr.MovieNFOFilter( f.item(i) )		            if nfofile <> nil then		              AnimeAttr.ReadInformation( nfofile )		              		              // Anime Title ------------------		              if AnimeAttr.TitleSort <> "" then		                lstAnime.Cell( lstAnime.LastIndex, 0 ) = AnimeAttr.TitleSort		                if AnimeAttr.Type = "Movie" and AnimeAttr.Year <> "" then lstAnime.Cell( lstAnime.LastIndex, 0 ) = AnimeAttr.TitleSort + " (" + AnimeAttr.Year + ")"		              else		                lstAnime.Cell( lstAnime.LastIndex, 0 ) = AnimeAttr.Title		                if AnimeAttr.Type = "Movie" and AnimeAttr.Year <> ""  then lstAnime.Cell( lstAnime.LastIndex, 0 ) = AnimeAttr.Title + " (" + AnimeAttr.Year + ")"		              end if		              		              // Anime ID --------------------		              if AnimeAttr.ID_AniDB <> "" then		                lstAnime.Cell( lstAnime.LastIndex, 1 ) = AnimeAttr.ID_AniDB		              elseif AnimeAttr.ID_TVDb <> "" then		                lstAnime.Cell( lstAnime.LastIndex, 1 ) = AnimeAttr.ID_TVDb		              elseif AnimeAttr.ID_TMDb <> "" then		                lstAnime.Cell( lstAnime.LastIndex, 1 ) = AnimeAttr.ID_TMDb		              end if		              		              // Status Watched --------------		              if AnimeAttr.Watched = "True" then		                lstAnime.RowPicture( lstAnime.LastIndex ) = animehiatus		                lstAnime.Cell( lstAnime.LastIndex, 2 ) = "Watched"		              else		                'lstAnime.Cell( lstAnime.LastIndex, 2 ) = "Unwatched"		              end if		              		              // Status ----------------------		              Select case AnimeAttr.Status		              case "Continuing"		                lstAnime.RowPicture(lstAnime.LastIndex) = animecontinuing		              case "Ended"		                lstAnime.RowPicture(lstAnime.LastIndex) = animeended		              case "Hiatus"		                lstAnime.RowPicture(lstAnime.LastIndex) = animehiatus		              end Select		              lstAnime.Cell( lstAnime.LastIndex, 2 ) = AnimeAttr.Status		              		              if AnimeAttr.Type = "Movie" then lstAnime.RowPicture( lstAnime.LastIndex ) = animemovie		              if AnimeAttr.Type = "Movie" and AnimeAttr.Watched = "True" then lstAnime.RowPicture( lstAnime.LastIndex ) = animemoviewatched		              		              Dim d as new date		              Dim ddate() as String = AnimeAttr.DatePremiered.Split("-")		              		              if ddate.Ubound > -1 and val( ddate(0) ) > d.Year then		                lstAnime.RowPicture( lstAnime.LastIndex ) = animefuture		                lstAnime.Cell( lstAnime.LastIndex, 2 ) = "Future Show"		              elseif ddate.Ubound = 0 and val( ddate(0) ) >= d.Year then		                lstAnime.RowPicture( lstAnime.LastIndex ) = animefuture		                lstAnime.Cell( lstAnime.LastIndex, 2 ) = "Future Show"		              elseif ddate.Ubound > 0 and val( ddate(0) ) >= d.Year and val( ddate(1) ) > d.Month then		                lstAnime.RowPicture( lstAnime.LastIndex ) = animefuture		                lstAnime.Cell( lstAnime.LastIndex, 2 ) = "Future Show"		              elseif ddate.Ubound > 1 and val( ddate(0) ) >= d.Year and val( ddate(1) ) >= d.Month and val( ddate(2) ) > d.Day then		                lstAnime.RowPicture( lstAnime.LastIndex ) = animefuture		                lstAnime.Cell( lstAnime.LastIndex, 2 ) = "Future Show"		              end if		              		            Else		            end if		            		            		          end if // @END IS Directory AND visible		          		        next // @END Go through all folders		        		      end if // @END More then 0 items found		      		    else		      MsgBox "Error: Couldn't find TV show folder: " + chr(13) + NthField( AnimePaths( paths ), "|", 1) + chr(13) + chr(13) + "Please check to see if it exists or remove it from the list."		      PrefsLastItem = 2		      wndPrefs.Show		    end if // @END Folderitem exists		    		  next // @END Loop through TV Paths		  		  Populating = False		  		  lstAnime.SortedColumn = 0		  lstAnime.ColumnSortDirection(0) = 1		  lstAnime.Sort		  		  if Preferences.SortBy = "Status" then		    lstAnime.SortedColumn = 2		    lstAnime.ColumnSortDirection(0) = 1		    lstAnime.Sort		  end if		  		  if lindex > lstAnime.ListCount - 1 then		    lstAnime.ListIndex = lindex - 1		  else		    lstAnime.ListIndex = lindex		  end if		  		  ListToolbar(2).Segment(1).Caption = str( lstAnime.ListCount ) + " items"		  		  'Exception err as NilObjectException		  'MsgBox "Error: Could not find TV Shows folder, please check to see if it exists or remove it from the list."		  'PrefsLastItem = 2		  'wndPrefs.show		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub PopulateMoviesList()		  // TMDbID  ||  Title  ||  Fanart  ||  Poster //		  #pragma disablebackgroundtasks		  #if NOT targetwin32 and NOT DebugBuild then		    #pragma disableboundsChecking		    #pragma nilObjectChecking false		    #pragma stackOverflowChecking false		    '#pragma disableautoWaitCursor		  #endif		  		  Dim f as FolderItem		  Dim i, foldercount, paths, lindex as integer		  		  Dim nfoFile as FolderItem		  		  if lstMovies.ListIndex <> -1 then lindex = lstMovies.ListIndex		  lstMovies.DeleteAllRows		  Populating = True		  		  for paths = 0 to MoviePaths.Ubound		    		    f = GetFolderItem( NthField( MoviePaths( paths ), "|", 2) )		    		    if f <> nil and f.Exists then		      		      foldercount = f.Count		      		      if foldercount > 0 then		        		        for i = 1 to foldercount		          		          if f.Item(i).Visible and f.Item(i).Directory then		            		            lstMovies.AddRow		            		            lstMovies.Cell(lstMovies.LastIndex, 0) = f.Item(i).Name		            lstMovies.CellTag(lstMovies.LastIndex, 0) = f.item(i)		            		            lstMovies.RowPicture(lstMovies.LastIndex) = movieempty		            		            nfoFile = MovieAttr.MovieNFOFilter( f.Item(i) )		            MovieAttr.ReadInformation( nfoFile )		            if nfoFile <> nil then		              		              // Movie contain's valid NFO file with at least a movie title attribute.		              if MovieAttr.Title <> "" then lstMovies.RowPicture( lstMovies.LastIndex ) = moviefull		              		              // If sorttitle exists, use that, otherwise use plain title.		              if MovieAttr.SortTitle <> "" then		                lstMovies.Cell( lstMovies.LastIndex, 0 ) = MovieAttr.SortTitle		                if MovieAttr.Year <> "" then lstMovies.Cell( lstMovies.LastIndex, 0 ) = MovieAttr.SortTitle + " (" + MovieAttr.Year + ")"		              else		                lstMovies.Cell( lstMovies.LastIndex, 0 ) = MovieAttr.Title		                if MovieAttr.Year <> "" then lstMovies.Cell( lstMovies.LastIndex, 0 ) = MovieAttr.Title + " (" + MovieAttr.Year + ")"		              end if		              		              // Movie database ID's		              if MovieAttr.TMDbID <> "" then		                lstMovies.Cell( lstMovies.LastIndex, 1 ) = MovieAttr.TMDbID		              elseif MovieAttr.IMDBID <> "" then		                lstMovies.Cell( lstMovies.LastIndex, 1 ) = MovieAttr.IMDBID		              end if		              		              // Watched movie		              'if MovieAttr.Watched = "True" then lstMovies.Cell( lstMovies.LastIndex, 0 ) = lstMovies.Cell( lstMovies.LastIndex, 0 ) + " (Watched)"		              if MovieAttr.Watched = "True" then		                lstMovies.RowPicture( lstMovies.LastIndex ) = moviewatched		                lstMovies.Cell( lstMovies.LastIndex, 2 ) = "Watched"		              else		                lstMovies.Cell( lstMovies.LastIndex, 2 ) = "Unwatched"		              end if		              		              'if MovieAttr.videoinfoHeight <> -1 then		              '		              'if MovieAttr.videoinfoHeight < 720 then		              'lstMovies.Cell( lstMovies.LastIndex, 2 ) = "SD"		              'elseif MovieAttr.videoinfoHeight >= 720 then		              'lstMovies.Cell( lstMovies.LastIndex, 2 ) = "HD"		              'end if		              '		              'end if		              		            end if		            'next		            		            'lstMovies.RowPicture(lstMovies.LastIndex) = movieempty		            		          end if // @END IS Directory AND visible		          		        next // @END Go through all folders		        		      end if // @END More then 0 items found		    else		      MsgBox "Error: Couldn't find movie folder: " + chr(13) + NthField( MoviePaths( paths ), "|", 1) + chr(13) + chr(13) + "Please check to see if it exists or remove it from the list."		      PrefsLastItem = 1		      wndPrefs.Show		    end if // @END Folderitem exists		    		  next // @END Loop through TV Paths		  		  Populating = False		  		  if Preferences.SortBy = "Name" then		    lstMovies.SortedColumn = 0		  elseif Preferences.SortBy = "Status" then		    lstMovies.SortedColumn = 2		  end if		  lstMovies.ColumnSortDirection(0) = 1		  lstMovies.Sort		  		  if lindex > lstMovies.ListCount - 1 then		    lstMovies.ListIndex = lindex - 1		  else		    lstMovies.ListIndex = lindex		  end if		  		  ListToolbar(0).Segment(1).Caption = str( lstMovies.ListCount ) + " items"		  		  'Exception err as NilObjectException		  'MsgBox "Error: Could not find movie folder, please check to see if it exists or remove it from the list."		  'PrefsLastItem = 1		  'wndPrefs.show		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub PopulateTVShowsList()		  // TVDBID  ||  Title  ||  Fanart  ||  Poster  ||  Banner  ||  Logo  ||  ClearArt  ||  TVThumb //		  #pragma disablebackgroundtasks		  #if NOT targetwin32 and NOT DebugBuild then		    #pragma disableboundsChecking		    #pragma nilObjectChecking false		    #pragma stackOverflowChecking false		    '#pragma disableautoWaitCursor		  #endif		  		  Dim f, nfofile as FolderItem		  Dim i, foldercount, paths, lindex as integer		  		  if lstTVShows.ListIndex <> -1 then lindex = lstTVShows.ListIndex		  lstTVShows.DeleteAllRows		  Populating = True		  		  for paths = 0 to TVShowPaths.Ubound		    		    f = GetFolderItem( NthField( TVShowPaths( paths ), "|", 2) )		    		    if f <> nil and f.Exists then		      		      foldercount = f.Count		      		      if foldercount > 0 then		        		        for i = 1 to foldercount		          		          if f.Item(i).Visible and f.Item(i).Directory then		            		            lstTVShows.AddRow		            lstTVShows.Cell( lstTVShows.LastIndex, 0 ) = f.Item(i).name		            lstTVShows.CellTag( lstTVShows.LastIndex, 0 ) = f.item(i)		            		            lstTVShows.RowPicture( lstTVShows.LastIndex ) = show		            		            nfofile = f.item(i).child("tvshow.nfo")		            if nfofile <> nil and nfofile.Exists then		              TVAttr.ReadInformation( nfofile )		              		              // Col 1 - Sort Title or title ---------------		              if TVAttr.SortTitle <> "" then		                lstTVShows.Cell( lstTVShows.LastIndex, 0 ) = TVAttr.SortTitle		              else		                lstTVShows.Cell( lstTVShows.LastIndex, 0 ) = TVAttr.Title		              end if		              		              // Col 2 - TVDB ID		              lstTVShows.Cell( lstTVShows.LastIndex, 1 ) = TVAttr.TVDBID		              // Col 3 - TV Status		              lstTVShows.Cell( lstTVShows.LastIndex, 2 ) = TVAttr.Status		              		              // RowPicture - TV Status		              select case TVAttr.Status		              case "Continuing"		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = showcontinuing		              case "Ended"		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = showended		              case "Hiatus"		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = showhiatus		              case ""		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = show		              end select		              		              // RowPicture - Future TV Status		              Dim d as new date		              Dim ddate() as String = TVAttr.Premiered.Split("-")		              		              if ddate.Ubound > -1 and val( ddate(0) ) > d.Year then		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = showfuture		                lstTVShows.Cell( lstTVShows.LastIndex, 2 ) = "Future Show"		              elseif ddate.Ubound = 0 and val( ddate(0) ) >= d.Year then		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = showfuture		                lstTVShows.Cell( lstTVShows.LastIndex, 2 ) = "Future Show"		              elseif ddate.Ubound > 0 and val( ddate(0) ) >= d.Year and val( ddate(1) ) > d.Month then		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = showfuture		                lstTVShows.Cell( lstTVShows.LastIndex, 2 ) = "Future Show"		              elseif ddate.Ubound > 1 and val( ddate(0) ) >= d.Year and val( ddate(1) ) >= d.Month and val( ddate(2) ) > d.Day then		                lstTVShows.RowPicture( lstTVShows.LastIndex ) = showfuture		                lstTVShows.Cell( lstTVShows.LastIndex, 2 ) = "Future Show"		              end if		              		            end if		            		            		            		            		            		          end if // @END IS Directory AND visible		          		        next // @END Go through all folders		        		      end if // @END More then 0 items found		      		    else		      MsgBox "Error: Couldn't find TV show folder: " + chr(13) + NthField( TVShowPaths( paths ), "|", 1) + chr(13) + chr(13) + "Please check to see if it exists or remove it from the list."		      PrefsLastItem = 2		      wndPrefs.Show		    end if // @END Folderitem exists		    		  next // @END Loop through TV Paths		  		  Populating = False		  		  lstTVShows.SortedColumn = 0		  lstTVShows.ColumnSortDirection(0) = 1		  lstTVShows.Sort		  		  if Preferences.SortBy = "Status" then		    lstTVShows.SortedColumn = 2		    lstTVShows.ColumnSortDirection(0) = 1		    lstTVShows.Sort		  end if		  		  if lindex > lstTVShows.ListCount - 1 then		    lstTVShows.ListIndex = lindex - 1		  else		    lstTVShows.ListIndex = lindex		  end if		  		  ListToolbar(1).Segment(1).Caption = str( lstTVShows.ListCount ) + " items"		  		  'Exception err as NilObjectException		  'MsgBox "Error: Could not find TV Shows folder, please check to see if it exists or remove it from the list."		  'PrefsLastItem = 2		  'wndPrefs.show		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveFromList(lstBox as Listbox, ListItem As FolderItem)		  Dim Destination as FolderItem		  Dim d as new Date		  		  if lstBox.ListIndex > -1 and dlgWindow("Are you sure you want to remove " + lstBox.Cell( lstBox.ListIndex, 0 ) + "?", "The selected item will be moved to the trash." ) then		    Destination = ListItem.Parent.Child( ListItem.Name + " " + d.LongTime.ReplaceAll( ":", "." ) )		    ListItem.MoveFileTo( Destination )		    Destination.MoveFileTo( SpecialFolder.Trash )		    		    if lstBox = lstMovies  then PopulateMoviesList		    if lstBox = lstTVShows then PopulateTVShowsList		    if lstBox = lstAnime   then PopulateAnimeList		  else		    MsgBox "Make a selection first!"		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SwitchPanels(Panel As Integer)		  ppMedia.Value = Panel		  		  // Just in case		  ToolButton( MainToolBar.Item( 0 ) ).Pushed = False		  ToolButton( MainToolBar.Item( 1 ) ).Pushed = False		  ToolButton( MainToolBar.Item( 2 ) ).Pushed = False		  ToolButton( MainToolBar.Item( Panel ) ).Pushed = True		  'if NOT DebugBuild then ToolButton( MainToolBar.Item( 2 ) ).Style = ToolButton.ToolStyleSpace		  		  lstMovies.DeleteAllRows		  lstTVShows.DeleteAllRows		  lstAnime.DeleteAllRows		  		  MovieAttr.ClearProperties		  TVAttr.ClearProperties		  AnimeAttr.ClearProperties		  		  cvsMovies.Refresh(True)		  cvsTVShows.Refresh(True)		  cvsAnime.Refresh(True)		  		  if Panel = 0 then		    		    FileReloadAll.Text = "Reload Movies"		    FileBulkRenamer.text = "Bulk Movies Renamer"		    PopulateMoviesList		    		    FileUpdateStatus.Enabled = False		    FileUpdateStatus.AutoEnable = False		    		    FileFetchAllMetadata.Enabled = True		    FileFetchAllMetadata.AutoEnable = True		    		    ToolsSortFilesIntoFolders.Enabled = True		    ToolsSortFilesIntoFolders.AutoEnable = True		    		  elseif Panel = 1 then		    		    FileReloadAll.text = "Reload TV Shows"		    FileBulkRenamer.text = "Bulk TV Show Renamer"		    PopulateTVShowsList		    		    FileUpdateStatus.Enabled = True		    FileUpdateStatus.AutoEnable = True		    		    FileFetchAllMetadata.Enabled = True		    FileFetchAllMetadata.AutoEnable = True		    		    ToolsSortFilesIntoFolders.Enabled = False		    ToolsSortFilesIntoFolders.AutoEnable = False		    		  elseif Panel = 2 then		    		    FileReloadAll.text = "Reload Anime"		    FileBulkRenamer.text = "Bulk Anime Renamer"		    PopulateAnimeList		    		    FileUpdateStatus.Enabled = True		    FileUpdateStatus.AutoEnable = True		    		    FileFetchAllMetadata.Enabled = False		    FileFetchAllMetadata.AutoEnable = False		    		    ToolsSortFilesIntoFolders.Enabled = False		    ToolsSortFilesIntoFolders.AutoEnable = False		    		  end if		  		  ToolButton( MainToolBar.Item( 6 ) ).DropDownMenu = FanartDropdownMenu		  MainWindowMode = Panel		End Sub	#tag EndMethod	#tag Note, Name = Listbox Contextual Menu				Reload * F5 (Reload Library)		Mark * ctrl-M (Mark as watched?)		Lock * ctr-L (Lock from editing)		--------------------------		Edit Movie * Ctrl-E (Edit Movie Data)		Edit Metadata * Ctrl-D (Edit Movie Metadata/Codec info)		Genres >		    Add		    Set		    Remove		--------------------------		(Re)Scrape Movie * ctrl-I (Scrape Movie Data)		Change Movie * Ctrl-C (Re-search movie database window with 1 or more results in the list)		--------------------------		Open Containing Folder * Ctrl-O (Open Folder)		Remove >		    Remove from Database * Del		    Remove Movie * Ctrl-Del		--------------------------		Rename >		    Auto		    Manual	#tag EndNote	#tag Property, Flags = &h0		Populating As Boolean = False	#tag EndProperty#tag EndWindowCode#tag Events ListToolbar	#tag Event		Sub Open(index as Integer)		  me.Style = 2		  		  'me.AddSegment "", InterfaceKitSupport.buttonIcon(ifkButtonIconID.plus)		  'me.Segment(0).Width = 24		  'me.Segment(0).ToolTip = "Create A New View"		  		  me.AddSegment "", InterfaceKitSupport.buttonIcon(ifkButtonIconID.minus)		  me.Segment(0).Width = 24		  me.Segment(0).ToolTip = "Remove Selected Item"		  		  'me.AddSegment "", InterfaceKitSupport.buttonIcon(ifkButtonIconID.action)		  'me.Segment(1).Width = 24		  'me.Segment(1).ToolTip = "Edit Selected View"		  		  me.AddSegment "0 items"		  me.Segment(1).unClickable = true		  		  me.AddSegment ""		  me.Segment(2).icon = MiniToolbarInformation		  me.Segment(2).Width = 24		  me.Segment(2).ToolTip = "Show Metadata"		  		  me.AddSegment ""		  me.Segment(3).icon = MiniToolbarRefresh		  me.Segment(3).Width = 24		  me.Segment(3).ToolTip = "Refresh List"		End Sub	#tag EndEvent	#tag Event		Sub Action(index as Integer, item as SegmentViewPiece)		  if item = me.Segment(0) then		    		    Select case me.Index		    case 0		      RemoveFromList( lstMovies, MovieAttr.FolderParent )		    case 1		      RemoveFromList( lstTVShows, TVAttr.FolderParent )		    case 2		      RemoveFromList( lstAnime, AnimeAttr.FolderParent )		    end select		    		  elseif item = me.Segment(2) then		    		    Select case me.Index		    case 0		      wndMovieMetadata.Show		    case 1		      wndShowMetadata.Show		    case 2		      wndAnimeMetadata.Show		    end select		    		  elseif item = me.Segment(3) then		    		    Select case me.Index		    case 0		      PopulateMoviesList		    case 1		      PopulateTVShowsList		    case 2		      PopulateAnimeList		    end select		    		  end if		End Sub	#tag EndEvent#tag EndEvents#tag Events cvsMovies	#tag Event		Sub Open()		  me.Height = self.Height		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  Dim pic as picture		  Dim MovieGenres As String		  		  if ppMedia.Value <> 0 then return		  		  g.ForeColor = &cFFFFFF		  g.FillRect 0, 0, me.Width, me.Height		  		  // Fanart ------------------------------------------------------		  if MovieAttr.ART_Fanart = nil then MovieAttr.ART_Fanart = IMGmovies		  		  if MovieAttr.ART_Fanart <> nil then		    pic = ScalePic( MovieAttr.ART_Fanart, me.Width, me.Height, True, False, True )		    pic.Graphics.DrawPicture( IMGFanartOverlay,  0, 0, pic.Width, pic.Height,    0, 0, IMGFanartOverlay.Width, IMGFanartOverlay.Height )		    g.DrawPicture pic, 0, 0		  end if		  		  // Poster ------------------------------------------------------		  if MovieAttr.ART_Poster <> nil then		    // width: 147, height: 222		    pic = New Picture( 255, 255, 32)		    pic.Graphics.DrawPicture( MovieAttr.ART_Poster, 53, 23, 140, 140 * 1.5,      0, 0, MovieAttr.ART_Poster.Width, MovieAttr.ART_Poster.Height )		    pic.Graphics.DrawPicture( DVDCase, 0, 0, 256, 256)		    pic.Mask = DVDCaseMask		    		    g.DrawPicture pic, -33, 2		    		    pic = nil		  end if		  		  // Studio ------------------------------------------------------		  if MovieAttr.ART_Studio <> nil then g.DrawPicture MovieAttr.ART_Studio, me.Width - MovieAttr.ART_Studio.Width - 20, 0		  		  // if MovieAttr.ART_MPAARating <> nil then g.DrawPicture MovieAttr.ART_MPAARating, 20, me.Height - MovieAttr.ART_MPAARating.Height - 20		  		  if MovieAttr.ART_MPAARating <> nil then		    g.ForeColor = rgb(220, 220, 220)		    g.FillRect 20, _		    me.Height - MovieAttr.ART_MPAARating.Height - 20 - 10, _		    MovieAttr.ART_MPAARating.Width + 10, _		    MovieAttr.ART_MPAARating.Height + 10		    		    		    g.ForeColor = rgb(0, 0, 0)		    g.DrawRect 20, _		    me.Height - MovieAttr.ART_MPAARating.Height - 20 - 10, _		    MovieAttr.ART_MPAARating.Width + 10, _		    MovieAttr.ART_MPAARating.Height + 10		    		    g.DrawPicture MovieAttr.ART_MPAARating, 25, me.Height - MovieAttr.ART_MPAARating.Height - 25		    		    // g.DrawPicture MovieAttr.ART_MPAARating, 20, me.Height - MovieAttr.ART_MPAARating.Height - 20		  end if		  		  // Star Rating -------------------------------------------------		  Dim i, starLeftStart as Integer		  Dim starFullLength as Double		  starLeftStart = 190		  		  if MovieAttr.Rating > 0 then		    		    for i = 1 to 10		      g.DrawPicture starempty, starLeftStart, 80		      starLeftStart = starLeftStart + 40		    next		    		    starLeftStart = 190		    starFullLength = MovieAttr.Rating		    		    for i = 1 to MovieAttr.Rating + 1.0		      		      starFullLength = starFullLength - 1		      		      g.DrawPicture starfull, starLeftStart, 80, starfull.Width * starFullLength + starfull.Width, starfull.Height		      		      starLeftStart = starLeftStart + 40		    next		    		  end if		  		  // Texts and labels -------------------------------------------------------		  g.ForeColor = &c000000		  		  // Text Rating -------------------------------------------------		  if MovieAttr.Rating > 0 then		    g.Bold = True		    g.TextSize = 21		    if str(MovieAttr.Rating).Len = 1 then		      g.DrawString( str(MovieAttr.Rating) + ".0", 595, 85 + g.TextSize )		    else		      g.DrawString( str(MovieAttr.Rating), 595, 85 + g.TextSize )		    end if		  end if		  		  // Movie Title -------------------------------------------------		  if MovieAttr.Title <> "" then		    		    if MovieAttr.Title.Len >= 56 then		      g.TextSize = 14		    elseif MovieAttr.Title.len >= 36 then		      g.TextSize = 18		    else		      g.TextSize = 28		    end if		    		    g.Bold = True		    g.DrawString( MovieAttr.Title, 189, 14 + g.TextSize, me.Width - 300 - 84, True )		  end if		  		  // Movie Tagline -----------------------------------------------		  if MovieAttr.Tagline <> "" then		    g.Bold = False		    g.Italic = True		    g.TextSize = 12		    g.DrawString( MovieAttr.Tagline, 189, 49 + g.TextSize, me.Width - 189 - 161 - 20, False )		  end if		  		  g.Italic = False		  g.TextSize = 12		  		  // Runtime -----------------------------------------------------		  if MovieAttr.videoinfoDurationInMinutes <> "" then		    g.Bold = True		    if MovieAttr.Rating > 0 then		      g.DrawString( "Duration:", 189, 122 + g.TextSize )		    else		      g.DrawString( "Duration:", 189, 82 + g.TextSize )		    end if		    		    g.Bold = False		    		    Dim MovieRunTime As String		    		    MovieRunTime = MovieAttr.videoinfoDurationInMinutes		    		    if MovieRunTime.Right(5) = " mins" then		      MovieRunTime = MovieRunTime.Left( MovieRunTime.Len - 5 )		    elseif MovieRunTime.Right(4) = " min" then		      MovieRunTime = MovieRunTime.Left( MovieRunTime.Len - 4 )		    end if		    		    Dim hours as Integer = floor( val(MovieRunTime) / 60 )		    Dim minutes as Integer		    		    if val( MovieRunTime ) > 60 and val( MovieRunTime ) < 120 then		      minutes = val(MovieRunTime) - ( hours * 60 )		      MovieRunTime = str(hours) + " hour and " + str(minutes) + " minutes"		    elseif val( MovieRunTime ) > 120 then		      minutes = val(MovieRunTime) - ( hours * 60 )		      MovieRunTime = str(hours) + " hours and " + str(minutes) + " minutes"		    else		      MovieRunTime = MovieRunTime + " minutes"		    end if		    		    if MovieAttr.Rating > 0 then		      g.DrawString MovieRunTime, 289, 122 + g.TextSize		    else		      g.DrawString MovieRunTime, 289, 82 + g.TextSize		    end if		  end if		  		  // Premiered ---------------------------------------------------		  if MovieAttr.Premiered <> "" then		    g.Bold = True		    if MovieAttr.Rating > 0 then		      g.DrawString( "Released:", 189, 142 + g.TextSize )		    else		      g.DrawString( "Released:", 189, 102 + g.TextSize )		    end if		    		    g.Bold = False		    		    dim ddate() as string = split( MovieAttr.Premiered, "-" )		    Dim DateString as String		    if ddate.Ubound = 2 then		      DateString = ddate(2) + " " + Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 1 then		      DateString = Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 0 then		      DateString = ddate(0)		    end if		    		    if MovieAttr.Rating > 0 then		      g.DrawString( DateString, 289, 142 + g.TextSize )		    else		      g.DrawString( DateString, 289, 102 + g.TextSize )		    end if		  end if		  		  // Genre Text --------------------------------------------------		  if MovieAttr.Genre.Ubound > -1 and MovieAttr.Genre.Ubound < 1 then		    g.Bold = True		    if MovieAttr.Rating > 0 then		      g.DrawString( "Genre:", 189, 162 + g.TextSize )		    else		      g.DrawString( "Genre:", 189, 122 + g.TextSize )		    end if		    		    g.Bold = False		    if MovieAttr.Rating > 0 then		      g.DrawString( MovieAttr.Genre(0), 289, 162 + g.TextSize )		    else		      g.DrawString( MovieAttr.Genre(0), 289, 122 + g.TextSize )		    end if		  elseif MovieAttr.Genre.Ubound > -1 then		    g.Bold = True		    if MovieAttr.Rating > 0 then		      g.DrawString( "Genres:", 189, 162 + g.TextSize )		    else		      g.DrawString( "Genres:", 189, 122 + g.TextSize )		    end if		    		    g.Bold = False		    		    for i = 0 to MovieAttr.Genre.Ubound		      if i = MovieAttr.Genre.Ubound then		        MovieGenres = MovieGenres + MovieAttr.Genre(i)		      else		        MovieGenres = MovieGenres + MovieAttr.Genre(i) + ", "		      end if		    next		    		    if MovieAttr.Rating > 0 then		      g.DrawString( MovieGenres, 289, 162 + g.TextSize )		    else		      g.DrawString( MovieGenres, 289, 122 + g.TextSize )		    end if		  end if		  		  // Movie Plot --------------------------------------------------		  if MovieAttr.Plot <> "" then		    g.Bold = True		    if MovieAttr.Rating > 0 then		      g.DrawString( "Summary:", 189, 192 + g.TextSize )		    else		      g.DrawString( "Summary:", 189, 152 + g.TextSize )		    end if		    		    g.Bold = False		    if MovieAttr.Rating > 0 then		      g.DrawString( MovieAttr.Plot, 189, 195 + (2 * g.TextSize), me.Width - 209 )		    else		      g.DrawString( MovieAttr.Plot, 189, 155 + (2 * g.TextSize), me.Width - 209 )		    end if		  end if		  		  		  // Debugging		  'g.ForeColor = &cFF0000		  'g.DrawRect 0, 0, me.Width, me.Height		  'g.DrawString( str(me.width), 5, 5 + g.TextSize )		End Sub	#tag EndEvent#tag EndEvents#tag Events cvsTVShows	#tag Event		Sub Open()		  me.Height = self.Height		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  #pragma disablebackgroundtasks		  #if not targetwin32 then		    #pragma disableboundsChecking		    #pragma nilObjectChecking false		    #pragma stackOverflowChecking false		    #pragma disableautoWaitCursor		  #endif		  		  Dim starFullLength as double		  Dim pic as picture		  Dim i, Hours, Minutes as Integer		  Dim Genres As string		  		  // Star Rating		  Dim starLeftStart as Integer = 190		  Dim StarTop as Integer = 20		  		  if ppMedia.Value <> 1 then return		  		  g.ForeColor = &cFFFFFF		  g.FillRect 0, 0, me.Width, me.Height		  		  // Fanart ------------------------------------------------------		  if TVAttr.ART_Fanart = nil then TVAttr.ART_Fanart = IMGtvshows		  		  if TVAttr.ART_Fanart <> nil then		    pic = ScalePic( TVAttr.ART_Fanart, me.Width, me.Height, True, False, True )		    pic.Graphics.DrawPicture( IMGFanartOverlay,  0, 0, pic.Width, pic.Height,    0, 0, IMGFanartOverlay.Width, IMGFanartOverlay.Height )		    		    g.DrawPicture pic, 0, 0		  end if		  		  // Poster ------------------------------------------------------		  if TVAttr.ART_Poster <> nil then		    // width: 147, height: 222		    pic = New Picture( 255, 255, 32)		    pic.Graphics.DrawPicture( TVAttr.ART_Poster, 53, 23, 140, 140 * 1.5,      0, 0, TVAttr.ART_Poster.Width, TVAttr.ART_Poster.Height )		    pic.Graphics.DrawPicture( DVDCase, 0, 0, 256, 256)		    pic.Mask = DVDCaseMask		    		    g.DrawPicture pic, -33, 2		  end if		  		  // Banner ------------------------------------------------------		  if TVAttr.ART_Banner <> nil and me.Width > 890 then		    pic = New Picture( 519, 101, 32 )		    pic.Graphics.DrawPicture( TVAttr.ART_Banner, 2, 1, 515, 95,   0, 0, TVAttr.ART_Banner.Width, TVAttr.ART_Banner.Height )		    		    pic.Graphics.DrawPicture( BannerOverlay, 0, 0, pic.Width + 1, pic.Height + 1 )		    pic.Mask = BannerMask		    		    g.DrawPicture pic, 20, me.Height - pic.Height - 20		  end if		  		  // ClearArt ----------------------------------------------------		  if TVAttr.ART_ClearArt <> nil then		    pic = ScalePic( TVAttr.ART_ClearArt, TVAttr.ART_ClearArt.Width * 0.68, TVAttr.ART_ClearArt.Height * 0.68 )		    g.DrawPicture pic, me.Width - pic.Width, me.Height - pic.Height		  end if		  		  // Logo --------------------------------------------------------		  if TVAttr.ART_Logo <> nil then		    pic = ScalePic( TVAttr.ART_Logo, TVAttr.ART_Logo.Width * 0.86, TVAttr.ART_Logo.Height * 0.86 )		    if TVAttr.ART_ClearArt <> nil then		      g.DrawPicture pic, me.Width - pic.Width - 20, me.Height - (TVAttr.ART_ClearArt.Height * 0.68) - pic.Height - 20		    else		      g.DrawPicture pic, me.Width - pic.Width - 20, me.Height - pic.Height - 20		    end if		  end if		  		  // TV Thumb ----------------------------------------------------		  if TVAttr.ART_TVThumb <> nil then		    pic = New Picture( 154, 90, 32 )		    pic.Graphics.DrawPicture( TVAttr.ART_TVThumb, 2, 1, 150, 84,   0, 0, TVAttr.ART_TVThumb.Width, TVAttr.ART_TVThumb.Height )		    pic.Graphics.DrawPicture( ThumbOverlay, 0, 0, pic.Width, pic.Height )		    pic.Mask = ThumbMask		    		    if TVAttr.ART_Poster <> nil then		      g.DrawPicture pic, 19, 260		    else		      g.DrawPicture pic, 19, 20		    end if		  end if		  		  // Studio ------------------------------------------------------		  if TVAttr.ART_Studio <> nil then g.DrawPicture TVAttr.ART_Studio, me.Width - TVAttr.ART_Studio.Width - 20, 0		  		  // MPAA Rating -------------------------------------------------		  if TVAttr.ART_MPAARating <> nil then		    if TVAttr.ART_Banner <> nil then		      g.DrawPicture TVAttr.ART_MPAARating, 20, me.Height - TVAttr.ART_Banner.Height - TVAttr.ART_MPAARating.Height		    else		      g.DrawPicture TVAttr.ART_MPAARating, 20, me.Height - 20 - TVAttr.ART_MPAARating.Height		    end if		  end if		  		  // Star Rating -------------------------------------------------		  if TVAttr.Rating > 0 then		    StarTop = 50		    for i = 1 to 10		      g.DrawPicture starempty, starLeftStart, StarTop		      starLeftStart = starLeftStart + 40		    next		    		    starLeftStart = 190		    starFullLength = TVAttr.Rating		    		    for i = 1 to TVAttr.Rating + 1.0		      starFullLength = starFullLength - 1		      g.DrawPicture starfull, starLeftStart, StarTop, starfull.Width * starFullLength + starfull.Width, starfull.Height		      starLeftStart = starLeftStart + 40		    next		  end if		  		  // Texts and labels --------------------------------------------		  g.ForeColor = &c000000		  		  // Text Rating -------------------------------------------------		  if TVAttr.Rating > 0 then		    g.Bold = True		    g.TextSize = 21		    if str(TVAttr.Rating).Len = 1 then		      g.DrawString( str(TVAttr.Rating) + ".0", 595, StarTop + g.TextSize / 4 + g.TextSize )		    else		      g.DrawString( str(TVAttr.Rating), 595, StarTop + g.TextSize / 4 + g.TextSize )		    end if		  end if		  		  // TV Show Title -----------------------------------------------		  if TVAttr.Title <> "" then		    		    if TVAttr.Title.Len >= 56 then		      g.TextSize = 14		    elseif TVAttr.Title.len >= 36 then		      g.TextSize = 18		    else		      g.TextSize = 28		    end if		    		    g.Bold = True		    g.DrawString( TVAttr.Title, 189, 14 + g.TextSize, me.Width - 300 - 84, True )		  end if		  		  g.TextSize = 12		  		  // TV Show Premiered -------------------------------------------		  if TVAttr.Premiered <> "" then		    g.Bold = True		    g.DrawString( "Premiered:", 189, StarTop + 36 + g.TextSize )		    		    g.Bold = False		    		    dim ddate() as string = split( TVAttr.Premiered, "-" )		    Dim DateString as String		    if ddate.Ubound = 2 then		      DateString = ddate(2) + " " + Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 1 then		      DateString = Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 0 then		      DateString = ddate(0)		    end if		    g.DrawString( DateString, 289, StarTop + 36 + g.TextSize )		  end if		  		  // TV Show Status ----------------------------------------------		  if TVAttr.Status <> "" then		    g.Bold = True		    g.DrawString( "Status:", 189, StarTop + 56 + g.TextSize )		    		    g.Bold = False		    g.DrawString( TVAttr.Status, 289, StarTop + 56 + g.TextSize )		  end if		  		  // TV Show Runtime ---------------------------------------------		  if TVAttr.RuntimeInMinutes > 0 then		    g.Bold = True		    g.DrawString( "Runtime:", 389, StarTop + 36 + g.TextSize )		    		    g.Bold = False		    		    if TVAttr.RuntimeInMinutes < 61 then		      g.DrawString( str(TVAttr.RuntimeInMinutes) + " Min", 489, StarTop + 36 + g.TextSize )		    else		      Hours = floor( TVAttr.RuntimeInMinutes / 60 )		      Minutes = TVAttr.RuntimeInMinutes - (60 * Hours)		      if hours < 2 and Minutes > 0 then		        g.DrawString( str(hours) + " Hour and " + str(Minutes) + " Minutes", 489, StarTop + 36 + g.TextSize )		      elseif Hours < 2 then		        g.DrawString( str(hours) + " Hour", 489, StarTop + 36 + g.TextSize )		      elseif Minutes > 0 then		        g.DrawString( str(hours) + " Hours and " + str(Minutes) + " Minutes", 489, StarTop + 36 + g.TextSize )		      else		        g.DrawString( str(hours) + " Hours", 489, StarTop + 36 + g.TextSize )		      end if		    end if		    		  end if		  		  // TV Show Genres ----------------------------------------------		  if TVAttr.Genre.Ubound > -1 then		    g.Bold = True		    if TVAttr.Genre.Ubound = 0 then		      g.DrawString( "Genre:", 389, StarTop + 56 + g.TextSize )		    else		      g.DrawString( "Genres:", 389, StarTop + 56 + g.TextSize )		    end if		    		    g.Bold = False		    for i = 0 to TVAttr.Genre.Ubound		      if i = TVAttr.Genre.Ubound then		        genres = genres + TVAttr.Genre(i)		      else		        genres = genres + TVAttr.Genre(i) + ", "		      end if		    next		    g.DrawString( genres, 489, StarTop + 56 + g.TextSize, me.Width - 489 - 200, True )		  end if		  		  // TV Show Plot ------------------------------------------------		  if TVAttr.Plot <> "" then		    g.Bold = True		    g.DrawString( "Summary:", 189, StarTop + 96 )		    		    g.Bold = False		    g.DrawString( TVAttr.Plot, 189, StarTop + 96 + 16, me.Width - 198 - 20 )		  end if		End Sub	#tag EndEvent#tag EndEvents#tag Events btnTVTest	#tag Event		Sub Open()		  me.Visible = DebugBuild		End Sub	#tag EndEvent	#tag Event		Sub Action()		  SetAllIcons( lstTVShows )		End Sub	#tag EndEvent#tag EndEvents#tag Events btnTestMovies	#tag Event		Sub Open()		  me.Visible = DebugBuild		End Sub	#tag EndEvent#tag EndEvents#tag Events cvsAnime	#tag Event		Sub Open()		  me.Height = self.Height		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  Dim starFullLength as double		  Dim pic as picture		  Dim i, Hours, Minutes as Integer		  Dim Genres, DurationStr As string		  		  // Star Rating		  Dim starLeftStart as Integer = 190		  Dim StarTop as Integer = 20		  		  if ppMedia.Value <> 2 then return		  		  g.ForeColor = &cFFFFFF		  g.FillRect 0, 0, me.Width, me.Height		  		  // Fanart ------------------------------------------------------		  if AnimeAttr.ART_Fanart = nil then AnimeAttr.ART_Fanart = IMGtvshows		  		  if AnimeAttr.ART_Fanart <> nil then		    pic = ScalePic( AnimeAttr.ART_Fanart, me.Width, me.Height, True, False, True )		    pic.Graphics.DrawPicture( IMGFanartOverlay,  0, 0, pic.Width, pic.Height,    0, 0, IMGFanartOverlay.Width, IMGFanartOverlay.Height )		    		    g.DrawPicture pic, 0, 0		  end if		  		  // Poster ------------------------------------------------------		  if AnimeAttr.ART_Poster <> nil then		    // width: 147, height: 222		    pic = New Picture( 255, 255, 32)		    pic.Graphics.DrawPicture( AnimeAttr.ART_Poster, 53, 23, 140, 140 * 1.5,      0, 0, AnimeAttr.ART_Poster.Width, AnimeAttr.ART_Poster.Height )		    pic.Graphics.DrawPicture( DVDCase, 0, 0, 256, 256)		    pic.Mask = DVDCaseMask		    		    g.DrawPicture pic, -33, 2		  end if		  		  // Banner ------------------------------------------------------		  if AnimeAttr.ART_Banner <> nil and me.Width > 890 then		    pic = New Picture( 519, 101, 32 )		    pic.Graphics.DrawPicture( AnimeAttr.ART_Banner, 2, 1, 515, 95,   0, 0, AnimeAttr.ART_Banner.Width, AnimeAttr.ART_Banner.Height )		    		    pic.Graphics.DrawPicture( BannerOverlay, 0, 0, pic.Width + 1, pic.Height + 1 )		    pic.Mask = BannerMask		    		    g.DrawPicture pic, 20, me.Height - pic.Height - 20		  end if		  		  // ClearArt ----------------------------------------------------		  if AnimeAttr.ART_ClearArt <> nil then		    pic = ScalePic( AnimeAttr.ART_ClearArt, AnimeAttr.ART_ClearArt.Width * 0.68, AnimeAttr.ART_ClearArt.Height * 0.68 )		    g.DrawPicture pic, me.Width - pic.Width, me.Height - pic.Height		  end if		  		  // Logo --------------------------------------------------------		  if AnimeAttr.ART_Logo <> nil then		    pic = ScalePic( AnimeAttr.ART_Logo, AnimeAttr.ART_Logo.Width * 0.86, AnimeAttr.ART_Logo.Height * 0.86 )		    if AnimeAttr.ART_ClearArt <> nil then		      g.DrawPicture pic, me.Width - pic.Width - 20, me.Height - (AnimeAttr.ART_ClearArt.Height * 0.68) - pic.Height - 20		    else		      g.DrawPicture pic, me.Width - pic.Width - 20, me.Height - pic.Height - 20		    end if		  end if		  		  // TV Thumb ----------------------------------------------------		  if AnimeAttr.ART_TVThumb <> nil then		    pic = New Picture( 154, 90, 32 )		    pic.Graphics.DrawPicture( AnimeAttr.ART_TVThumb, 2, 1, 150, 84,   0, 0, AnimeAttr.ART_TVThumb.Width, AnimeAttr.ART_TVThumb.Height )		    pic.Graphics.DrawPicture( ThumbOverlay, 0, 0, pic.Width, pic.Height )		    pic.Mask = ThumbMask		    		    if AnimeAttr.ART_Poster <> nil then		      g.DrawPicture pic, 19, 260		    else		      g.DrawPicture pic, 19, 20		    end if		  end if		  		  // Studio ------------------------------------------------------		  if AnimeAttr.ART_Studio <> nil then g.DrawPicture AnimeAttr.ART_Studio, me.Width - AnimeAttr.ART_Studio.Width - 20, 0		  		  // MPAA Rating -------------------------------------------------		  if AnimeAttr.ART_MPAARating <> nil and AnimeAttr.Type <> "Movie" then		    if AnimeAttr.ART_Banner <> nil then		      g.DrawPicture AnimeAttr.ART_MPAARating, 20, me.Height - AnimeAttr.ART_Banner.Height - AnimeAttr.ART_MPAARating.Height		    else		      g.DrawPicture AnimeAttr.ART_MPAARating, 20, me.Height - 20 - AnimeAttr.ART_MPAARating.Height		    end if		  elseif AnimeAttr.ART_MPAARating <> nil and AnimeAttr.Type = "Movie" then		    		    g.ForeColor = rgb(220, 220, 220)		    g.FillRect 20, _		    me.Height - AnimeAttr.ART_MPAARating.Height - 20 - 10, _		    AnimeAttr.ART_MPAARating.Width + 10, _		    AnimeAttr.ART_MPAARating.Height + 10		    		    		    g.ForeColor = rgb(0, 0, 0)		    g.DrawRect 20, _		    me.Height - AnimeAttr.ART_MPAARating.Height - 20 - 10, _		    AnimeAttr.ART_MPAARating.Width + 10, _		    AnimeAttr.ART_MPAARating.Height + 10		    		    g.DrawPicture AnimeAttr.ART_MPAARating, 25, me.Height - AnimeAttr.ART_MPAARating.Height - 25		    		  end if		  		  // Star Rating -------------------------------------------------		  if AnimeAttr.Rating > 0 then		    StarTop = 50		    for i = 1 to 10		      g.DrawPicture starempty, starLeftStart, StarTop		      starLeftStart = starLeftStart + 40		    next		    		    starLeftStart = 190		    starFullLength = AnimeAttr.Rating		    		    for i = 1 to AnimeAttr.Rating + 1.0		      starFullLength = starFullLength - 1		      g.DrawPicture starfull, starLeftStart, StarTop, starfull.Width * starFullLength + starfull.Width, starfull.Height		      starLeftStart = starLeftStart + 40		    next		  end if		  		  // Texts and labels --------------------------------------------		  g.ForeColor = &c000000		  		  // Text Rating -------------------------------------------------		  if AnimeAttr.Rating > 0 then		    g.Bold = True		    g.TextSize = 21		    if str(AnimeAttr.Rating).Len = 1 then		      g.DrawString( str(AnimeAttr.Rating) + ".0", 595, StarTop + g.TextSize / 4 + g.TextSize )		    else		      g.DrawString( str(AnimeAttr.Rating), 595, StarTop + g.TextSize / 4 + g.TextSize )		    end if		  end if		  		  // TV Show Title -----------------------------------------------		  if AnimeAttr.Title <> "" then		    		    if AnimeAttr.Title.Len >= 56 then		      g.TextSize = 14		    elseif AnimeAttr.Title.len >= 36 then		      g.TextSize = 18		    else		      g.TextSize = 28		    end if		    		    g.Bold = True		    g.DrawString( AnimeAttr.Title, 189, 14 + g.TextSize, me.Width - 300 - 84, True )		  end if		  		  g.TextSize = 12		  		  // TV Show Premiered -------------------------------------------		  if AnimeAttr.DatePremiered <> "" and AnimeAttr.Type <> "Movie" then		    g.Bold = True		    g.DrawString( "Premiered:", 189, StarTop + 36 + g.TextSize )		    		    g.Bold = False		    		    dim ddate() as string = split( AnimeAttr.DatePremiered, "-" )		    Dim DateString as String		    if ddate.Ubound = 2 then		      DateString = ddate(2) + " " + Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 1 then		      DateString = Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 0 then		      DateString = ddate(0)		    end if		    g.DrawString( DateString, 289, StarTop + 36 + g.TextSize )		    		  elseif AnimeAttr.DatePremiered <> "" and AnimeAttr.Type = "Movie" then		    g.Bold = True		    g.DrawString( "Released:", 189, StarTop + 56 + g.TextSize )		    		    g.Bold = False		    		    dim ddate() as string = split( AnimeAttr.DatePremiered, "-" )		    Dim DateString as String		    if ddate.Ubound = 2 then		      DateString = ddate(2) + " " + Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 1 then		      DateString = Int2Month(val(ddate(1))) + ", " + ddate(0)		    elseif ddate.Ubound = 0 then		      DateString = ddate(0)		    end if		    g.DrawString( DateString, 289, StarTop +56 + g.TextSize )		    		  end if		  		  // TV Show Status ----------------------------------------------		  if AnimeAttr.Status <> "" and AnimeAttr.Type <> "Movie" then		    g.Bold = True		    g.DrawString( "Status:", 189, StarTop + 56 + g.TextSize )		    		    g.Bold = False		    g.DrawString( AnimeAttr.Status, 289, StarTop + 56 + g.TextSize )		  end if		  		  // TV Show Runtime ---------------------------------------------		  if AnimeAttr.RuntimeInMinutes > 0 and AnimeAttr.Type <> "Movie" then		    g.Bold = True		    g.DrawString( "Runtime:", 389, StarTop + 36 + g.TextSize )		    		    g.Bold = False		    		    if AnimeAttr.RuntimeInMinutes < 61 then		      g.DrawString( str(AnimeAttr.RuntimeInMinutes) + " Min", 489, StarTop + 36 + g.TextSize )		    else		      Hours = floor( AnimeAttr.RuntimeInMinutes / 60 )		      Minutes = AnimeAttr.RuntimeInMinutes - (60 * Hours)		      if hours < 2 then		        DurationStr = str(Hours) + " hour and " + str(Minutes) + " Minutes"		      else		        DurationStr = str(hours) + " hours and " + str(Minutes) + " Minutes"		      end if		      g.DrawString( DurationStr, 489, StarTop + 36 + g.TextSize )		    end if		    		  elseif AnimeAttr.RuntimeInMinutes > 0 and AnimeAttr.Type = "Movie" then		    g.Bold = True		    g.DrawString( "Duration:", 189, StarTop + 36 + g.TextSize )		    		    g.Bold = False		    		    if AnimeAttr.RuntimeInMinutes < 61 then		      g.DrawString( str(AnimeAttr.RuntimeInMinutes) + " Min", 489, StarTop + 36 + g.TextSize )		    else		      Hours = floor( AnimeAttr.RuntimeInMinutes / 60 )		      Minutes = AnimeAttr.RuntimeInMinutes - (60 * Hours)		      if hours < 2 then		        DurationStr = str(hours) + " hour and " + str(Minutes) + " Minutes"		      else		        DurationStr = str(hours) + " hours and " + str(Minutes) + " Minutes"		      end if		      g.DrawString( str(hours) + " hours and " + str(Minutes) + " Minutes", 289, StarTop + 36 + g.TextSize )		    end if		    		  end if		  		  // TV Show Genres ----------------------------------------------		  if AnimeAttr.Genre.Ubound > -1 and AnimeAttr.Type <> "Movie" then		    Dim Genrer as String		    if AnimeAttr.Genre.Ubound = 0 then Genrer = "Genre:" else Genrer = "Genres:"		    		    for i = 0 to AnimeAttr.Genre.Ubound		      if i = AnimeAttr.Genre.Ubound then		        genres = genres + AnimeAttr.Genre(i)		      else		        genres = genres + AnimeAttr.Genre(i) + ", "		      end if		    next		    		    g.Bold = True		    if AnimeAttr.RuntimeInMinutes <= 0 then		      g.DrawString( Genrer, 389, StarTop + 36 + g.TextSize )		      g.Bold = False		      g.DrawString( genres, 489, StarTop + 36 + g.TextSize, me.Width - 489 - 200, True )		    else		      g.DrawString( Genrer, 389, StarTop + 56 + g.TextSize )		      g.Bold = False		      g.DrawString( genres, 489, StarTop + 56 + g.TextSize, me.Width - 489 - 200, True )		    end if		    		    // Movie Genres -------------------------------------------------		  elseif AnimeAttr.Genre.Ubound > -1 and AnimeAttr.Type = "Movie" then		    Dim Genrer as String		    if AnimeAttr.Genre.Ubound = 0 then Genrer = "Genre:" else Genrer = "Genres:"		    		    for i = 0 to AnimeAttr.Genre.Ubound		      if i = AnimeAttr.Genre.Ubound then		        genres = genres + AnimeAttr.Genre(i)		      else		        genres = genres + AnimeAttr.Genre(i) + ", "		      end if		    next		    		    g.Bold = True		    g.DrawString( Genrer, 189, StarTop + 76 + g.TextSize )		    g.Bold = False		    g.DrawString( genres, 289, StarTop + 76 + g.TextSize, me.Width - 289 - 200, True )		    		  end if		  		  // TV Show Plot ------------------------------------------------		  if AnimeAttr.Plot <> "" then		    g.Bold = True		    if AnimeAttr.Type <> "Movie" then		      g.DrawString( "Summary:", 189, StarTop + 96 )		      g.Bold = False		      g.DrawString( AnimeAttr.Plot, 189, StarTop + 96 + 16, me.Width - 198 - 20 )		    else		      g.DrawString( "Summary:", 189, StarTop + 116 )		      g.Bold = False		      g.DrawString( AnimeAttr.Plot, 189, StarTop + 116 + 16, me.Width - 198 - 20 )		    end if		    		  end if		End Sub	#tag EndEvent#tag EndEvents#tag Events lstTVShows	#tag Event		Sub Change()		  // TVDBID  ||  Title  ||  Fanart  ||  Poster  ||  Banner  ||  Logo  ||  ClearArt  ||  TVThumb //		  		  'TVAttr.ClearProperties		  if me.ListIndex <> -1 then TVAttr.FolderParent = me.CellTag( me.ListIndex, 0 )		  TVAttr.ReadInformation		  cvsTVShows.Refresh(False)		End Sub	#tag EndEvent	#tag Event		Sub Open()		  // Title  ||  TVDBID  ||  Fanart  ||  Poster  ||  Banner  ||  Logo  ||  ClearArt  ||  TVThumb //		  		  me.top = -1		  me.left = -1		  me.height = self.Height + 3 - 25		  'me.Width = 251		End Sub	#tag EndEvent	#tag Event		Function ContextualMenuAction(hitItem as MenuItem) As Boolean		  CommonMenuActions(me, hitItem.Text)		  		  select case hitItem.Text		    		  case "Edit Metadata"		    wndShowMetadata.Show		    		  case "Set Icon"		    if SetDVDIcon( TVAttr.ART_Poster, TVAttr.FolderParent ) = 0 then		      MsgBox "Folder icon has been set" + chr(13) + chr(13) + "You may need to refresh the finder by logging out and back in for the icon to show up."		    end if		    		  end Select		End Function	#tag EndEvent	#tag Event		Sub DoubleClick()		  		  if me.cell( me.ListIndex, 1 ) <> "" then		    wndShowMetadata.Show		  else		    Scrape.TVDBApiSearch( me.Cell( me.ListIndex, 0 ) )		  end if		End Sub	#tag EndEvent	#tag Event		Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean		  Dim miSeparator as new MenuItem		  		  Dim miReload as new MenuItem		  Dim miEditInformation as new MenuItem		  Dim miScrape as new MenuItem		  Dim miManualSearch as new MenuItem		  Dim miOpenContainingFolder as new MenuItem		  Dim miRemove as new MenuItem		  Dim miSetIcon as new MenuItem		  		  miSeparator.Text = "-"		  		  miReload.Text = "Reload"		  miEditInformation.text = "Edit Metadata"		  miScrape.Text = "Fetch Metadata"		  miManualSearch.text = "Manual Search..."		  miRemove.Text = "Remove Item..."		  miSetIcon.Text = "Set Icon"		  		  #if TargetMacOS then		    miOpenContainingFolder.Text = "Open in Finder"		  #else		    miOpenContainingFolder.Text = "Open in Explorer"		  #endif		  		  base.Append miReload                                      // | Reload		  if me.ListIndex <> -1 then		    base.Append miSeparator                                 // | -------		    base.Append miScrape                                    // | Fetch Metadata		    base.Append miManualSearch                              // | Manual Search...		    base.Append miEditInformation                           // | Edit Metadata		    base.Append miSeparator                                 // | -------		    base.Append FanartDropdownMenu                          // | Extra Art (>)		    base.Append miSeparator                                 // | -------		    // #if TargetMacOS then base.Append miSetIcon                // | Set Icon		    base.Append miOpenContainingFolder                      // | Open Containing Folder		    base.Append miRemove                                    // | Remove Item...		  end if		  		  return true		End Function	#tag EndEvent#tag EndEvents#tag Events splitTVShows	#tag Event		Sub Open()		  me.AddControl cvsTVShows, me.kControlStretchLeft		  me.AddControl lstTVShows, me.kControlStretchRight		  me.AddControl ListToolbar(1), me.kControlStretchRight		  if DebugBuild then me.AddControl btnTVTest, me.kControlMove		  me.Maximum = self.Width - 50		End Sub	#tag EndEvent#tag EndEvents#tag Events lstMovies	#tag Event		Sub Change()		  // Title  ||  TMDbID  ||  Fanart  ||  Poster //		  		  if me.ListIndex <> -1 then MovieAttr.FolderParent = me.CellTag( me.ListIndex, 0 )		  MovieAttr.ReadInformation		  cvsMovies.Refresh(False)		End Sub	#tag EndEvent	#tag Event		Sub Open()		  // MovieDBID  ||  Title  ||  Fanart  ||  Poster //		  		  me.top = -1		  me.left = -1		  me.height = self.Height + 3 - 25		End Sub	#tag EndEvent	#tag Event		Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean		  Dim miSeparator as new MenuItem		  		  Dim miReload as new MenuItem		  Dim miMarkAsWatched as new MenuItem		  Dim miEditInformation as new MenuItem		  Dim miScrape as new MenuItem		  Dim miManualSearch as new MenuItem		  Dim miOpenContainingFolder as new MenuItem		  Dim miRemove as new MenuItem		  Dim miSetIcon as new MenuItem		  		  miSeparator.Text = "-"		  		  miReload.Text = "Reload"		  		  if MovieAttr.Watched = "True" then miMarkAsWatched.Text = "Mark as Unwatched" else miMarkAsWatched.text = "Mark As Watched"		  		  miEditInformation.text = "Edit Metadata"		  miScrape.Text = "Fetch Metadata"		  miRemove.Text = "Remove item..."		  miSetIcon.Text = "Set Icon"		  		  if me.Cell( me.ListIndex, 1 ) <> "" then		    miMarkAsWatched.Enabled = True		    miEditInformation.Enabled = True		  else		    miMarkAsWatched.Enabled = False		    miEditInformation.Enabled = False		  end if		  		  miManualSearch.Text = "Manual Search..."		  		  #if TargetMacOS then		    miOpenContainingFolder.Text = "Open in Finder"		  #else		    miOpenContainingFolder.Text = "Open in Explorer"		  #endif		  		  base.Append miReload                                      // | Reload		  if me.ListIndex <> -1 then		    base.Append miSeparator                                 // | -------		    base.Append miMarkAsWatched                             // | Mark As Watched		    base.Append miScrape                                    // | Fetch Metadata		    base.Append miManualSearch                              // | Manual Search...		    base.Append miEditInformation                           // | Edit Information		    base.Append miSeparator                                 // | -------		    base.Append FanartDropdownMenu                          // | Extra Art (>)		    base.Append miSeparator                                 // | -------		    // #if TargetMacOS then base.Append miSetIcon                // | Set Icon		    base.Append miOpenContainingFolder                      // | Open Containing Folder		    base.Append miRemove                                    // | Remove item...		  end if		  		  return true		End Function	#tag EndEvent	#tag Event		Function ContextualMenuAction(hitItem as MenuItem) As Boolean		  CommonMenuActions(me, hitItem.Text)		  		  select case hitItem.Text		    		  case "Edit Metadata"		    wndMovieMetadata.Show		    		  case "Set Icon"		    if SetDVDIcon( MovieAttr.ART_Poster, MovieAttr.FolderParent ) = 0 then		      MsgBox "Folder icon has been set" + chr(13) + chr(13) + "You may need to refresh the finder by logging out and back in for the icon to show up."		    end if		    		  case "Manual Search..."		    wndSearchMovie.ShowWithin(self)		    wndSearchMovie.lstFoundMovies.DeleteAllRows		    Dim MovieName As String = MovieAttr.MovieNameFilter( lstMovies.CellTag( lstMovies.ListIndex, 0 ), True )		    if MovieName <> "" then		      wndSearchMovie.edtSearchField.Text = MovieName		    else		      wndSearchMovie.edtSearchField.Text = me.Cell( me.ListIndex, 0 )		    end if		    wndSearchMovie.edtSearchField.SelectAll		    		  case "Mark as Unwatched"		    MovieAttr.Watched = ""		    MovieAttr.WriteInformation( MovieAttr.MovieNFOFilter( lstMovies.CellTag( lstMovies.ListIndex, 0 ) ) )		    PopulateMoviesList		    		  case "Mark as Watched"		    MovieAttr.Watched = "True"		    MovieAttr.WriteInformation( MovieAttr.MovieNFOFilter( lstMovies.CellTag( lstMovies.ListIndex, 0 ) ) )		    PopulateMoviesList		    		  end select		  		End Function	#tag EndEvent	#tag Event		Sub DoubleClick()		  if me.cell( me.ListIndex, 1 ) <> "" then		    wndMovieMetadata.Show		  else		    Dim MovieName as String = MovieAttr.MovieNameFilter( me.CellTag( me.ListIndex, 0 ), True )		    if MovieName <> "" then Scrape.TMDBApiSearch( MovieName ) else Scrape.TMDBApiSearch( me.Cell( me.ListIndex, 0 ) )		  end if		End Sub	#tag EndEvent#tag EndEvents#tag Events splitMovies	#tag Event		Sub Open()		  me.AddControl cvsMovies, me.kControlStretchLeft		  me.AddControl ListToolbar(0), me.kControlStretchRight		  me.AddControl lstMovies, me.kControlStretchRight		  me.Maximum = self.Width - 50		End Sub	#tag EndEvent#tag EndEvents#tag Events lstAnime	#tag Event		Sub Open()		  // Title  ||  TVDBID  ||  Fanart  ||  Poster  ||  Banner  ||  Logo  ||  ClearArt  ||  TVThumb //		  		  me.top = -1		  me.left = -1		  me.height = self.Height + 3 - 25		  'me.Width = 251		End Sub	#tag EndEvent	#tag Event		Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean		  Dim miSeparator as new MenuItem		  		  Dim miReload as new MenuItem		  Dim miMarkAsWatched as new MenuItem		  Dim miEditInformation as new MenuItem		  Dim miScrape as new MenuItem		  Dim miManualSearch as new MenuItem		  Dim miOpenContainingFolder as new MenuItem		  Dim miRemove as new MenuItem		  Dim miSetIcon as new MenuItem		  		  miSeparator.Text = "-"		  		  miReload.Text = "Reload"		  if AnimeAttr.Watched = "True" then miMarkAsWatched.Text = "Mark as Unwatched" else miMarkAsWatched.Text = "Mark as Watched"		  miEditInformation.text = "Edit Metadata"		  miScrape.Text = "Fetch Metadata"		  miManualSearch.text = "Manual Search..."		  miRemove.Text = "Remove item..."		  miSetIcon.Text = "Set Icon"		  		  #if TargetMacOS then		    miOpenContainingFolder.Text = "Open in Finder"		  #else		    miOpenContainingFolder.Text = "Open in Explorer"		  #endif		  		  base.Append miReload                                      // | Reload		  if me.ListIndex <> -1 then		    base.Append miSeparator                                 // | -------		    if AnimeAttr.Type = "Movie" then base.Append miMarkAsWatched' Mark as Watched		    base.Append miScrape                                    // | Fetch Metadata		    base.Append miManualSearch                              // | Manual Search...		    base.Append miEditInformation                           // | Edit Metadata		    base.Append miSeparator                                 // | -------		    base.Append FanartDropdownMenu                          // | Extra Art (>)		    base.Append miSeparator                                 // | -------		    // #if TargetMacOS then base.Append miSetIcon                // | Set Icon		    base.Append miOpenContainingFolder                      // | Open Containing Folder		    base.Append miRemove                                    // | Remove item...		  end if		  		  return true		End Function	#tag EndEvent	#tag Event		Function ContextualMenuAction(hitItem as MenuItem) As Boolean		  CommonMenuActions(me, hitItem.Text)		  		  select case hitItem.Text		    		  case "Edit Metadata"		    wndAnimeMetadata.Show		    		  case "Set Icon"		    if SetDVDIcon( AnimeAttr.ART_Poster, AnimeAttr.FolderParent ) = 0 then		      MsgBox "Folder icon has been set" + chr(13) + chr(13) + "You may need to refresh the finder by logging out and back in for the icon to show up."		    end if		    		  case "Mark as Unwatched"		    AnimeAttr.Watched = ""		    AnimeAttr.WriteInformation( AnimeAttr.AnimeNFOFilter( lstAnime.CellTag( lstAnime.ListIndex, 0 ) ) )		    PopulateAnimeList		    		  case "Mark as Watched"		    AnimeAttr.Watched = "True"		    AnimeAttr.WriteInformation( AnimeAttr.AnimeNFOFilter( lstAnime.CellTag( lstAnime.ListIndex, 0 ) ) )		    PopulateAnimeList		    		  end Select		End Function	#tag EndEvent	#tag Event		Sub DoubleClick()		  		  if me.cell( me.ListIndex, 1 ) <> "" then		    if AnimeAttr.Type = "Movie" then		      wndAnimeMovieMetadata.Show		    elseif AnimeAttr.Type <> "" then		      wndAnimeMetadata.Show		    end if		    		  else		    Scrape.AniDBApiSearch( me.Cell( me.ListIndex, 0 ) )		  end if		End Sub	#tag EndEvent	#tag Event		Sub Change()		  if me.ListIndex <> -1 then AnimeAttr.FolderParent = me.CellTag( me.ListIndex, 0 )		  		  AnimeAttr.ReadInformation		  cvsAnime.Refresh(False)		End Sub	#tag EndEvent#tag EndEvents#tag Events splitAnime	#tag Event		Sub Open()		  me.AddControl cvsAnime, me.kControlStretchLeft		  me.AddControl lstAnime, me.kControlStretchRight		  me.AddControl ListToolbar(2), me.kControlStretchRight		  me.Maximum = self.Width - 50		End Sub	#tag EndEvent#tag EndEvents#tag Events btnTestAnime	#tag Event		Sub Action()		  'Scrape.AniDBApi "24", True		  Scrape.AniDBApiSearch lstAnime.Cell( lstAnime.ListIndex, 0 )		End Sub	#tag EndEvent	#tag Event		Sub Open()		  me.Visible = DebugBuild		End Sub	#tag EndEvent#tag EndEvents#tag Events MainToolBar	#tag Event		Sub Action(item As ToolItem)		  select case item.Caption		    		  case "Movies"		    SwitchPanels(0)		    		  case "TV Shows"		    SwitchPanels(1)		    		  case "Anime"		    SwitchPanels(2)		    		  case "Fetch Metadata"		    FetchMetadata		    		  case "Metadata"		    if ppMedia.Value = 0 and lstMovies.ListIndex <> -1 then		      wndMovieMetadata.Show		    elseif ppMedia.Value = 1 and lstTVShows.ListIndex <> -1 then		      wndShowMetadata.Show		    ElseIf ppMedia.Value = 2 and lstAnime.ListIndex <> -1 then		      if AnimeAttr.Type <> "Movie" then		        wndAnimeMetadata.Show		      elseif AnimeAttr.Type = "Movie" then		        wndAnimeMovieMetadata.Show		      end if		      		    else		      MsgBox "Make a selection first"		    end if		    		  case "Manual Search"		    if ppMedia.Value = 0 then		      wndSearchMovie.Show		      wndSearchMovie.lstFoundMovies.DeleteAllRows		      Dim MovieTitle as String = MovieAttr.MovieNameFilter( MovieAttr.FolderParent, True )		      if MovieTitle <> "" then wndSearchMovie.edtSearchField.Text = MovieTitle else wndSearchMovie.edtSearchField.Text = lstMovies.Cell( lstMovies.ListIndex, 0 )		      wndSearchMovie.edtSearchField.SelectAll		    elseif ppMedia.Value = 1 then		      wndSearchShow.Show		      wndSearchShow.lstFoundShows.DeleteAllRows		      wndSearchShow.edtSearchField.text = lstTVShows.Cell( lstTVShows.ListIndex, 0 )		      wndSearchShow.edtSearchField.SelectAll		    elseif ppMedia.Value = 2 then		      wndSearchAnime.Show		      wndSearchAnime.lstAnime.DeleteAllRows		      wndSearchAnime.edtSearch.text = lstAnime.Cell( lstAnime.ListIndex, 0 )		      wndSearchAnime.edtSearch.SelectAll		    end if		    		  case "Extra Arts"		    MsgBox "test"		    		  case "Reload"		    if ppMedia.Value = 0 then		      PopulateMoviesList		    elseif ppMedia.Value = 1 then		      PopulateTVShowsList		    elseif ppMedia.Value = 2 then		      PopulateAnimeList		    end if		    		  case "Donate"		    ShowURL app.DonationURL		    		  end select		End Sub	#tag EndEvent	#tag Event		Sub DropDownMenuAction(item As ToolItem, hitItem As MenuItem)		  		  if ppMedia.Value = 0 then		    		    select case hitItem.Text		      		    case "Get Fanart..."		      if lstMovies.Cell( lstMovies.ListIndex, 1 ) <> "" then		        if MovieAttr.TMDbID <> "" then Scrape.TMDBApiArt( MovieAttr.TMDbID, "Fanart" ) else Scrape.TMDBApiArt( MovieAttr.IMDBID, "Fanart" )		      end if		      		    case "Get Poster..."		      if lstMovies.Cell( lstMovies.ListIndex, 1 ) <> "" then		        if MovieAttr.TMDbID <> "" then Scrape.TMDBApiArt( MovieAttr.TMDbID, "Poster" ) else Scrape.TMDBApiArt( MovieAttr.IMDBID, "Poster" )		      end if		      		    end select		    		  elseif ppMedia.Value = 1 then		    		    select case hitItem.Text		      		    case "Get Fanart..."		      Scrape.TVDBApiArt( TVAttr.TVDBID, "fanart" )		    case "Get Poster..."		      Scrape.TVDBApiArt( TVAttr.TVDBID, "poster" )		    case "Get Banner..."		      Scrape.TVDBApiArt( TVAttr.TVDBID, "series" )		      		    case "Get ClearArt..."		      Scrape.FanartTVApi( TVAttr.TVDBID, "clearart" )		    case "Get Logo..."		      Scrape.FanartTVApi( TVAttr.TVDBID, "clearlogo" )		    case "Get TV Thumb..."		      Scrape.FanartTVApi( TVAttr.TVDBID, "tvthumb" )		      		    end select		    		  elseif ppMedia.Value = 2 then		    		    select case hitItem.Text		      		    case "Get Fanart..."		      if AnimeAttr.Type = "Movie" and lstAnime.Cell( lstAnime.ListIndex, 1 ) <> "" then		        if AnimeAttr.ID_TMDb <> "" then Scrape.TMDBApiArt( AnimeAttr.ID_TMDb, "Fanart" ) else Scrape.TMDBApiArt( AnimeAttr.ID_IMDB, "Fanart" )		      elseif lstAnime.Cell( lstAnime.ListIndex, 1 ) <> "" then		        Scrape.TVDBApiArt( AnimeAttr.ID_TVDb, "fanart" )		      end if		      		    case "Get Poster..."		      if AnimeAttr.Type = "Movie" and lstAnime.Cell( lstAnime.ListIndex, 1 ) <> "" then		        if AnimeAttr.ID_TMDb <> "" then Scrape.TMDBApiArt( AnimeAttr.ID_TMDb, "Poster" ) else Scrape.TMDBApiArt( AnimeAttr.ID_IMDB, "Poster" )		      elseif lstAnime.Cell( lstAnime.ListIndex, 1 ) <> "" then		        Scrape.TVDBApiArt( AnimeAttr.ID_TVDb, "poster" )		      end if		      		    case "Get Banner..."		      Scrape.TVDBApiArt( AnimeAttr.ID_TVDb, "series" )		      		    case "Get ClearArt..."		      Scrape.FanartTVApi( AnimeAttr.ID_TVDb, "clearart" )		    case "Get Logo..."		      Scrape.FanartTVApi( AnimeAttr.ID_TVDb, "clearlogo" )		    case "Get TV Thumb..."		      Scrape.FanartTVApi( AnimeAttr.ID_TVDb, "tvthumb" )		      		    end select		    		    		  end if		End Sub	#tag EndEvent#tag EndEvents#tag Events HTMLDecoder	#tag Event		Sub DocumentComplete(URL as String)		  #if TargetWin32 then		    Scrape.AniDBApi DefineEncoding( wndMain.HTMLDecoder.IEHTMLTextMBS, Encodings.UTF8 )		  #elseif TargetMacOS then		    Scrape.AniDBApi DefineEncoding( wndMain.HTMLDecoder.mainFrameMBS.dataSource.data, Encodings.UTF8 )		  #else		    Scrape.TVDBApi( TVAttr.TVDBID )		  #endif		End Sub	#tag EndEvent#tag EndEvents