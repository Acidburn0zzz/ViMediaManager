#tag ModuleProtected Module PaintBucket	#tag Method, Flags = &h0		Sub DrawGradient(Extends g as Graphics, StartColor as Color, EndColor as Color, Left as Integer, Top as Integer, Width as Integer, Height as Integer)		  Dim Ratio, EndRatio as Double		  'Dim StartColor as Color = &c3E3E3E		  'Dim EndColor   as Color = &c6E6E6E		  		  // DrawGradient		  For i as Integer = 0 to Height		    Ratio = ( Height - i ) / Height		    EndRatio = i / Height		    		    g.ForeColor = RGB( _		    EndColor.Red   * EndRatio + StartColor.Red   * Ratio, _		    EndColor.Green * EndRatio + StartColor.Green * Ratio, _		    EndColor.Blue  * EndRatio + StartColor.Blue  * Ratio )		    		    g.DrawLine _		    Left, _		    Top + i, _		    Left + Width - 1, _		    Top + i		  Next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function FlipImageHorizontal(P as Picture) As Picture		  Dim pic as picture		  Dim x, y, x2 as Integer		  Dim picS, maskS, picS2, maskS2 as RGBSurface		  		  pic    = New Picture( p.width, p.height, p.depth)		  picS   = p.rgbSurface		  maskS  = p.mask.rgbSurface		  picS2  = pic.rgbSurface		  maskS2 = pic.mask.rgbSurface		  		  For x = p.width-1 downTo 0		    For y = p.height-1 downTo 0		      picS2.Pixel(x,y) =  picS.Pixel(x2,y)		      maskS2.Pixel(x,y) = maskS.Pixel(x2,y)		    next		    x2=x2+1		  next		  		  Return pic		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FlipImageVertical(P as Picture) As Picture		  Dim pic as picture		  Dim x, y, y2 as Integer		  Dim picS, maskS, picS2, maskS2 as RGBSurface		  		  pic    = New Picture( p.width, p.height, p.depth )		  picS   = p.rgbSurface		  maskS  = p.mask.rgbSurface		  picS2  = pic.rgbSurface		  maskS2 = pic.mask.rgbSurface		  		  For y = p.height-1 downTo 0		    For x = p.width-1 downTo 0		      picS2.Pixel(x,y) =  picS.Pixel(x,y2)		      maskS2.Pixel(x,y) = maskS.Pixel(x,y2)		    next		    y2=y2+1		  next		  		  Return pic		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function RotateImage90Deg(p as Picture) As Picture		  Dim pic as Picture		  Dim x, y, y2, w, h as Integer		  Dim picS, maskS, picS2, maskS2 as RGBSurface		  		  pic = New Picture( p.width, p.height, p.depth )		  		  picS = p.RGBSurface		  maskS = p.Mask.RGBSurface		  picS2 = pic.RGBSurface		  maskS2 = pic.Mask.RGBSurface		  		  w = p.Width - 1		  h = p.Height - 1		  		  For x = 0 To w		    For y = 0 to h		      picS2.Pixel( y, x )  = picS.Pixel(  w - x, y )		      maskS2.Pixel( y, x ) = maskS.Pixel( w - x, y )		    next		  next		  		  Return pic		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ScaleImage(pic as Picture, Width As Integer, Height As Integer, UpScale As Boolean = False, ScaleWidth As Boolean = True, ScaleHeight As Boolean = True) As Picture		  Dim ScaledPic as Picture		  Dim Factor as Double		  If pic = Nil then Return Nil		  		  If NOT ScaleHeight AND ScaleWidth then		    Factor = Min( Width / pic.Width, pic.Height ) // Only scale width wise		  ElseIf NOT ScaleWidth AND ScaleHeight then		    Factor = Min( pic.Width, Height / pic.Height ) // Only scale height wise		  ElseIf ScaleWidth and ScaleHeight then		    Factor = Min( Width / pic.Width, Height / pic.Height ) // Scale both		  End if		  		  If NOT UpScale then Factor = Min( Factor, 1.0 )		  		  ScaledPic = New Picture( pic.Width * Factor, pic.Height * Factor, 32 )		  ScaledPic.Graphics.DrawPicture      pic,      0, 0, ScaledPic.Width, ScaledPic.Height,   0, 0, pic.Width, pic.Height		  ScaledPic.Mask.Graphics.DrawPicture pic.Mask, 0, 0, ScaledPic.Width, ScaledPic.Height,   0, 0, pic.Width, pic.Height		  		  Return ScaledPic		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule