#tag ModuleProtected Module ViMMCore	#tag Method, Flags = &h0		Function Articulator(ItemName as String, ItemYear as String = "") As String		  Dim b as Boolean = ItemYear <> ""		  		  // Filter out year		  If ItemName.Right(7) = " (" + ItemYear + ")" Then		    ItemName = ItemName.Left( ItemName.Len - 7 )		  ElseIf ItemName.Right(5) = " " + ItemYear Then		    ItemName = ItemName.Left( ItemName.Len - 5 )		  End If		  		  // English		  If ItemName.Left(4) = "The " Then ItemName = ItemName.Right( ItemName.Len - 4 ) + ", The "		  If ItemName.Left(2) = "A "   Then ItemName = ItemName.Right( ItemName.Len - 2 ) + ", A "		  If ItemName.Left(3) = "An "  Then ItemName = ItemName.Right( ItemName.Len - 3 ) + ", An "		  		  // Nederlands		  If ItemName.Left(4) = "Het " Then ItemName = ItemName.Right( ItemName.Len - 4 ) + ", Het "		  If ItemName.Left(3) = "De "  Then ItemName = ItemName.Right( ItemName.Len - 3 ) + ", De "		  If ItemName.Left(4) = "Een " Then ItemName = ItemName.Right( ItemName.Len - 4 ) + ", Een "		  		  If b Then		    Return Trim( ItemName + " (" + ItemYear + ")" )		  Else		    Return Trim( ItemName )		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub BatchRenamer(LstBox as Listbox)		  // Dim FoldersOrFiles as String = Loc.kFolders.Lowercase		  // If Prefs.integerForKey("BatchRename") = 1 Then FoldersOrFiles = Loc.kFoldersandFiles.Lowercase		  // // Check to see weather the user will go trough with this.		  // If MsgDlg( wndMain, 1, Loc.msgMassRename.ReplaceAll( "%F", FoldersOrFiles ), Loc.kCantBeUndone, Loc.dlgRename, Loc.dlgCancel ) = 2 Then Return		  		  		  For i as Integer = 0 to LstBox.ListCount - 1		    		    Dim Location as FolderItem = GetFolderItem( LstBox.Cell( i, 1 ) )		    Dim Destination as FolderItem = Location.Parent		    		    // The location doesn't exist, so go to the next item.		    If Location = Nil or NOT Location.Exists Then Continue		    dlgProgress.Add( Menu.ToolsBatchRenaming + ":", Location.Name )		    		    Dim NFOFile as FolderItem = FindNFOFile( Location )		    Dim MovieFile as FolderItem = FindMovieItem( Location )		    		    Dim PosterFile, FanartFile, TrailerFile, BannerFile, LogoFile, ClearArtFile, CharacterFile, LandscapeFile as FolderItem		    		    // There is no NFO file available to get data from.		    If NFOFile = Nil or NOT NFOFile.Exists Then Continue		    		    Dim NewName, Title, TitleSort, TitleOriginal, Year, Resolution, Studio, MPAA, Rating as String		    Dim DottedFileName as Boolean		    		    Select Case LstBox.Name		      		    Case "lstMovies"		      		      MovieAttr.NFORead( Location )		      NewName = Prefs.textStringForKey("RenameStringMovies")		      		      If MovieAttr.Title <> "" Then Title = MovieAttr.Title Else Title = MovieFile.Parent.Name		      If MovieAttr.TitleSort <> "" Then TitleSort = MovieAttr.TitleSort Else TitleSort = Articulator( Title )		      If MovieAttr.TitleOriginal <> "" Then TitleOriginal = MovieAttr.TitleOriginal Else TitleOriginal = Title		      If MovieAttr.DateYear > -1 Then Year = str( MovieAttr.DateYear ) Else Year = ""		      If LstBox.Cell( i, 6 ) <> "" Then Resolution = LstBox.Cell( i, 6 ) Else Resolution = ""		      If MovieAttr.Studios.Ubound > -1 Then Studio = MovieAttr.Studios(0) Else Studio = ""		      If MovieAttr.RatingMPAA <> "" Then MPAA = MovieAttr.RatingMPAA Else MPAA = ""		      If MovieAttr.Rating > 0 Then Rating = Str( MovieAttr.Rating )		      DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		      		      PosterFile = FindImagePoster( Location )		      FanartFile = FindImageFanart( Location )		      TrailerFile = FindTrailerItem( Location )		      		    Case "lstTVShows"		      		      'TVAttr.NFORead( Location )		      NewName = Prefs.textStringForKey("RenameStringTVShows")		      		      // TODO: Add TV Attributes		      DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		      		      PosterFile = FindImagePoster( Location )		      FanartFile = FindImageFanart( Location )		      BannerFile = FindImageBanner( Location )		      LogoFile   = Location.Child( "Logo.png" )		      ClearArtFile = Location.Child( "ClearArt.png" )		      CharacterFile = Location.Child( "Character.png" )		      LandscapeFile = Location.Child( "landscape.jpg" )		      		    Case "lstAnime"		      		      'AnimeAttr.NFORead( Location )		      NewName = Prefs.textStringForKey("RenameStringAnime")		      		      // TODO: Add Anime Attributes		      DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		      		      PosterFile = FindImagePoster( Location )		      FanartFile = FindImageFanart( Location )		      BannerFile = FindImageBanner( Location )		      LogoFile   = Location.Child( "Logo.png" )		      ClearArtFile = Location.Child( "ClearArt.png" )		      CharacterFile = Location.Child( "Character.png" )		      LandscapeFile = Location.Child( "landscape.jpg" )		      		    End Select		    		    // Set name based on attributes.		    NewName = NewName.ReplaceAll( "$T", Title.ReplaceAll("$", "≈" ) )		    NewName = NewName.ReplaceAll( "$S", TitleSort.ReplaceAll("$", "≈" ) )		    NewName = NewName.ReplaceAll( "$O", TitleOriginal.ReplaceAll( "$", "≈" ) )		    		    NewName = NewName.ReplaceAll( "$Y", Year )		    NewName = NewName.ReplaceAll( "$R", Resolution )		    NewName = NewName.ReplaceAll( "$C", Studio )		    NewName = NewName.ReplaceAll( "$M", MPAA )		    NewName = NewName.ReplaceAll( "$#", Rating )		    		    // Check proper signage.		    NewName = Trim( NewName.ReplaceAll( ",.", "."  ) )		    NewName = Trim( NewName.ReplaceAll( ":" , "- " ) )		    NewName = Trim( NewName.ReplaceAll( "()", ""   ) )		    NewName = Trim( NewName.ReplaceAll( "[]", ""   ) )		    NewName = Trim( NewName.ReplaceAll( "{}", ""   ) )		    NewName = Trim( NewName.ReplaceAll( "||", ""   ) )		    If NewName.Left(1) = "." Then NewName = "•" + NewName.Right( NewName.Len - 1 )		    		    NewName = Trim( NewName.ReplaceAll( "≈", "$" ) )		    		    While NewName.InStr( 0, "  " ) > 0		      NewName = NewName.ReplaceAll( "  ", " " )		    Wend		    		    // Not supported on Windows		    #If NOT TargetMacOS Then		      NewName = NewName.ReplaceAll( "\", " - " )		      NewName = NewName.ReplaceAll( "/", " - " )		      NewName = NewName.ReplaceAll( "*", "x"   )		      NewName = NewName.ReplaceAll( "?", ""    )		      NewName = NewName.ReplaceAll( """", "'"  )		      NewName = NewName.ReplaceAll( "<", "{"   )		      NewName = NewName.ReplaceAll( ">", "}"   )		      NewName = NewName.ReplaceAll( "|", " "   )		      		      // Unsupported on 'ext4'. (Linux Filesystem Format)		      NewName = NewName.ReplaceAll( "½", " 1/2" )		      NewName = NewName.ReplaceAll( "½", " 1/3" )		      NewName = NewName.ReplaceAll( "½", " 2/3" )		      NewName = NewName.ReplaceAll( "½", " 1/4" )		      		      // Dunno.		      NewName = NewName.ReplaceAll( "²", "^2" )		    #EndIf		    		    NewName = Trim( NewName )		    If DottedFileName Then NewName = NewName.ReplaceAll( " ", "." )		    If NewName.Right(1) = "." Then NewName = NewName.Left( NewName.Len - 1 )		    		    // Start the actual renaming process.		    If NewName <> "" And _		      Location <> Nil and Location.Exists And _		      Destination <> Nil and Destination.Exists Then		      		      If Prefs.integerForKey("BatchRename") = 1 Then		        		        Select Case LstBox.Name		          		        Case "lstMovies"		          		          // Rename Movie extras		          If MovieFile <> Nil and MovieFile.Exists And MovieFile.Name <> "VIDEO_TS" Then		            		            Dim MovieFiles() as FolderItem = FindMovieItems( Location )		            Dim Subtitles() as FolderItem = FindSubtitles( Location )		            Dim Part, PartOne as String		            		            For n as Integer = 0 to MovieFiles.Ubound		              If MovieFiles(n).Name <> "VIDEO_TS" Then		                Dim fName as String = MovieFiles(n).NameWithoutExtension		                		                // Multi-Part Movies		                // .section.		                If fName.inStr(0, ".cd") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,".cd" ) + 1 )		                  		                ElseIf fName.InStr(0, ".part") > 0 Then		                  Part = fName.Right( fName.Len - fName.InStr( 0, ".part" ) + 1 )		                  		                ElseIf fName.InStr(0, ".disc") > 0 Then		                  Part = fName.Right( fName.Len - fName.InStr( 0, ".disc" ) + 1 )		                  		                  // [section]		                ElseIf fName.InStr(0, "[cd") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"[cd" ) + 1 )		                  		                ElseIf fName.InStr(0, "[part") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"[part" ) + 1 )		                  		                ElseIf fName.InStr(0, "[disc") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"[disc" ) + 1 )		                  		                  // (section)		                ElseIf fName.InStr(0, "(cd") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"(cd" ) + 1 )		                  		                ElseIf fName.InStr(0, "(part") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"(part" ) + 1 )		                  		                ElseIf fName.InStr(0, "(disc") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"(disc" ) + 1 )		                  		                  // -section		                ElseIf fName.InStr(0, "-cd") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"-cd" ) + 1 )		                  		                ElseIf fName.InStr(0, "-part") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"-part" ) + 1 )		                  		                ElseIf fName.InStr(0, "-disc") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"-disc" ) + 1 )		                  		                  // _section		                ElseIf fName.InStr(0, "_cd") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"_cd" ) + 1 )		                  		                ElseIf fName.InStr(0, "_part") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"_part" ) + 1 )		                  		                ElseIf fName.InStr(0, "_disc") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,"_disc" ) + 1 )		                  		                  // (1) (2)		                ElseIf fName.InStr(0, " (1)") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0," (1)" ) + 1 )		                ElseIf fName.InStr(0, " (2)") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0," (2)" ) + 1 )		                  		                End If		                		                // Subtitles multi-dimentional loop, this stuff is fun...		                If subtitles <> Nil Then		                  For t as Integer = 0 to subtitles.Ubound		                    Dim CountryFlag as String = subtitles(t).NameWithoutExtension.ReplaceAll( MovieFiles(n).NameWithoutExtension, "" )		                    If NOT Subtitles(t).Directory And Subtitles(t).Name.InStr(0, MovieFiles(n).NameWithoutExtension) > 0 Then		                      Subtitles(t).MoveFileTo( Location.Child( NewName + Part + CountryFlag + "." + Subtitles(t).NameExtension ) )		                    End If		                  Next		                End If		                		                // Weather it's one or more parts, it still has to be moved!		                If n = 0 Then PartOne = Part		                MovieFiles(n).MoveFileTo( Location.Child( NewName + Part + "." + MovieFiles(n).NameExtension ) )		                		              End If		            Next		            		            If NFOFile <> Nil And NFOFile.Exists Then _		            NFOFile.MoveFileTo( Location.Child(    Prefs.textStringForKey("FileNameNFO").ReplaceAll( "<movie>", NewName + PartOne ) ) )		            		            If PosterFile <> Nil And PosterFile.Exists Then _		            PosterFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", NewName + PartOne ) ) )		            		            If FanartFile <> Nil And FanartFile.Exists Then _		            FanartFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", NewName + PartOne ) ) )		            		            If TrailerFile <> Nil And TrailerFile.Exists Then _		            TrailerFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameTrailer" ).ReplaceAll( "<movie>", NewName + PartOne ) + "." + TrailerFile.NameExtension ) )		            		          Else		            If NFOFile <> Nil And NFOFile.Exists Then _		            NFOFile.MoveFileTo( Location.Child( "movie.nfo" ) )		            		            If PosterFile <> Nil And PosterFile.Exists Then _		            PosterFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", "poster" ) ) )		            		            If FanartFile <> Nil And FanartFile.Exists Then _		            FanartFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", "fanart" ) ) )		            		            If TrailerFile <> Nil And TrailerFile.Exists Then _		            TrailerFile.MoveFileTo( Location.Child( "trailer" + "." + TrailerFile.NameExtension ) )		            		          End If // @END MovieFile.Exists AND MovieFile <> "VIDEO_TS"		          		        Case "lstTVShows"		          		          		        case "lstAnime"		          		          		        End Select		        		        		      End If // @END BatchRename = 1		      		      // Rename Folder		      Destination = Destination.Child( NewName )		      Location.MoveFileTo( Destination )		      		      // Fix for poster thumb having been moved.		      Dim NewNFOFile as FolderItem = FindNFOFile( Destination )		      If NewNFOFile <> Nil And NewNFOFile.Exists Then		        MovieAttr.FolderParent = Destination		        		        MovieAttr.NFORead( MovieAttr.FolderParent )		        MovieAttr.NFOWrite( MovieAttr.FolderParent )		        If NOT Scrape.MassSearch Then wndMain.lstMovies.UpdateRow( -1, MovieAttr.FolderParent )		      End If		      		    End If		    		    NewName = ""		    		  Next		  		  // Reload the list with the new locations.		  'wndMain.CommonActions("ReloadList")		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CacheImageDelete(ID as String)		  Dim poster, fanart, thumb as FolderItem = Preferences.fAppSupport.Child("Cache")		  If poster <> Nil and poster.Exists Then		    poster = poster.Child( ID + ".movie.poster.jpg" )		    fanart = fanart.Child( ID + ".movie.fanart.jpg" )		    thumb  = thumb.Child(  ID + ".movie.thumb.jpg"  )		    		    If poster.Exists Then poster.Delete		    If fanart.Exists Then fanart.Delete		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function CacheImageLoad(Name as String) As Picture		  Dim f as FolderItem = Preferences.fAppSupport.Child("Cache").Child( Name )		  If f <> Nil and f.Exists Then Return Picture.Open( f )		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub CacheImageSet(pic as Picture, Name as String)		  Dim TheFile as FolderItem = Preferences.fAppSupport.Child("Cache").Child( Name )		  If TheFile <> Nil and TheFile.Exists Then TheFile.Delete		  		  Dim fType as FileType = FileTypes.ImageJpeg		  If Name.right(3) = "png" Then fType = FileTypes.ImagePng		  		  If pic <> Nil and Name <> "" and Name.Left( 1 ) <> "." Then Globals.SaveImage( ScaleImage( pic, 640, 410 ), TheFile, fType )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CacheImageUpdate(OldName as String, NewName as String)		  Dim TheFile as FolderItem = Preferences.fAppSupport.Child( "Cache" ).Child( OldName )		  Dim TheDestination as FolderItem = Preferences.fAppSupport.Child( "Cache" ).Child( NewName )		  		  If TheFile <> Nil and TheFile.Exists and OldName <> "" and NewName <> "" Then TheFile.MoveFileTo( TheDestination )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function DeArticulator(Extends ItemName as String) As String		  		  // English		  ItemName = ItemName.ReplaceAll( "The ", "" )		  ItemName = ItemName.ReplaceAll( "A "  , "" )		  ItemName = ItemName.ReplaceAll( "An " , "" )		  		  // Nederlands		  ItemName = ItemName.ReplaceAll( "Het ", "" )		  ItemName = ItemName.ReplaceAll( "De " , "" )		  ItemName = ItemName.ReplaceAll( "Een ", "" )		  		  Return ItemName		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindImageBanner(BannerParent as FolderItem) As FolderItem		  For i as Integer = 1 to BannerParent.Count		    Dim Item as FolderItem = BannerParent.Item(i)		    If ( Item.Type = "image/png" Or _		      Item.Type = "image/jpg"  Or _		      Item.Type = "image/tbn" ) And _		      Item.Name.InStr( 0, "banner" ) > 0 Then Return Item		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindImageFanart(FanartParent as FolderItem) As FolderItem		  Dim Item as FolderItem		  For i as Integer = 1 to FanartParent.Count		    Item = FanartParent.Item(i)		    If ( Item.Type = "image/png" Or _		      Item.Type = "image/jpg"  Or _		      Item.Type = "image/tbn" ) And _		      Item.Name.InStr( 0, "fanart" ) > 0 Then Return Item		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindImagePoster(PosterParent as FolderItem) As FolderItem		  Dim MovieName as String		  Dim MovieItem as FolderItem = FindMovieItem( PosterParent )		  Dim Item as FolderItem		  		  If MovieItem <> Nil then MovieName = MovieItem.NameWithoutExtension		  		  For i as Integer = 1 to PosterParent.Count		    Item = PosterParent.Item(i)		    If ( Item.Type = "image/png" Or _		      Item.Type = "image/jpg"  Or _		      Item.Type = "image/tbn" ) Then		      If   Item.Name.InStr( 0, "poster" ) > 0 or _		        Item.Name.Left(5) = "movie" or _		        Item.Name.Left(6) = "folder" or _		        Item.NameWithoutExtension = MovieName then		        Return Item		      End If		      		    End If		    Item = Nil		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindMovieItem(MovieParent as FolderItem) As FolderItem		  Dim MovieFile as FolderItem		  		  For i as Integer = 1 to MovieParent.Count		    MovieFile = MovieParent.Item(i)		    		    If MovieFile.Type = "video/any" then		      		      If MovieFile <> Nil And MovieFile.Visible = True And NOT MovieFile.Directory And _		        MovieFile.Name.InStr( -1, "trailer" ) = 0 And _		        MovieFile.Name.InStr( -1, "sample" )  = 0 And _		        MovieFile.Name.InStr( -1, "[Bonus" )  = 0 then		        Return MovieFile		      End If		      		    ElseIf MovieFile.Name = "VIDEO_TS" And MovieFile.Directory Then		      Return MovieFile		    End If		    		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindMovieItems(MovieParent as FolderItem) As FolderItem()		  Dim MovieFile, MovieFiles() as FolderItem		  		  For i as Integer = 1 to MovieParent.Count		    MovieFile = MovieParent.Item(i)		    		    If MovieFile.Type = "video/any" then		      		      If MovieFile <> Nil And MovieFile.Visible = True And NOT MovieFile.Directory And _		        MovieFile.Name.InStr( -1, "trailer" ) = 0 And _		        MovieFile.Name.InStr( -1, "sample" )  = 0 And _		        MovieFile.Name.InStr( -1, "[Bonus" )  = 0 then		        MovieFiles.Append MovieFile		      End If		      		    ElseIf MovieFile.Name = "VIDEO_TS" Then		      MovieFiles.Append MovieFile		    End If		    		  Next		  		  Return MovieFiles		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindMovieName(MovieParent as FolderItem, Filter as Boolean = False, UseFileName as Boolean = False) As String		  Dim MovieFile as FolderItem = FindMovieItem( MovieParent )		  Dim MovieName as String		  		  If MovieFile = Nil then MovieFile = MovieParent		  If MovieFile = Nil or NOT MovieFile.Exists then Return ""		  		  If UseFileName then		    If MovieFile.Name = "VIDEO_TS" then MovieName = MovieParent.name Else MovieName = MovieFile.NameWithoutExtension		  Else		    MovieName = MovieParent.Name		  End If		  		  If Filter then		    Dim i as Integer = -1		    		    i = MovieName.InStr( -1, "720p" )		    If i <= 0 then i = MovieName.InStr( -1, "1080p" )		    If i <= 0 then i = MovieName.InStr( -1, "xvid"  )		    If i <= 0 then i = MovieName.InStr( -1, "divx"  )		    If i <= 0 then i = MovieName.InStr( -1, "x264"  )		    If i <= 0 then i = MovieName.InStr( -1, "AC3"   )		    If i <= 0 then i = MovieName.InStr( -1, "DTS"   )		    If i  > 0 then MovieName = MovieName.Left( i - 1 )		    		    MovieName = MovieName.ReplaceAll( ".", " " )		    		    MovieName = MovieName.ReplaceAll( " - ", "  " )		    MovieName = MovieName.ReplaceAll( "- ",  ": "  )		    MovieName = MovieName.ReplaceAll( "-",   " "    )		    MovieName = MovieName.ReplaceAll( "  ", " - "   )		    		    MovieName = MovieName.ReplaceAll( "x264", "" )		    MovieName = MovieName.ReplaceAll( "AC3",  "" )		    MovieName = MovieName.ReplaceAll( "DTS",  "" )		    		    MovieName = MovieName.ReplaceAll( "xvid", "" )		    MovieName = MovieName.ReplaceAll( "divx", "" )		    		    MovieName = MovieName.ReplaceAll( "DVD-Rip",    "" )		    MovieName = MovieName.ReplaceAll( "BR-Rip",     "" )		    MovieName = MovieName.ReplaceAll( "BluRay-Rip", "" )		    MovieName = MovieName.ReplaceAll( "-Rip",       "" )		    		    MovieName = MovieName.ReplaceAll( "DVDrip",  "" )		    MovieName = MovieName.ReplaceAll( "DVD rip", "" )		    MovieName = MovieName.ReplaceAll( "DVD",     "" )		    MovieName = MovieName.ReplaceAll( "BluRay",  "" )		    MovieName = MovieName.ReplaceAll( "brrip",   "" )		    MovieName = MovieName.ReplaceAll( "bdrip",   "" )		    MovieName = MovieName.ReplaceAll( "460p",    "" )		    MovieName = MovieName.ReplaceAll( "720p",    "" )		    MovieName = MovieName.ReplaceAll( "1080p",   "" )		    		    MovieName = MovieName.ReplaceAll( "unrated",        "" )		    MovieName = MovieName.ReplaceAll( "uncut",          "" )		    MovieName = MovieName.ReplaceAll( "Directors Cut",  "" )		    MovieName = MovieName.ReplaceAll( "Director's Cut", "" )		    MovieName = MovieName.ReplaceAll( "Extended Cut",   "" )		    		    MovieName = MovieName.ReplaceAll( "()", "" )		    		    If MovieName.Left(1)  = "[" then MovieName = MovieName.Right( MovieName.Len - MovieName.InStr( -1, "]") - 1 )		    If MovieName.Right(1) = "]" then MovieName = MovieName.Left(  MovieName.Len - MovieName.InStr( -1, "[") - 1 )		    		    If MovieName.InStr( 0, "[" ) > 5 Then MovieName = MovieName.Left( MovieName.InStr( 0, "[" ) - 1 )		    'If MovieName.InStr( 0, "(" ) > 5 Then MovieName = MovieName.Left( MovieName.InStr( 0, "(" ) - 1 )		    		    While MovieName.InStr( -1, "  " ) > 0		      MovieName = MovieName.ReplaceAll( "  ", " " )		    Wend		    		    'MovieName = Titlecase( MovieName )		  End If		  		  Return Trim( MovieName )		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindNFOFile(NFOParent as FolderItem) As FolderItem		  Dim MovieName as String		  Dim MovieItem as FolderItem = FindMovieItem( NFOParent )		  		  If MovieItem <> Nil and MovieItem.Exists then MovieName = MovieItem.NameWithoutExtension		  If MovieItem <> Nil and MovieItem.Name = "VIDEO_TS" then NFOParent = MovieItem		  		  For i as integer = 1 to NFOParent.Count		    If NFOParent.Item(i).Type = "special/nfo" then		      If   NFOParent.Item(i).Name = "movie.nfo" or _		        NFOParent.Item(i).Name = "tvshow.nfo" or _		        NFOParent.Item(i).Name = "VIDEO_TS.nfo" or _		        NFOParent.Item(i).Name = MovieName + ".nfo" or _		        NFOParent.Item(i).Name = MovieName + ".xml" Then		        Return NFOParent.Item(i)		      End If		    End If		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindSubtitles(SubtitleParent as FolderItem) As FolderItem()		  Dim Subtitles() as FolderItem		  		  For i as Integer = 1 to SubtitleParent.Count		    If SubtitleParent.Item(i).Type = "special/subtitle" or SubtitleParent.Item(i).Name = "Subs" Then Subtitles.Append SubtitleParent.Item(i)		  Next		  If Subtitles.Ubound > -1 Then Return Subtitles Else Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindTrailerItem(TrailerParent as FolderItem) As FolderItem		  If TrailerParent = Nil or NOT TrailerParent.Exists then Return Nil		  For i as Integer = 1 to TrailerParent.Count		    If TrailerParent.Item(i).Name.InStr( 0, "trailer" ) > 0 then Return TrailerParent.Item(i)		  Next		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FlagCountry(ISO as String) As String		  Select Case ISO.Lowercase		    		  case "en"		    Return "USA"		  case "us"		    Return "USA"		  case "gb"		    Return "UK"		  case "nl"		    Return "Netherlands"		  case "da"		    Return "Denmark"		  case "dk"		    Return "Denmark"		  case "pt"		    Return "Brazil"		  case "fi"		    Return "Finland"		  case "de"		    Return "Germany"		  case "it"		    Return "Italy"		  case "es"		    Return "Spain"		  case "fr"		    Return "France"		  case "pl"		    Return "Portugal"		  case "hu"		    Return "Hungaria"		  case "el" // Greece		    Return "Greece"		  case "tr" // Turkish		    Return "Turkey"		  case "ru" // Russian		    Return "Russia"		  case "he" // Hebrew		    Return "Hebrew"		  case "ja" // Japanese		    Return "Japan"		  case "pt"		    Return "Portugal"		  case "zh" // Chinese / Mandarin		    Return "China"		  case "cz" // Czech		    Return "Czech"		  case "sl"		    Return "Slovenia"		  case "hr"		    Return "Croatia"		  case "ko" // Korean		    Return "Korea"		  case "no"		    Return "Norwegia"		    		  End Select		  		  'Return ISO		  		  Select Case ISO.Uppercase		    		  case "USA"		    Return "en"		  case "UK"		    Return "en-gb"		  case "Netherlands"		    Return "NL"		  case "Denmark"		    Return "da"		  case "Brazil"		    Return "pt"		  case "Finland"		    Return "fi"		  case "Germany"		    Return "de"		  case "Italy"		    Return "it"		  case "Spain"		    Return "es"		  case "France"		    Return "fr"		  case "Portugal"		    Return "pl"		  Case "Brazil"		    Return "pt"		  case "Hungaria"		    Return "hu"		  case "Greece" // Greece		    Return "el"		  case "Turkey" // Turkish		    Return "tr"		  case "Russia" // Russian		    Return "ru"		  case "Hebrew" // Hebrew		    Return "he"		  case "Japan" // Japanese		    Return "ja"		  case "Portugal"		    Return "pt"		  case "China" // Chinese / Mandarin		    Return "zh"		  case "Czech" // Czech		    Return "cz"		  case "Slovenia"		    Return "sl"		  case "Croatia"		    Return "hr"		  case "Korea" // Korean		    Return "ko"		  case "Norwegia"		    Return "no"		    		  End Select		  		  Return ISO		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FlagLanguage(Language As String) As String		  select case language		    		    // Full length language name to abbriviation		  case "American English"		    Return "en"		  case "UK English"		    Return "en-gb"		  case "English"		    Return "en"		  case "Nederlands"		    Return "nl"		  case "Dansk"		    Return "da"		  case "Suomeksi"		    Return "fi"		  case "Deutsch"		    Return "de"		  case "Italiano"		    Return "it"		  case "Español"		    Return "es"		  case "Français"		    Return "fr"		  case "Polski"		    Return "pl"		  case "Magyar"		    Return "hu"		  case "Ελληνικά" // Greece		    Return "el"		  case "Türkçe" // Turkish		    Return "tr"		  case "русский язык" // Russian		    Return "ru"		  case "עברית" // Hebrew		    Return "he"		  case "日本語" // Japanese		    Return "ja"		  case "Português"		    Return "pt"		  case "中文" // Chinese / Mandarin		    Return "zh"		  case "čeština"		    Return "cs"		  case "Slovenski"		    Return "sl"		  case "Hrvatski"		    Return "hr"		  case "한국어" // Korean		    Return "ko"		  case "Norsk"		    Return "no"		    		    // And in reverse!		  case "en"		    Return "American English"		  case "en-gb"		    Return "UK English"		  case "nl"		    Return "Nederlands"		  case "da"		    Return "Dansk"		  case "fi"		    Return "Suomeksi"		  case "de"		    Return "Deutsch"		  case "it"		    Return "Italiano"		  case "es"		    Return "Español"		  case "fr"		    Return "Français"		  case "pl"		    Return "Polski"		  case "hu"		    Return "Magyar"		  case "el" // Greece		    Return "Ελληνικά"		  case "tr" // Turkish		    Return "Türkçe"		  case "ru" // Russian		    Return "русский язык"		  case "he" // Hebrew		    Return "עברית"		  case "ja" // Japanese		    Return "日本語"		  case "pt"		    Return "Português"		  case "zh" // Chinese / Mandarin		    Return "中文"		  case "cs" // Czech		    Return "čeština"		  case "sl"		    Return "Slovenski"		  case "hr"		    Return "Hrvatski"		  case "ko" // Korean		    Return "한국어"		  case "no"		    Return "Norsk"		    		  end Select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GenreList() As String()		  		  If Genre.Action <> "" Then		    		    Dim Genres() as String		    		    Genres.Append Genre.Action		    Genres.Append Genre.Adventure		    Genres.Append Genre.Animation		    Genres.Append Genre.Comedy		    Genres.Append Genre.Crime		    Genres.Append Genre.Documentary		    Genres.Append Genre.Drama		    Genres.Append Genre.Eastern		    Genres.Append Genre.Erotic		    Genres.Append Genre.Family		    Genres.Append Genre.FanFilm		    Genres.Append Genre.Fantasy		    Genres.Append Genre.FilmNoir		    Genres.Append Genre.Foreign		    Genres.Append Genre.History		    Genres.Append Genre.Holiday		    Genres.Append Genre.Horror		    Genres.Append Genre.Indie		    Genres.Append Genre.Music		    Genres.Append Genre.Musical		    Genres.Append Genre.Mystery		    Genres.Append Genre.Neonoir		    Genres.Append Genre.RoadMovie		    Genres.Append Genre.Romance		    Genres.Append Genre.ScienceFiction		    Genres.Append Genre.Shorty		    Genres.Append Genre.Sport		    Genres.Append Genre.SportingEvent		    Genres.Append Genre.SportsFilm		    Genres.Append Genre.Suspense		    Genres.Append Genre.Thriller		    Genres.Append Genre.TVmovie		    Genres.Append Genre.War		    Genres.Append Genre.Western		    		    Return Genres		    		  Else		    		    Dim Genres as String = "Action/Adventure/Animation/Comedy/Crime/Disaster/Documentary/Drama/Eastern/Erotic/Family/Fan Film/Fantasy/Film Noir/Foreign/History/Holiday/Horror/Indie/Music/Musical/Mystery/Neo-noir/Road Movie/Romance/Science Fiction/Short/Sport/Sporting Event/Sports Film/Suspense/TV movie/Thriller/War/Western"		    Return Genres.Split("/")		    		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function icon(Extends f as FolderItem, size as Integer) As Picture		  Dim pic as Picture		  If f <> nil and f.Exists then		    pic      = f.IconImageMBS ( size )		    If pic <> Nil then pic.Mask = f.IconMaskMBS  ( size )		    Return pic		  Else		    Return Nil		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Int2Month(Month as Integer) As String		  Select case Month		    		  case 1		    Return "Jan"		  case 2		    Return "Feb"		  case 3		    Return "Mar"		  case 4		    Return "Apr"		  case 5		    Return "May"		  case 6		    Return "Jun"		  case 7		    Return "Jul"		  case 8		    Return "Aug"		  case 9		    Return "Sep"		  case 10		    Return "Okt"		  case 11		    Return "Nov"		  case 12		    Return "Dec"		    		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function JSONArray(JSON as JSONItem, Key as String) As String()		  Dim Arry() as String		  		  For i as Integer = 0 to JSON.Count - 1		    If JSON.Child(i).Value(Key) <> "" Then Arry.Append JSON.Child(i).Value(Key)		  Next		  		  Return Arry		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub MassClean(LstBox as Listbox, Mode as String)		  Dim d as New Date		  Dim FolderParent as FolderItem		  		  For i as Integer = 0 to LstBox.ListCount - 1		    		    Dim NFOFile, Poster, Fanart, Banner, ExtraThumbs, ExtraFanart, DiscArt, CharacterArt, ClearArt, Logo, TVThumb, ThemeSong, Trailer, folderjpg as FolderItem = Nil		    Dim IMDBID as String = LstBox.Cell( i, 2 )		    		    FolderParent = GetFolderItem( LstBox.Cell( i, 1 ) )		    		    NFOFile      = FindNFOFile( FolderParent )		    		    Poster       = FindImagePoster( FolderParent )		    Fanart       = FindImageFanart( FolderParent )		    ExtraThumbs  = FolderParent.Child("extrathumbs")		    ExtraFanart  = FolderParent.Child("extrafanart")		    Trailer      = FindTrailerItem( FolderParent )		    		    Banner       = FindImageBanner( FolderParent )		    Logo         = FolderParent.Child("logo.png")		    TVThumb      = FolderParent.Child("landscape.jpg")		    ClearArt     = FolderParent.Child("clearart.png")		    CharacterArt = FolderParent.Child("characterart.png")		    DiscArt      = FolderParent.Child("disc.png")		    ThemeSong    = FolderParent.Child("theme.mp3")		    		    folderjpg    = FolderParent.Child("folder.jpg")		    		    If ( Mode = "All" or Mode = "Metadata" ) And NFOFile <> Nil Then NFOFile.MoveFileToTrash		    		    If Mode = "All" or Mode = "Images" Then		      		      CacheImageDelete( IMDBID )		      		      If Poster <> Nil Then Poster.MoveFileToTrash		      If Fanart <> Nil Then Fanart.MoveFileToTrash		      		      If ExtraThumbs  <> Nil and ExtraThumbs.Exists  Then		        		        // These images are stubborn!? Try 10x to remove them all.		        For t as Integer = 0 to 10		          For n as Integer = 1 to ExtraThumbs.Count Step 1		            ExtraThumbs.Item(n).MoveFileToTrash		          Next		        Next		        		        ExtraThumbs.MoveFileToTrash		      End If		      		      If ExtraFanart <> Nil and ExtraFanart.Exists Then		        For t as Integer = 0 to 10		          For n as Integer = 1 to ExtraFanart.Count Step 1		            ExtraFanart.Item(n).MoveFileToTrash		          Next		        Next		        		        ExtraFanart.MoveFileToTrash		      End If		      		      If Banner <> Nil Then Banner.MoveFileToTrash		      Logo.MoveFileToTrash		      TVThumb.MoveFileToTrash		      ClearArt.MoveFileToTrash		      CharacterArt.MoveFileToTrash		      DiscArt.MoveFileToTrash		      		      folderjpg.MoveFileToTrash		    End If		    		    If Mode = "All" or Mode = "Media" Then		      If Trailer <> Nil Then Trailer.MoveFileToTrash		      ThemeSong.MoveFileToTrash		    End If		    		  Next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MassMovies2Folders(LstBox as Listbox)		  		  // Get Path Preferences		  Dim Dict as Dictionary		  If LstBox.Name = "lstMovies" Then		    Dict = Prefs.dictionaryForKey("MoviePaths")		  ElseIf LstBox.Name = "lstTVShows" Then		    Dict = Prefs.dictionaryForKey("TVShowPaths")		  ElseIf LstBox.Name = "lstAnime" Then		    Dict = Prefs.dictionaryForKey("AnimePaths")		  Else		    Return		  End If		  If NOT Dict IsA Object Then Return		  		  // Get valid Root folders.		  Dim Roots() as FolderItem		  For Each Key as Variant in Dict.Keys		    Roots.Append GetFolderItem( Trim( Dict.Key( Key ) ) )		  Next		  If Roots.Ubound = -1 Then Return		  		  For r as Integer = 0 to Roots.Ubound		    If NOT Roots(r).Exists Then Continue		    		    For i as Integer = Roots(r).Count Downto 1		      Dim TheFile as FolderItem = Roots(r).Item(i)		      // Make sure the file is a video file.		      If TheFile = Nil OR _		        NOT TheFile.Exists OR _		        TheFile.Directory OR _		        TheFile.Name = ".DS_Store" Or _		        ( NOT ( TheFile.Type = "video/any" ) And _		        TheFile.Name.InStr( 0, "trailer" ) > 0 And _		        TheFile.Name.InStr( 0, "sample" )  > 0 And _		        TheFile.Name.InStr( 0, "[Bonus" )  > 0 ) Then Continue		        		        Dim FolderName as String = TheFile.NameWithoutExtension		        If FolderName <> "" Then Roots(r).Child( FolderName ).CreateAsFolder Else Roots(r).Child( TheFile.Name ).CreateAsFolder		        Dim Destination as FolderItem = Roots(r).Child( FolderName )		        If Destination = Nil OR NOT Destination.Exists Then Continue		        		        // Move Extra Files.		        For n as Integer = Roots(r).Count DownTo 1		          Dim ExtraFile as FolderItem = Roots(r).Item(n)		          If ExtraFile <> Nil And ExtraFile.Exists And NOT ExtraFile.Directory And ExtraFile.Name.InStr( 0, FolderName ) > 0 Then ExtraFile.MoveFileTo( Destination )		        Next		        		        TheFile.MoveFileTo Destination		        		    Next		    		  Next		  		  wndMain.CommonActions("ReloadList")		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function MediaInfo(VideoFile as FolderItem, Full as Boolean = False, Type as String = "XML") As String		  // Download latest version:		  // http://mediainfo.sourceforge.net/en/Download/Mac_OS		  		  #If TargetMacOS then		    Dim MediaInfo As FolderItem = app.ExecutableFile.Parent.Parent.Child("Resources").Child("mediainfo")		    If MediaInfo <> Nil and MediaInfo.Exists and _		      VideoFile <> Nil And VideoFile.Exists then		      'Dim i as integer = Ticks		      Dim sh As New Shell		      If Full then		        sh.Execute( MediaInfo.ShellPath + " --output=" + Type + " --Full " + VideoFile.ShellPath )		      Else		        sh.Execute( MediaInfo.ShellPath + " --output=" + Type + " " + VideoFile.ShellPath )		      End If		      if App.DebugMode then		        		      end if		      Return sh.Result		    End If		  #EndIf		  		  Return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Minutes2Hours(Extends TotalMinutes as Integer) As String		  Dim Hours   as Integer = Floor( TotalMinutes / 60 )		  Dim Minutes as Integer =        TotalMinutes - ( Hours * 60 )		  		  Dim strRuntime as String		  		  If TotalMinutes >= 60 and TotalMinutes < 120 then		    strRuntime = str( Hours ) + Loc.kHourAnd  + str( Minutes ) + Loc.kMinutes		  ElseIf TotalMinutes >= 120 then		    strRuntime = str( Hours ) + Loc.kHoursAnd + str( Minutes ) + Loc.kMinutes		  Else		    strRuntime = str( TotalMinutes ) + Loc.kMinutes		  End If		  		  Return strRuntime		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Month2Int(Month as String) As String		  Select case Month		    		  case "Jan"		    Return "01"		  case "Feb"		    Return "02"		  case "Mar"		    Return "03"		  case "Apr"		    Return "04"		  case "May"		    Return "05"		  case "Jun"		    Return "06"		  case "Jul"		    Return "07"		  case "Aug"		    Return "08"		  case "Sep"		    Return "09"		  case "Okt"		    Return "10"		  case "Nov"		    Return "11"		  case "Dec"		    Return "12"		    		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function MPAA2Logo(MPAA As String) As Picture		  // American English		  Dim Lang as String = Prefs.textStringForKey("DBLanguage")		  		  If Lang = "en" Then		    select case MPAA		      		    case "Rated G"		      Return Rating_G		    case "Rated PG"		      If NOT StrComp(Lang, "en-gb", 1) = 0 Then Return Rating_PG		    case "Rated PG-13"		      Return Rating_PG13		    case "Rated NC-17"		      Return Rating_NC17		    case "Rated R"		      Return Rating_R		      		    case "G"		      Return Rating_G		    case "PG"		      Return Rating_PG		    case "PG-13"		      Return Rating_PG13		    case "NC-17"		      Return Rating_NC17		    case "R"		      Return Rating_R		      		      		    case "Rated TV-G"		      Return Rating_TVG		    case "Rated TV-PG"		      Return Rating_TVPG		    case "Rated TV-14"		      Return Rating_TV14		    case "Rated TV-MA"		      Return Rating_TVMA		      		    case "Rated TV-Y7"		      Return Rating_TVY7		    case "Rated TV-Y"		      Return Rating_TVY		    case "Rated TV-Y7FV"		      Return Rating_TVY7FV		      		    end select		    		  End If		  		  If Lang = "en-gb" Then		    // UK English		    Select case MPAA		      		    case "Rated Uc"		      Return Rating_UKUc		    case "Rated U"		      Return Rating_UKU		    case "Rated PG"		      Return Rating_UKPG		    case "Rated 12A"		      Return Rating_UK12A		    case "Rated 12"		      Return Rating_UK12		    case "Rated 15"		      Return Rating_UK15		    case "Rated 18"		      Return Rating_UK18		    case "Rated R18"		      Return Rating_UKR18		      		    case "Uc"		      Return Rating_UKUc		    case "U"		      Return Rating_UKU		    case "PG"		      Return Rating_UKPG		    case "12A"		      Return Rating_UK12A		    case "12"		      Return Rating_UK12		    case "15"		      Return Rating_UK15		    case "18"		      Return Rating_UK18		    case "R18"		      Return Rating_UKR18		      		    End Select		    		  End If		  		  If Lang = "nl" Then		    // Dutch		    Select case MPAA		      		    case "Kijkwijzer: AL"		      Return Rating_NLAL		    case "Kijkwijzer: 6"		      Return Rating_NL6		    case "Kijkwijzer: 9"		      Return Rating_NL9		    case "Kijkwijzer: 12"		      Return Rating_NL12		    case "Kijkwijzer: 16"		      Return Rating_NL16		      		    case "AL"		      Return Rating_NLAL		    case "6"		      Return Rating_NL6		    case "9"		      Return Rating_NL9		    case "12"		      Return Rating_NL12		    case "16"		      Return Rating_NL16		      		    End Select		    		  End If		  		  If Lang = "de" Then		    // German		    Select case MPAA		      		    case "FSK 0"		      Return Rating_FSK0		    case "FSK 6"		      Return Rating_FSK6		    case "FSK 12"		      Return Rating_FSK12		    case "FSK 16"		      Return Rating_FSK16		    case "FSK 18"		      Return Rating_FSK18		      		    case "0"		      Return Rating_FSK0		    case "6"		      Return Rating_FSK6		    case "12"		      Return Rating_FSK12		    case "16"		      Return Rating_FSK16		    case "18"		      Return Rating_FSK18		      		    End Select		    		  End If		  		  If Lang = "fr" Then		    // French		    Select case MPAA		      		    Case "Classement: U"		      Return Rating_FRU		    Case "Classement: 10"		      Return Rating_FR10		    Case "Classement: 12"		      Return Rating_FR12		    Case "Classement: 16"		      Return Rating_FR16		    Case "Classement: 18"		      Return Rating_FR18		      		    Case "U"		      Return Rating_FRU		    Case "10"		      Return Rating_FR10		    Case "12"		      Return Rating_FR12		    Case "16"		      Return Rating_FR16		    Case "18"		      Return Rating_FR18		      		    End Select		    		  End If		  		  		  If Lang = "fi" Then		    // Finland		    Select case MPAA		      		    Case "Nimellisteho: S"		      Return Rating_FIS		    Case "Nimellisteho: K-7"		      Return Rating_FIK7		    Case "Nimellisteho: K-11"		      Return Rating_FIK11		    Case "Nimellisteho: K-12"		      Return Rating_FIK12		    Case "Nimellisteho: K-16"		      Return Rating_FIK16		    Case "Nimellisteho: K-18"		      Return Rating_FIK18		    Case "Nimellisteho: K-E"		      Return Rating_FIKE		      		    Case "S"		      Return Rating_FIS		    Case "K-7"		      Return Rating_FIK7		    Case "K-11"		      Return Rating_FIK11		    Case "K-12"		      Return Rating_FIK12		    Case "K-16"		      Return Rating_FIK16		    Case "K-18"		      Return Rating_FIK18		    Case "K-E"		      Return Rating_FIKE		      		    End Select		    		  End If		  		  		  Select Case MPAA		    		  case "Rated G"		    Return Rating_G		  case "Rated PG"		    Return Rating_PG		  case "Rated PG-13"		    Return Rating_PG13		  case "Rated NC-17"		    Return Rating_NC17		  case "Rated R"		    Return Rating_R		    		  Case "U"		    Return Rating_U		  case "G"		    Return Rating_G		  case "PG"		    Return Rating_PG		  case "PG-12"		    Return Rating_PG12		  case "PG-13"		    Return Rating_PG13		  case "NC-17"		    Return Rating_NC17		  case "R"		    Return Rating_R		    		  Case "10"		    Return Rating_10		  Case "11"		    Return Rating_11		  Case "12"		    Return Rating_12		  Case "13"		    Return Rating_13		  Case "14"		    Return Rating_14		  Case "15"		    Return Rating_15		  Case "16"		    Return Rating_16		  Case "17"		    Return Rating_17		  Case "18"		    Return Rating_18		    		  End Select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function MPAA2Ratings(MPAA as String) As String		  select case MPAA		    		  case "Rated G"		    Return "General Audiences. All ages admitted"		    		  case "Rated PG"		    Return "Parental Guidance Suggested. Some material may not be suitable for children"		    		  case "Rated PG-13"		    Return "Parents Strongly Cautioned. Some material may not be appropriate for children under 13"		    		  case "Rated R"		    Return "Restricted. Under 17 requires accompanying parent or adult guardian"		    		  case "Rated NC-17"		    Return "No One 17 and under admitted"		    		  case "NR"		    Return "Unrated"		    		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function MPAAFromCountry(MPAA as String, ISO as String) As String		  If MPAA = "" Then Return ""		  		  Dim RatStr as String		  		  Select Case ISO.Lowercase		    		  Case "us"		    RatStr = "Rated"		    		  Case "en"		    RatStr = "Rated"		    		  Case "en-gb"		    RatStr = "Rated"		    		  Case "nl"		    RatStr = "Kijkwijzer:"		    		  Case "de"		    'RatStr = "FSK"		    RatStr = ""		    		  Case "fr"		    RatStr = "Nominale:"		    		  Case "fi"		    RatStr = "Luokitus:"		    		  Case "da"		    RatStr = "Klassificering:"		    		  Case "es"		    RatStr = "Clasificación:"		    		    // TODO: MPAAFromCountry - Add More Languages support.		  End Select		  		  'If RatStr = "" Then RatStr = "Rated"		  		  Return  Trim( RatStr + " " + MPAA )		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function PrettyDate(BoringDate as String) As String		  		  Dim DDate() as String = split( BoringDate, "-" )		  If DDate.Ubound = 2 then		    Return DDate(2) + " " + Int2Month( Val( DDate(1) ) ) + ", " + DDate(0)		  ElseIf DDate.Ubound = 1 then		    Return Int2Month( Val( DDate(1) ) ) + ", " + DDate(0)		  ElseIf DDate.Ubound = 0 then		    Return DDate(0)		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub PriorArtDelete(FolderParent as FolderItem)		  Dim Poster, Fanart, Banner, Disc, ClearArt, CharacterArt, Logo, TVThumb, ExtraFanart, ExtraThumbs as FolderItem		  		  // Find & Delete!		  If FindImagePoster( FolderParent ) <> Nil Then FindImagePoster( FolderParent ).MoveFileToTrash		  If FindImageFanart( FolderParent ) <> Nil Then FindImageFanart( FolderParent ).MoveFileToTrash		  If FindImageBanner( FolderParent ) <> Nil Then FindImageBanner( FolderParent ).MoveFileToTrash		  		  FolderParent.Child("extrathumbs").MoveFileToTrash		  FolderParent.Child("extrafanart").MoveFileToTrash		  		  FolderParent.Child( "disc.png" ).MoveFileToTrash		  FolderParent.Child( "clearart.png" ).MoveFileToTrash		  FolderParent.Child( "character.png" ).MoveFileToTrash		  FolderParent.Child( "logo.png" ).MoveFileToTrash		  FolderParent.Child( "landscape.jpg" ).MoveFileToTrash		  		  // Cache		  Dim ID as String		  Select Case wndMain.GetActiveListbox		    		  Case wndMain.lstMovies		    ID = MovieAttr.ID_IMDB		    		  Case wndMain.lstTVShows		    // ID = TVAttr.ID_IMDB		    		    		    // Case wndMain.lstAnime		    		  End Select		  		  CacheImageDelete( ID )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function PriorArtFound(FolderParent as FolderItem) As Boolean		  Dim Poster, Fanart, Banner, Disc, ClearArt, CharacterArt, Logo, TVThumb, ExtraFanart, ExtraThumbs as Boolean		  		  Poster = FindImagePoster( FolderParent ) <> Nil		  Fanart = FindImageFanart( FolderParent ) <> Nil		  Banner = FindImageBanner( FolderParent ) <> Nil		  		  ExtraFanart  = FolderParent.Child("extrafanart").Exists		  ExtraThumbs  = FolderParent.Child("extrathumbs").Exists		  		  Disc         = FolderParent.Child( "disc.png" ).Exists		  ClearArt     = FolderParent.Child( "clearart.png" ).Exists		  CharacterArt = FolderParent.Child( "character.png" ).Exists		  Logo         = FolderParent.Child( "logo.png" ).Exists		  TVThumb      = FolderParent.Child( "landscape.jpg" ).Exists		  		  If Poster or Fanart or Banner or Disc or ClearArt or CharacterArt or Logo or TVThumb then		    Return True		  Else		    Return False		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SingleRenamer(Location as FolderItem, Lindex as Integer = - 1, Force as Boolean = False)		  'Dim FoldersOrFiles as String = Loc.kFolders.Lowercase		  'If Prefs.integerForKey("BatchRename") = 1 Then FoldersOrFiles = Loc.kFoldersandFiles.Lowercase		  Dim Name as String = Location.Name		  // Check to see weather the user will go trough with this.		  'If NOT Force Then		  If NOT Force Then		    If Prefs.integerForKey("BatchRename") = 0 And MsgDlg( wndMain, 1, Loc.msgRenameFolder.ReplaceAll( "%F", Name ), Loc.kCantBeUndone, Loc.dlgRename, Loc.dlgCancel ) = 2 Then Return		    If Prefs.integerForKey("BatchRename") = 1 And MsgDlg( wndMain, 1, Loc.msgRenameFilesAndFolders.ReplaceAll( "%F", Name ), Loc.kCantBeUndone, Loc.dlgRename, Loc.dlgCancel ) = 2 Then Return		  End If		  'End If		  		  If NOT Location IsA Object Then Return		  Dim Destination as FolderItem = Location.Parent		  		  Dim NFOFile as FolderItem = FindNFOFile( Location )		  If NOT NFOFile IsA Object Then Return		  		  Dim MovieFile as FolderItem = FindMovieItem( Location )		  Dim PosterFile, FanartFile, TrailerFile, BannerFile, LogoFile, ClearArtFile, CharacterFile, LandscapeFile as FolderItem		  		  // There is no NFO file available to get data from.		  		  Dim NewName, Title, TitleSort, TitleOriginal, Year, Resolution, Studio, MPAA, Rating as String		  Dim DottedFileName as Boolean		  		  Select Case wndMain.ppMain.Value		    		  Case 0		    		    MovieAttr.NFORead( Location )		    NewName = Prefs.textStringForKey("RenameStringMovies")		    		    If MovieAttr.Title <> "" Then Title = MovieAttr.Title Else Title = MovieFile.Parent.Name		    If MovieAttr.TitleSort <> "" Then TitleSort = MovieAttr.TitleSort Else TitleSort = Articulator( Title )		    If MovieAttr.TitleOriginal <> "" Then TitleOriginal = MovieAttr.TitleOriginal Else TitleOriginal = Title		    If MovieAttr.DateYear > -1 Then Year = str( MovieAttr.DateYear ) Else Year = ""		    If wndMain.lstMovies.Cell( wndMain.lstMovies.ListIndex, 6 ) <> "" Then Resolution = wndMain.lstMovies.Cell( wndMain.lstMovies.ListIndex, 6 ) Else Resolution = ""		    If MovieAttr.Studios.Ubound > -1 Then Studio = MovieAttr.Studios(0) Else Studio = ""		    If MovieAttr.RatingMPAA <> "" Then MPAA = MovieAttr.RatingMPAA Else MPAA = ""		    If MovieAttr.Rating > 0 Then Rating = Str( MovieAttr.Rating ) Else Rating = ""		    DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		    		    PosterFile = FindImagePoster( Location )		    FanartFile = FindImageFanart( Location )		    TrailerFile = FindTrailerItem( Location )		    		  Case 1		    		    'TVAttr.NFORead( Location )		    NewName = Prefs.textStringForKey("RenameStringTVShows")		    		    // TODO: Add TV Attributes		    DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		    		    PosterFile = FindImagePoster( Location )		    FanartFile = FindImageFanart( Location )		    BannerFile = FindImageBanner( Location )		    LogoFile   = Location.Child( "Logo.png" )		    ClearArtFile = Location.Child( "ClearArt.png" )		    CharacterFile = Location.Child( "Character.png" )		    LandscapeFile = Location.Child( "landscape.jpg" )		    		  Case 2		    		    'AnimeAttr.NFORead( Location )		    NewName = Prefs.textStringForKey("RenameStringAnime")		    		    // TODO: Add Anime Attributes		    DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		    		    PosterFile = FindImagePoster( Location )		    FanartFile = FindImageFanart( Location )		    BannerFile = FindImageBanner( Location )		    LogoFile   = Location.Child( "Logo.png" )		    ClearArtFile = Location.Child( "ClearArt.png" )		    CharacterFile = Location.Child( "Character.png" )		    LandscapeFile = Location.Child( "landscape.jpg" )		    		  End Select		  		  // Set name based on attributes.		  NewName = NewName.ReplaceAll( "$T", Title.ReplaceAll("$", "≈" ) )		  NewName = NewName.ReplaceAll( "$S", TitleSort.ReplaceAll("$", "≈" ) )		  NewName = NewName.ReplaceAll( "$O", TitleOriginal.ReplaceAll( "$", "≈" ) )		  		  NewName = NewName.ReplaceAll( "$Y", Year )		  NewName = NewName.ReplaceAll( "$R", Resolution )		  NewName = NewName.ReplaceAll( "$C", Studio )		  NewName = NewName.ReplaceAll( "$M", MPAA )		  NewName = NewName.ReplaceAll( "$#", Rating )		  		  // Check proper signage.		  If NewName.Left(1) = "." Then NewName = "•" + NewName.Right( NewName.Len - 1 )		  NewName = Trim( NewName.ReplaceAll( ",.", "."  ) )		  NewName = Trim( NewName.ReplaceAll( ":" , "- " ) )		  NewName = Trim( NewName.ReplaceAll( "()", ""   ) )		  NewName = Trim( NewName.ReplaceAll( "[]", ""   ) )		  NewName = Trim( NewName.ReplaceAll( "{}", ""   ) )		  NewName = Trim( NewName.ReplaceAll( "||", ""   ) )		  		  NewName = Trim( NewName.ReplaceAll( "≈", "$" ) )		  		  While NewName.InStr( 0, "  " ) > 0		    NewName = NewName.ReplaceAll( "  ", " " )		  Wend		  		  // Not supported on Windows		  #If NOT TargetMacOS Then		    NewName = NewName.ReplaceAll( "\", " - " )		    NewName = NewName.ReplaceAll( "/", " - " )		    NewName = NewName.ReplaceAll( "*", "x"   )		    NewName = NewName.ReplaceAll( "?", ""    )		    NewName = NewName.ReplaceAll( """", "'"  )		    NewName = NewName.ReplaceAll( "<", "{"   )		    NewName = NewName.ReplaceAll( ">", "}"   )		    NewName = NewName.ReplaceAll( "|", " "   )		    		    // Unsupported on 'ext4'. (Linux Filesystem Format)		    NewName = NewName.ReplaceAll( "½", " 1/2" )		    NewName = NewName.ReplaceAll( "½", " 1/3" )		    NewName = NewName.ReplaceAll( "½", " 2/3" )		    NewName = NewName.ReplaceAll( "½", " 1/4" )		    		    // Dunno.		    NewName = NewName.ReplaceAll( "²", "^2" )		  #EndIf		  		  NewName = Trim( NewName )		  If DottedFileName Then NewName = NewName.ReplaceAll( " ", "." )		  If NewName.Right(1) = "." Then NewName = NewName.Left( NewName.Len - 1 )		  		  // Start the actual renaming process.		  If NewName <> "" And _		    Location <> Nil and Location.Exists And _		    Destination <> Nil and Destination.Exists Then		    		    If Force And NOT Scrape.MassSearch Then dlgProgress.Add( Loc.kRenaming + ":", Location.Name + " -> " + NewName )		    		    If Prefs.integerForKey("BatchRename") = 1 Then		      		      Select Case wndMain.ppMain.Value		        		      Case 0		        		        // Rename Movie extras		        If MovieFile <> Nil and MovieFile.Exists And MovieFile.Name <> "VIDEO_TS" Then		          		          Dim MovieFiles() as FolderItem = FindMovieItems( Location )		          Dim Subtitles() as FolderItem = FindSubtitles( Location )		          Dim Part, PartOne as String		          		          For n as Integer = 0 to MovieFiles.Ubound		            If MovieFiles(n).Name <> "VIDEO_TS" Then		              Dim fName as String = MovieFiles(n).NameWithoutExtension		              		              // Multi-Part Movies		              // .section.		              If fName.inStr(0, ".cd") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,".cd" ) + 1 )		                		              ElseIf fName.InStr(0, ".part") > 0 Then		                Part = fName.Right( fName.Len - fName.InStr( 0, ".part" ) + 1 )		                		              ElseIf fName.InStr(0, ".disc") > 0 Then		                Part = fName.Right( fName.Len - fName.InStr( 0, ".disc" ) + 1 )		                		                // [section]		              ElseIf fName.InStr(0, "[cd") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"[cd" ) + 1 )		                		              ElseIf fName.InStr(0, "[part") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"[part" ) + 1 )		                		              ElseIf fName.InStr(0, "[disc") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"[disc" ) + 1 )		                		                // (section)		              ElseIf fName.InStr(0, "(cd") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"(cd" ) + 1 )		                		              ElseIf fName.InStr(0, "(part") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"(part" ) + 1 )		                		              ElseIf fName.InStr(0, "(disc") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"(disc" ) + 1 )		                		                // -section		              ElseIf fName.InStr(0, "-cd") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"-cd" ) + 1 )		                		              ElseIf fName.InStr(0, "-part") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"-part" ) + 1 )		                		              ElseIf fName.InStr(0, "-disc") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"-disc" ) + 1 )		                		                // _section		              ElseIf fName.InStr(0, "_cd") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"_cd" ) + 1 )		                		              ElseIf fName.InStr(0, "_part") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"_part" ) + 1 )		                		              ElseIf fName.InStr(0, "_disc") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0,"_disc" ) + 1 )		                		                // (1) (2)		              ElseIf fName.InStr(0, " (1)") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0," (1)" ) + 1 )		              ElseIf fName.InStr(0, " (2)") > 0 Then		                Part = fName.Right( fName.Len - fName.inStr( 0," (2)" ) + 1 )		                		              End If		              		              // Subtitles multi-dimentional loop, this stuff is fun...		              If subtitles <> Nil Then		                For t as Integer = 0 to subtitles.Ubound		                  Dim CountryFlag as String = subtitles(t).NameWithoutExtension.ReplaceAll( MovieFiles(n).NameWithoutExtension, "" )		                  If NOT Subtitles(t).Directory And Subtitles(t).Name.InStr(0, MovieFiles(n).NameWithoutExtension) > 0 Then		                    Subtitles(t).MoveFileTo( Location.Child( NewName + Part + CountryFlag + "." + Subtitles(t).NameExtension ) )		                  End If		                Next		              End If		              		              // Weather it's one or more parts, it still has to be moved!		              If n = 0 Then PartOne = Part		              MovieFiles(n).MoveFileTo( Location.Child( NewName + Part + "." + MovieFiles(n).NameExtension ) )		              		            End If		          Next		          		          If NFOFile <> Nil And NFOFile.Exists Then _		          NFOFile.MoveFileTo( Location.Child(    Prefs.textStringForKey("FileNameNFO").ReplaceAll( "<movie>", NewName + PartOne ) ) )		          		          If PosterFile <> Nil And PosterFile.Exists Then _		          PosterFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", NewName + PartOne ) ) )		          		          If FanartFile <> Nil And FanartFile.Exists Then _		          FanartFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", NewName + PartOne ) ) )		          		          If TrailerFile <> Nil And TrailerFile.Exists Then _		          TrailerFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameTrailer" ).ReplaceAll( "<movie>", NewName + PartOne ) + "." + TrailerFile.NameExtension ) )		          		        Else		          If NFOFile <> Nil And NFOFile.Exists Then _		          NFOFile.MoveFileTo( Location.Child( "movie.nfo" ) )		          		          If PosterFile <> Nil And PosterFile.Exists Then _		          PosterFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", "poster" ) ) )		          		          If FanartFile <> Nil And FanartFile.Exists Then _		          FanartFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", "fanart" ) ) )		          		          If TrailerFile <> Nil And TrailerFile.Exists Then _		          TrailerFile.MoveFileTo( Location.Child( "trailer" + "." + TrailerFile.NameExtension ) )		          		        End If // @END MovieFile.Exists AND MovieFile <> "VIDEO_TS"		        		      Case 1		        		        		      case 2		        		        		      End Select		      		      		    End If // @END BatchRename = 1		    		    // Rename Folder		    Destination = Destination.Child( NewName )		    Location.MoveFileTo( Destination )		    		    // Fix for poster thumb having been moved.		    'Dim NewNFOFile as FolderItem = FindNFOFile( Destination )		    'If NewNFOFile <> Nil And NewNFOFile.Exists Then		    MovieAttr.FolderParent = Destination		    'MsgBox MovieAttr.FolderParent.AbsolutePath		    MovieAttr.NFORead( MovieAttr.FolderParent )		    MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieAttr.FolderParent ) )		    'End If		    		  End If		  		  NewName = ""		  		  // Reload the list with the new locations.		  'wndMain.CommonActions("ReloadList")		  If wndMain.GetActiveListbox = wndMain.lstMovies Then wndMain.lstMovies.UpdateRow Lindex, Destination		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function SizeFanart() As String		  		  Select Case Prefs.integerForKey("DownloadedPosterSize")		    //  "backdrop_sizes": ["w300", "w780", "w1280", "original"],		    		  Case 0 // Original		    Return "original"		    		  Case 2 // Small		    Return "w300"		  Case 3 // Mid		    Return "w780"		  Case 4 // Large		    Return "w1280"		    		  End Select		  		  Return "original"		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function SizePoster() As String		  		  Select Case Prefs.integerForKey("DownloadedPosterSize")		    // "poster_sizes": ["w92", "w154", "w185", "w342", "w500", "original"],		    		  Case 0 // Original		    Return "original"		    		  Case 2 // Small		    Return "w154"		  Case 3 // Mid		    Return "w342"		  Case 4 // Large		    Return "w500"		    		  End Select		  		  Return "original"		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ValidJSON(Extends JSONString as String, Database as String = "") As Boolean		  Dim b as Boolean		  Dim Message as String		  		  		  // TMDB Responses		  If JSONString.InStr(0, "503 Service Unavailable") > 0 Then		    Message = "[" + Database + "] " + Loc.kError + " 503: " + Scrape.kServiceUnavailable + chr(13) + chr(13) + Loc.kPleaseTryAgainLater		    b = False		  ElseIf JSONString.InStr( 0, "Database Error" ) > 0 Or JSONString.InStr( 0, "Website is currently unreachable" ) > 0 Then		    Message = "[" + Database + "] " + Scrape.msgDatabaseError + chr(13) + chr(13) + Scrape.kConnectionError		    b = False		    		    // IMDB Responses		  ElseIf JSONString.InStr( 0, "Error getting data" ) > 0 OR _		    JSONString.InStr( 0, "Incorrect IMDB ID" ) > 0 OR _		    JSONString.InStr( 0, "The remote server returned an error: (404) Not Found." ) > 0 Then		    Message = "[" + Database + "] " + Scrape.msgIMDBApiError		    b = False		    		  ElseIf JSONString.InStr( 0, "String or binary data would be truncated." ) > 0 Then		    If DebugBuild Or App.DebugMode Then Message = "[Debug - " + Database + "] String or binary data would be truncated." + chr(13) + chr(13) + JSONString		    b = False		    		  ElseIf JSONString.InStr(0, "Unable to connect to the remote server" ) > 0 Then		    If DebugBuild Or App.DebugMode Then Message = "[Debug - " + Database + "] " + Scrape.msgDatabaseError + chr(13) + chr(13) + Scrape.kConnectionError		    b = False		    		    // Fanart.TV Responses		  ElseIf JSONString.Left(1) = "{" Or JSONString.Left(1) = "[" Then		    b = True		    		  ElseIf JSONString = "" Then		    Message = "[" + Database + "] " + Scrape.msgTMDBConnectionError.ReplaceAll("<database>", Database)' + chr(13) + chr(13) + Loc.kCheckInternetConnection		    b = False		    		  ElseIf JSONString.InStr(0, "null") > 0 And NOT ( JSONString.Left(1) = "{" Or JSONString.Left(1) = "[" ) Then		    'If DebugBuild Or App.DebugMode Then Message = "[DebugBuild: " + Database + "] " + Scrape.msgInvalidContent + ":" + chr(13) + chr(13) + JSONString		    b = False		    		  Else		    Message = "[" + Database + "] " + Scrape.msgInvalidContent + ":" + chr(13) + chr(13) + JSONString		    b = False		  End If		  		  		  // Present the result to the user and return.		  If NOT Scrape.MassSearch And Message <> "" Then		    MsgBox Message.ReplaceAll("[] ", "")		    		  ElseIf Scrape.MassSearch And Message <> "" And NOT b Then		    		    Dim Title as String = MovieAttr.Title		    If Title = "" Then Title = FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		    Scrape.UnfoundTitles.Append Title + Chr(13) + Message + chr(13) + MovieAttr.FolderParent.ShellPath.ReplaceAll("\","")		    		    If NOT Growl.Notify( Title, Message ) Then		      // NOT Growling!		      MsgBox Title + chr(13) + chr(13) + Message		    End If		    		  End If		  		  Return b		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function VideoFileExtension(Extends VideoFile as FolderItem) As String		  If VideoFile = Nil then Return ""		  		  Dim XMLContent as String = DefineEncoding( MediaInfo( VideoFile, True ), Encodings.UTF8 )		  XMLContent = ConvertEncoding( XMLContent, Encodings.ASCII )		  		  If XmlContent = "" then Return ""		  		  Dim Xml as new XmlDocument		  Dim xroot, xnode as XmlNode		  		  // MediaInfo has not been set to be an executable file.		  If XmlContent.InStr( 0, "Permission denied" ) > 0 Then Return ".flv"		  		  Xml.PreserveWhitespace = False		  Xml.LoadXml XmlContent		  		  xroot = XML.FirstChild.FirstChild.FirstChild		  		  For i as Integer = 0 to xroot.ChildCount - 1		    		    xnode = xroot.Child(i)		    		    If xnode.FirstChild <> Nil and xnode.Name = "Codec_Extensions_usually_used" then		      		      Dim Extensions() as String = xnode.FirstChild.Value.Split( " " )		      		      Return "." + Extensions(0)		    End If		    		  Next		End Function	#tag EndMethod	#tag Constant, Name = MediaInfo2JSON, Type = String, Dynamic = False, Default = \"Page;\rPage_Begin;{\"Media\": [\rPage_Middle;\rPage_End; \"ENDPAGE\" ]}\r\rFile;\rFile_Begin;\\n{ \"File\": [\\n\rFile_Middle;\rFile_End;  \"ENDFILE\" ]}\x2C\\n\r\rGeneral;      \"CompleteFileName\":\"%CompleteName%\"\x2C\\n      \"Path\":\"%FolderName%\"\x2C\\n      \"FileName\":\"%FileName%\"\x2C\\n      \"Album\":\"%Album%\"\x2C\\n      \"Performer\":\"%Performer%\"\x2C\\n      \"Genre\":\"%Genre%\"\x2C\\n      \"Extention\":\"%FileExtension%\"\x2C\\n      \"FileSize\": \"%FileSize%\"\x2C\\n      \"StreamCount\":\"%StreamCount%\"\x2C\\n      \"StreamID\": {\\n        \"%StreamKindID%\": {\\n          \"Format\":\"%Format%\"\x2C\\n          \"Duration\":\"%Duration%\"\x2C\\n          \"OverallBitRate\":\"%OverallBitRate/String%\"\\n        }\\n      }\\n\rGeneral_Begin;    { \"General\": {\\n\rGeneral_Middle;\rGeneral_End;    }}\x2C\\n\r\rVideo;      \"StreamID\": {\\n        \"%StreamKindID%\": {\\n          \"Codec\":\"%Format%\"\x2C\\n          \"BitRate_Mode\":\"%BitRate_Mode/String%\"\x2C\\n          \"BitRate\":\"%BitRate/String%\"\x2C\\n          \"StreamSize\":\"%StreamSize%\"\x2C\\n          \"FrameRate\":\"%FrameRate/String%\"\x2C\\n          \"Width\":\"%Width%\"\x2C\\n          \"Height\":\"%Height%\"\x2C\\n          \"AspectRate\":\"%DisplayAspectRatio/String%\"\\n        }\\n      }\\n\rVideo_Begin;    { \"Video\": {\\n\rVideo_Middle;\rVideo_End;    }}\x2C\\n\r\rAudio;      {       \"%StreamKindID%\": {\\n          \"Codec\":\"%Format%\"\x2C\\n          \"Duration\":\"%Duration%\"\x2C\\n          \"BitRate_Mode\":\"%BitRate_Mode/String%\"\x2C\\n          \"BitRate\":\"%BitRate/String%\"\x2C\\n          \"StreamSize\":\"%StreamSize%\"\x2C\\n          \"SamplingRate\":\"%SamplingRate%\"\x2C\\n          \"Chanals\":\"%Channel(s)%\"\\n        }\\n      }\x2C\\n\rAudio_Begin;    { \"Audio\": [\\n\rAudio_Middle;\rAudio_End;   \"ENDAUDIO\" ]}\x2C\\n\r\rText;\rText_Begin;\rText_Middle;\rText_End;\r\rChapters;\rChapters_Begin;\rChapters_Middle;\rChapters_End;\r\rImage;      \"StreamID\": {\\n        \"%StreamKindID%\": {\\n          \"Format\":\"%Format%\"\x2C\\n          \"BitDepth\":\"%BitDepth/String%\"\x2C\\n          \"Width\":\"%Width%\"\x2C\\n          \"Height\":\"%Height%\"\\n        }\\n      }\\n\rImage_Begin;    { \"Image\": {\\n\rImage_Middle;\rImage_End;    }}\x2C\\n\r\rMenu;\rMenu_Begin;\rMenu_Middle;\rMenu_End;\r", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule