#tag ModuleProtected Module ViMMCore	#tag Method, Flags = &h0		Function Articulator(ItemName as String, ItemYear as String = "") As String		  Dim b as Boolean = ItemYear <> ""		  		  // Filter out year		  If ItemName.Right(7) = " (" + ItemYear + ")" then		    ItemName = ItemName.Left( ItemName.Len - 7 )		  ElseIf ItemName.Right(5) = " " + ItemYear then		    ItemName = ItemName.Left( ItemName.Len - 5 )		  End If		  		  // English		  If ItemName.Left(4) = "The " then ItemName = ItemName.Right( ItemName.Len - 4 ) + ", The "		  If ItemName.Left(2) = "A "   then ItemName = ItemName.Right( ItemName.Len - 2 ) + ", A "		  If ItemName.Left(3) = "An "  then ItemName = ItemName.Right( ItemName.Len - 3 ) + ", An "		  		  // Nederlands		  If ItemName.Left(4) = "Het " then ItemName = ItemName.Right( ItemName.Len - 4 ) + ", Het "		  If ItemName.Left(3) = "De "  then ItemName = ItemName.Right( ItemName.Len - 3 ) + ", De "		  If ItemName.Left(4) = "Een " then ItemName = ItemName.Right( ItemName.Len - 4 ) + ", Een "		  		  If b then		    Return Trim( ItemName + " (" + ItemYear + ")" )		  Else		    Return Trim( ItemName )		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub BatchRenamer(LstBox as Listbox)		  Dim FoldersOrFiles as String = Localizable.kFolders.Lowercase		  If Prefs.integerForKey("BatchRename") = 1 Then FoldersOrFiles = Localizable.kFoldersandFiles.Lowercase		  // Check to see weather the user will go trough with this.		  If MsgDlg( wndMain, 1, Localizable.msgMassRename.ReplaceAll( "%F", FoldersOrFiles ), Localizable.kCantBeUndone, Localizable.dlgRename, Localizable.dlgCancel ) = 2 Then Return		  		  		  For i as Integer = 0 to LstBox.ListCount - 1		    		    Dim Location as FolderItem = GetFolderItem( LstBox.Cell( i, 1 ) )		    Dim Destination as FolderItem = Location.Parent		    		    // The location doesn't exist, so go to the next item.		    If Location = Nil or NOT Location.Exists Then Continue		    		    Dim NFOFile as FolderItem = FindNFOFile( Location )		    Dim MovieFile as FolderItem = FindMovieItem( Location )		    		    Dim PosterFile, FanartFile, TrailerFile, BannerFile, LogoFile, ClearArtFile, CharacterFile, LandscapeFile as FolderItem		    		    // There is no NFO file available to get data from.		    If NFOFile = Nil or NOT NFOFile.Exists Then Continue		    		    Dim NewName, Title, TitleSort, TitleOriginal, Year, Resolution, Studio, MPAA as String		    Dim DottedFileName as Boolean		    		    Select Case LstBox.Name		      		    Case "lstMovies"		      		      MovieAttr.NFORead( Location )		      NewName = Prefs.textStringForKey("RenameStringMovies")		      		      If MovieAttr.Title <> "" Then Title = MovieAttr.Title Else Title = MovieFile.Parent.Name		      If MovieAttr.TitleSort <> "" Then TitleSort = MovieAttr.TitleSort Else TitleSort = Articulator( Title )		      If MovieAttr.TitleOriginal <> "" Then TitleOriginal = MovieAttr.TitleOriginal Else TitleOriginal = Title		      If MovieAttr.DateYear > -1 Then Year = str( MovieAttr.DateYear ) Else Year = ""		      If LstBox.Cell( i, 6 ) <> "" Then Resolution = LstBox.Cell( i, 6 ) Else Resolution = ""		      If MovieAttr.Studios.Ubound > -1 Then Studio = MovieAttr.Studios(0) Else Studio = ""		      If MovieAttr.RatingMPAA <> "" Then MPAA = MovieAttr.RatingMPAA Else MPAA = ""		      DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		      		      PosterFile = FindImagePoster( Location )		      FanartFile = FindImageFanart( Location )		      TrailerFile = FindTrailerItem( Location )		      		    Case "lstTVShows"		      		      'TVAttr.NFORead( Location )		      NewName = Prefs.textStringForKey("RenameStringTVShows")		      		      // TODO: Add TV Attributes		      DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		      		      PosterFile = FindImagePoster( Location )		      FanartFile = FindImageFanart( Location )		      BannerFile = FindImageBanner( Location )		      LogoFile   = Location.Child( "Logo.png" )		      ClearArtFile = Location.Child( "ClearArt.png" )		      CharacterFile = Location.Child( "Character.png" )		      LandscapeFile = Location.Child( "landscape.jpg" )		      		    Case "lstAnime"		      		      'AnimeAttr.NFORead( Location )		      NewName = Prefs.textStringForKey("RenameStringAnime")		      		      // TODO: Add Anime Attributes		      DottedFileName = ( NewName.InStr( 0, "." ) > 0 )		      		      PosterFile = FindImagePoster( Location )		      FanartFile = FindImageFanart( Location )		      BannerFile = FindImageBanner( Location )		      LogoFile   = Location.Child( "Logo.png" )		      ClearArtFile = Location.Child( "ClearArt.png" )		      CharacterFile = Location.Child( "Character.png" )		      LandscapeFile = Location.Child( "landscape.jpg" )		      		    End Select		    		    // Set name based on attributes.		    NewName = NewName.ReplaceAll( "$T", Title.ReplaceAll("$", "≈" ) )		    NewName = NewName.ReplaceAll( "$S", TitleSort.ReplaceAll("$", "≈" ) )		    NewName = NewName.ReplaceAll( "$O", TitleOriginal.ReplaceAll( "$", "≈" ) )		    		    NewName = NewName.ReplaceAll( "$Y", Year )		    NewName = NewName.ReplaceAll( "$R", Resolution )		    NewName = NewName.ReplaceAll( "$C", Studio )		    NewName = NewName.ReplaceAll( "$M", MPAA )		    		    // Check proper signage.		    If NewName.Left(1) = "." Then NewName = "•" + NewName.Right( NewName.Len - 1 )		    NewName = Trim( NewName.ReplaceAll( ",.", "."  ) )		    NewName = Trim( NewName.ReplaceAll( ":" , "- " ) )		    NewName = Trim( NewName.ReplaceAll( "()", ""   ) )		    NewName = Trim( NewName.ReplaceAll( "[]", ""   ) )		    NewName = Trim( NewName.ReplaceAll( "{}", ""   ) )		    NewName = Trim( NewName.ReplaceAll( "||", ""   ) )		    		    NewName = Trim( NewName.ReplaceAll( "≈", "$" ) )		    		    While NewName.InStr( 0, "  " ) > 0		      NewName = NewName.ReplaceAll( "  ", " " )		    Wend		    		    // Not supported on Windows		    #If NOT TargetMacOS Then		      NewName = NewName.ReplaceAll( "\", " - " )		      NewName = NewName.ReplaceAll( "/", " - " )		      NewName = NewName.ReplaceAll( "*", "x"   )		      NewName = NewName.ReplaceAll( "?", ""    )		      NewName = NewName.ReplaceAll( """", "'"  )		      NewName = NewName.ReplaceAll( "<", "{"   )		      NewName = NewName.ReplaceAll( ">", "}"   )		      NewName = NewName.ReplaceAll( "|", " "   )		      		      // Unsupported on 'ext4'. (Linux Filesystem Format)		      NewName = NewName.ReplaceAll( "½", " 1/2" )		      NewName = NewName.ReplaceAll( "½", " 1/3" )		      NewName = NewName.ReplaceAll( "½", " 2/3" )		      NewName = NewName.ReplaceAll( "½", " 1/4" )		      		      // Dunno.		      NewName = NewName.ReplaceAll( "²", "^2" )		    #EndIf		    		    NewName = Trim( NewName )		    If DottedFileName Then NewName = NewName.ReplaceAll( " ", "." )		    If NewName.Right(1) = "." Then NewName = NewName.Left( NewName.Len - 1 )		    		    // Start the actual renaming process.		    If NewName <> "" And _		      Location <> Nil and Location.Exists And _		      Destination <> Nil and Destination.Exists Then		      		      If Prefs.integerForKey("BatchRename") = 1 Then		        		        Select Case LstBox.Name		          		        Case "lstMovies"		          		          // Rename Movie extras		          If MovieFile <> Nil and MovieFile.Exists And MovieFile.Name <> "VIDEO_TS" Then		            'If MovieFile <> Nil And MovieFile.Exists Then _		            'MovieFile.MoveFileTo( Location.Child( NewName + "." + MovieFile.NameExtension ) )		            		            Dim MovieFiles() as FolderItem = FindMovieItems( Location )		            Dim Subtitles() as FolderItem = FindSubtitles( Location )		            Dim Part, PartOne as String		            		            'If MovieFiles.Ubound > 0 Then		            		            For n as Integer = 0 to MovieFiles.Ubound		              If MovieFiles(n).Name <> "VIDEO_TS" Then		                Dim fName as String = MovieFiles(n).NameWithoutExtension		                		                // Multi-Part Movies		                If fName.inStr(0, ".cd") > 0 Then		                  Part = fName.Right( fName.Len - fName.inStr( 0,".cd" ) + 1 )		                  		                ElseIf fName.InStr(0, ".part") > 0 Then		                  Part = fName.Right( fName.Len - fName.InStr( 0, ".part" ) + 1 )		                  		                End If		                		                // Subtitles multi-dimentional loop, this stuff is fun...		                If subtitles <> Nil Then		                  For t as Integer = 0 to subtitles.Ubound		                    Dim CountryFlag as String = subtitles(t).NameWithoutExtension.ReplaceAll( MovieFiles(n).NameWithoutExtension, "" )		                    If NOT Subtitles(t).Directory And Subtitles(t).Name.InStr(0, MovieFiles(n).NameWithoutExtension) > 0 Then		                      Subtitles(t).MoveFileTo( Location.Child( NewName + Part + CountryFlag + "." + Subtitles(t).NameExtension ) )		                    End If		                  Next		                End If		                		                // Weather it's one or more parts, it still has to be moved!		                If n = 0 Then PartOne = Part		                MovieFiles(n).MoveFileTo( Location.Child( NewName + Part + "." + MovieFiles(n).NameExtension ) )		                		              End If		            Next		            		            'Else		            '		            'If MovieFile <> Nil And MovieFile.Exists Then _		            'MovieFile.MoveFileTo( Location.Child( NewName + "." + MovieFile.NameExtension ) )		            '		            'If subtitles <> Nil Then Continue		            '		            'End If		            		            		            If NFOFile <> Nil And NFOFile.Exists Then _		            NFOFile.MoveFileTo( Location.Child(    Prefs.textStringForKey("FileNameNFO").ReplaceAll( "<movie>", NewName + PartOne ) ) )		            		            If PosterFile <> Nil And PosterFile.Exists Then _		            PosterFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", NewName + PartOne ) ) )		            		            If FanartFile <> Nil And FanartFile.Exists Then _		            FanartFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", NewName + PartOne ) ) )		            		            If TrailerFile <> Nil And TrailerFile.Exists Then _		            TrailerFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameTrailer" ).ReplaceAll( "<movie>", NewName + PartOne ) + "." + TrailerFile.NameExtension ) )		            		            'Dim Subtitles() as FolderItem = FindSubtitles( Location )		            'If Subtitles <> Nil Then		            'For n as Integer = 0 to Subtitles.Ubound		            'For t as Integer = 0 to MovieFiles.Ubound		            '		            'Dim Flag as String = subtitles(n).NameWithoutExtension.ReplaceAll( MovieFiles(t).NameWithoutExtension, "" )		            'If NOT Subtitles(n).Directory And Subtitles(n).Name.instr(0, MovieFile(t).NameWithoutExtension) > 0 Then		            'subtitles(n).MoveFileTo( Subtitles(n).Parent.Child( NewName + Flag + "." + subtitles(n).NameExtension ) )		            'End If		            '		            'Next		            'Next		            'End If		            		            		          Else		            If NFOFile <> Nil And NFOFile.Exists Then _		            NFOFile.MoveFileTo( Location.Child( "movie.nfo" ) )		            		            If PosterFile <> Nil And PosterFile.Exists Then _		            PosterFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", "poster" ) ) )		            		            If FanartFile <> Nil And FanartFile.Exists Then _		            FanartFile.MoveFileTo( Location.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", "fanart" ) ) )		            		            If TrailerFile <> Nil And TrailerFile.Exists Then _		            TrailerFile.MoveFileTo( Location.Child( "trailer" + "." + TrailerFile.NameExtension ) )		            		          End If		          		          		        Case "lstTVShows"		          		          		        case "lstAnime"		          		          		        End Select		        		        		        		        		      End If		      		      // Rename Folder		      Destination = Destination.Child( NewName )		      Location.MoveFileTo( Destination )		      		      // Fix for poster thumb having been moved.		      Dim NewNFOFile as FolderItem = FindNFOFile( Destination )		      If NewNFOFile <> Nil And NewNFOFile.Exists Then		        MovieAttr.NFORead( NewNFOFile.Parent )		        MovieAttr.FolderParent = NewNFOFile.Parent		        MovieAttr.NFOWrite( NewNFOFile )		      End If		      		    End If		    		    NewName = ""		    		  Next		  		  // Reload the list with the new locations.		  wndMain.CommonActions("ReloadList")		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CacheImageDelete(Name as String)		  Dim poster, fanart as FolderItem = Preferences.fAppSupport.Child("Cache")		  If poster <> Nil and poster.Exists Then		    poster = poster.Child( Name + ".movie.poster.jpg" )		    fanart = fanart.Child( Name + ".movie.fanart.jpg" )		    		    If poster.Exists Then poster.Delete		    If fanart.Exists Then fanart.Delete		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function CacheImageLoad(Name as String) As Picture		  Dim f as FolderItem = Preferences.fAppSupport.Child("Cache").Child( Name )		  If f <> Nil and f.Exists Then Return Picture.Open( f )		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub CacheImageSet(pic as Picture, Name as String)		  Dim TheFile as FolderItem = Preferences.fAppSupport.Child("Cache").Child( Name )		  If TheFile <> Nil and TheFile.Exists Then TheFile.Delete		  If pic <> Nil and Name <> "" and Name.Left( 1 ) <> "." Then Globals.SaveImage( ScaleImage( pic, 640, 410 ), TheFile, FileTypes.ImageJpeg )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CacheImageUpdate(OldName as String, NewName as String)		  Dim TheFile as FolderItem = Preferences.fAppSupport.Child( "Cache" ).Child( OldName )		  Dim TheDestination as FolderItem = Preferences.fAppSupport.Child( "Cache" ).Child( NewName )		  		  If TheFile <> Nil and TheFile.Exists and OldName <> "" and NewName <> "" Then TheFile.MoveFileTo( TheDestination )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function FindImageBanner(BannerParent as FolderItem) As FolderItem		  For i as Integer = 1 to BannerParent.Count		    If   BannerParent.Item(i).Type = "image/jpg" or _		      BannerParent.Item(i).Type = "image/png" or _		      BannerParent.Item(i).Type = "image/tbn" then		      If BannerParent.Item(i).Name.InStr( -1, "banner" ) > 0 then Return BannerParent.Item(i)		    End If		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindImageFanart(FanartParent as FolderItem) As FolderItem		  For i as Integer = 1 to FanartParent.Count		    If   FanartParent.Item(i).Type = "image/jpg" or _		      FanartParent.Item(i).Type = "image/png" or _		      FanartParent.Item(i).Type = "image/tbn" then		      If FanartParent.Item(i).Name.InStr( -1, "fanart" ) > 0 then Return FanartParent.Item(i)		    End If		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindImagePoster(PosterParent as FolderItem) As FolderItem		  Dim MovieName as String		  Dim MovieItem as FolderItem = FindMovieItem( PosterParent )		  Dim Item as FolderItem		  		  If MovieItem <> Nil then MovieName = MovieItem.NameWithoutExtension		  		  For i as Integer = 1 to PosterParent.Count		    Item = PosterParent.Item(i)		    If   Item.Type = "image/jpg" or _		      Item.Type = "image/png" or _		      Item.Type = "image/tbn" then		      		      If   Item.Name.InStr( -1, "poster" ) > 0 or _		        Item.Name.Left(5) = "movie" or _		        Item.Name.Left(6) = "folder" or _		        Item.NameWithoutExtension = MovieName then		        Return Item		      End If		      		    End If		    Item = Nil		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindMovieItem(MovieParent as FolderItem) As FolderItem		  Dim MovieFile as FolderItem		  		  For i as Integer = 1 to MovieParent.Count		    MovieFile = MovieParent.Item(i)		    		    If MovieFile.Type = "video/any" then		      		      If MovieFile <> Nil And MovieFile.Visible = True And NOT MovieFile.Directory And _		        MovieFile.Name.InStr( -1, "trailer" ) = 0 And _		        MovieFile.Name.InStr( -1, "sample" )  = 0 And _		        MovieFile.Name.InStr( -1, "[Bonus" )  = 0 then		        Return MovieFile		      End If		      		    ElseIf MovieFile.Name = "VIDEO_TS" And MovieFile.Directory Then		      Return MovieFile		    End If		    		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindMovieItems(MovieParent as FolderItem) As FolderItem()		  Dim MovieFile, MovieFiles() as FolderItem		  		  For i as Integer = 1 to MovieParent.Count		    MovieFile = MovieParent.Item(i)		    		    If MovieFile.Type = "video/any" then		      		      If MovieFile <> Nil And MovieFile.Visible = True And NOT MovieFile.Directory And _		        MovieFile.Name.InStr( -1, "trailer" ) = 0 And _		        MovieFile.Name.InStr( -1, "sample" )  = 0 And _		        MovieFile.Name.InStr( -1, "[Bonus" )  = 0 then		        MovieFiles.Append MovieFile		      End If		      		    ElseIf MovieFile.Name = "VIDEO_TS" Then		      MovieFiles.Append MovieFile		    End If		    		  Next		  		  Return MovieFiles		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindMovieName(MovieParent as FolderItem, Filter as Boolean = False, UseFileName as Boolean = False) As String		  Dim MovieFile as FolderItem = FindMovieItem( MovieParent )		  Dim MovieName as String		  		  If MovieFile = Nil then MovieFile = MovieParent		  If MovieFile = Nil or NOT MovieFile.Exists then Return ""		  		  If UseFileName then		    If MovieFile.Name = "VIDEO_TS" then MovieName = MovieParent.name Else MovieName = MovieFile.NameWithoutExtension		  Else		    MovieName = MovieParent.Name		  End If		  		  If Filter then		    Dim i as Integer = -1		    		    i = MovieName.InStr( -1, "720p" )		    If i <= 0 then i = MovieName.InStr( -1, "1080p" )		    If i <= 0 then i = MovieName.InStr( -1, "xvid"  )		    If i <= 0 then i = MovieName.InStr( -1, "divx"  )		    If i <= 0 then i = MovieName.InStr( -1, "x264"  )		    If i <= 0 then i = MovieName.InStr( -1, "AC3"   )		    If i <= 0 then i = MovieName.InStr( -1, "DTS"   )		    If i  > 0 then MovieName = MovieName.Left( i - 1 )		    		    MovieName = MovieName.ReplaceAll( ".", " " )		    		    MovieName = MovieName.ReplaceAll( " - ", "  " )		    MovieName = MovieName.ReplaceAll( "- ",  ": "  )		    MovieName = MovieName.ReplaceAll( "-",   " "    )		    MovieName = MovieName.ReplaceAll( "  ", " - "   )		    		    MovieName = MovieName.ReplaceAll( "x264", "" )		    MovieName = MovieName.ReplaceAll( "AC3",  "" )		    MovieName = MovieName.ReplaceAll( "DTS",  "" )		    		    MovieName = MovieName.ReplaceAll( "xvid", "" )		    MovieName = MovieName.ReplaceAll( "divx", "" )		    		    MovieName = MovieName.ReplaceAll( "DVD-Rip",    "" )		    MovieName = MovieName.ReplaceAll( "BR-Rip",     "" )		    MovieName = MovieName.ReplaceAll( "BluRay-Rip", "" )		    MovieName = MovieName.ReplaceAll( "-Rip",       "" )		    		    MovieName = MovieName.ReplaceAll( "DVDrip",  "" )		    MovieName = MovieName.ReplaceAll( "DVD rip", "" )		    MovieName = MovieName.ReplaceAll( "DVD",     "" )		    MovieName = MovieName.ReplaceAll( "BluRay",  "" )		    MovieName = MovieName.ReplaceAll( "brrip",   "" )		    MovieName = MovieName.ReplaceAll( "bdrip",   "" )		    MovieName = MovieName.ReplaceAll( "460p",    "" )		    MovieName = MovieName.ReplaceAll( "720p",    "" )		    MovieName = MovieName.ReplaceAll( "1080p",   "" )		    		    MovieName = MovieName.ReplaceAll( "unrated",        "" )		    MovieName = MovieName.ReplaceAll( "uncut",          "" )		    MovieName = MovieName.ReplaceAll( "Directors Cut",  "" )		    MovieName = MovieName.ReplaceAll( "Director's Cut", "" )		    MovieName = MovieName.ReplaceAll( "Extended Cut",   "" )		    		    MovieName = MovieName.ReplaceAll( "()", "" )		    		    If MovieName.Left(1)  = "[" then MovieName = MovieName.Right( MovieName.Len - MovieName.InStr( -1, "]") - 1 )		    If MovieName.Right(1) = "]" then MovieName = MovieName.Left(  MovieName.Len - MovieName.InStr( -1, "[") - 1 )		    		    If MovieName.InStr( 0, "[" ) > 5 Then MovieName = MovieName.Left( MovieName.InStr( 0, "[" ) - 1 )		    'If MovieName.InStr( 0, "(" ) > 5 Then MovieName = MovieName.Left( MovieName.InStr( 0, "(" ) - 1 )		    		    While MovieName.InStr( -1, "  " ) > 0		      MovieName = MovieName.ReplaceAll( "  ", " " )		    Wend		    		    'MovieName = Titlecase( MovieName )		  End If		  		  Return Trim( MovieName )		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindNFOFile(NFOParent as FolderItem) As FolderItem		  Dim MovieName as String		  Dim MovieItem as FolderItem = FindMovieItem( NFOParent )		  		  If MovieItem <> Nil and MovieItem.Exists then MovieName = MovieItem.NameWithoutExtension		  If MovieItem <> Nil and MovieItem.Name = "VIDEO_TS" then NFOParent = MovieItem		  		  For i as integer = 1 to NFOParent.Count		    If NFOParent.Item(i).Type = "special/nfo" then		      If   NFOParent.Item(i).Name = "movie.nfo" or _		        NFOParent.Item(i).Name = "tvshow.nfo" or _		        NFOParent.Item(i).Name = "VIDEO_TS.nfo" or _		        NFOParent.Item(i).Name = MovieName + ".nfo" then		        Return NFOParent.Item(i)		      End If		    End If		  Next		  		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindSubtitles(SubtitleParent as FolderItem) As FolderItem()		  Dim Subtitles() as FolderItem		  		  For i as Integer = 1 to SubtitleParent.Count		    If SubtitleParent.Item(i).Type = "special/subtitle" or SubtitleParent.Item(i).Name = "Subs" Then Subtitles.Append SubtitleParent.Item(i)		  Next		  If Subtitles.Ubound > -1 Then Return Subtitles Else Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FindTrailerItem(TrailerParent as FolderItem) As FolderItem		  If TrailerParent = Nil or NOT TrailerParent.Exists then Return Nil		  For i as Integer = 1 to TrailerParent.Count		    If TrailerParent.Item(i).Name.InStr( 0, "trailer" ) > 0 then Return TrailerParent.Item(i)		  Next		  Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FlagLanguage(Language As String) As String		  select case language		    		    // Full length language name to abbriviation		  case "American English"		    Return "en"		  case "UK English"		    Return "en-gb"		  case "Nederlands"		    Return "nl"		  case "Dansk"		    Return "da"		  case "Suomeksi"		    Return "fi"		  case "Deutsch"		    Return "de"		  case "Italiano"		    Return "it"		  case "Español"		    Return "es"		  case "Français"		    Return "fr"		  case "Polski"		    Return "pl"		  case "Magyar"		    Return "hu"		  case "Ελληνικά" // Greece		    Return "el"		  case "Türkçe" // Turkish		    Return "tr"		  case "русский язык" // Russian		    Return "ru"		  case "עברית" // Hebrew		    Return "he"		  case "日本語" // Japanese		    Return "ja"		  case "Português"		    Return "pt"		  case "中文" // Chinese / Mandarin		    Return "zh"		  case "čeština"		    Return "cs"		  case "Slovenski"		    Return "sl"		  case "Hrvatski"		    Return "hr"		  case "한국어" // Korean		    Return "ko"		  case "Norsk"		    Return "no"		    		    // And in reverse!		  case "en"		    Return "American English"		  case "en-gb"		    Return "UK English"		  case "nl"		    Return "Nederlands"		  case "da"		    Return "Dansk"		  case "fi"		    Return "Suomeksi"		  case "de"		    Return "Deutsch"		  case "it"		    Return "Italiano"		  case "es"		    Return "Español"		  case "fr"		    Return "Français"		  case "pl"		    Return "Polski"		  case "hu"		    Return "Magyar"		  case "el" // Greece		    Return "Ελληνικά"		  case "tr" // Turkish		    Return "Türkçe"		  case "ru" // Russian		    Return "русский язык"		  case "he" // Hebrew		    Return "עברית"		  case "ja" // Japanese		    Return "日本語"		  case "pt"		    Return "Português"		  case "zh" // Chinese / Mandarin		    Return "中文"		  case "cs" // Czech		    Return "čeština"		  case "sl"		    Return "Slovenski"		  case "hr"		    Return "Hrvatski"		  case "ko" // Korean		    Return "한국어"		  case "no"		    Return "Norsk"		    		  end Select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function icon(Extends f as FolderItem, size as Integer) As Picture		  Dim pic as Picture		  If f <> nil and f.Exists then		    pic      = f.IconImageMBS ( size )		    If Pic <> Nil then pic.Mask = f.IconMaskMBS  ( size )		    Return pic		  Else		    Return Nil		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Int2Month(Month as Integer) As String		  Select case Month		    		  case 1		    Return "Jan"		  case 2		    Return "Feb"		  case 3		    Return "Mar"		  case 4		    Return "Apr"		  case 5		    Return "May"		  case 6		    Return "Jun"		  case 7		    Return "Jul"		  case 8		    Return "Aug"		  case 9		    Return "Sep"		  case 10		    Return "Okt"		  case 11		    Return "Nov"		  case 12		    Return "Dec"		    		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub MassClean(LstBox as Listbox, Mode as String)		  		  Dim FolderParent as FolderItem		  		  For i as Integer = 0 to LstBox.ListCount - 1		    		    Dim NFOFile, Poster, Fanart, Banner, ExtraThumbs, CharacterArt, ClearArt, Logo, TVThumb, ThemeSong, Trailer, folderjpg as FolderItem = Nil		    Dim IMDBID as String = LstBox.Cell( i, 2 )		    		    FolderParent = GetFolderItem( LstBox.Cell( i, 1 ) )		    		    NFOFile      = FindNFOFile( FolderParent )		    		    		    Poster       = FindImagePoster( FolderParent )		    Fanart       = FindImageFanart( FolderParent )		    ExtraThumbs  = FolderParent.Child("extrathumbs")		    Trailer      = FindTrailerItem( FolderParent )		    		    Banner       = FindImageBanner( FolderParent )		    Logo         = FolderParent.Child("logo.png")		    TVThumb      = FolderParent.Child("landscape.jpg")		    ClearArt     = FolderParent.Child("clearart.png")		    CharacterArt = FolderParent.Child("characterart.png")		    ThemeSong    = FolderParent.Child("theme.mp3")		    		    folderjpg    = FolderParent.Child("folder.jpg")		    		    If Mode = "All" or Mode = "Metadata" Then		      If NFOFile      <> Nil and NFOFile.Exists      then NFOFile.Delete		    End If		    		    If Mode = "All" or Mode = "Images" Then		      		      CacheImageDelete( IMDBID )		      		      If Poster       <> Nil and Poster.Exists       Then Poster.Delete		      If Fanart       <> Nil and Fanart.Exists       Then Fanart.Delete		      If ExtraThumbs  <> Nil and ExtraThumbs.Exists  Then		        		        // These images are stubborn!? Try 10x to remove them all.		        For t as Integer = 0 to 10		          For n as Integer = 1 to ExtraThumbs.Count Step 1		            ExtraThumbs.Item(n).Delete		          Next		        Next		        		        ExtraThumbs.Delete		      End If		      		      If Banner       <> Nil and Banner.Exists       Then Banner.Delete		      If Logo         <> Nil and Logo.Exists         Then Logo.Delete		      If TVThumb      <> Nil and TVThumb.Exists      Then TVThumb.Delete		      If ClearArt     <> Nil and ClearArt.Exists     Then ClearArt.Delete		      If CharacterArt <> Nil and CharacterArt.Exists Then CharacterArt.Delete		      		      If folderjpg    <> Nil and folderjpg.Exists    Then folderjpg.Delete		    End If		    		    If Mode = "All" or Mode = "Media" Then		      If Trailer      <> Nil and Trailer.Exists      Then Trailer.Delete		      If ThemeSong    <> Nil and ThemeSong.Exists    Then ThemeSong.Delete		    End If		    		  Next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MassMovies2Folders(LstBox as Listbox)		  Dim FileLocation, Paths() as FolderItem		  Dim FolderName as String		  		  If LstBox = wndMain.lstMovies then		    Dim Dict as Dictionary = Prefs.dictionaryForKey("MoviePaths")		    		    // Get Movie Paths		    If Dict = Nil then Return		    For Each Key as Variant in Dict.Keys		      Paths.Append GetFolderItem( Trim( Dict.Value( Key ) ) )		    Next		    If Paths.Ubound = -1 then Return		    		    // Get Movie Items		    For f as Integer = 0 to Paths.Ubound		      		      If Paths(f).Exists then		        For i as Integer = 1 to Paths(f).Count		          If Paths(f).Item(i).Type = "video/any" then		            FileLocation = Paths(f).Item(i)		            		            FolderName = FileLocation.NameWithoutExtension		            // FolderName = FolderName.ReplaceAll( ".", " " )		            Paths(f).Child( FolderName ).CreateAsFolder		            FileLocation.MoveFileTo Paths(f).Child( FolderName )		            		          End If		        Next		      End If		      		    Next		    		    wndMain.lstMovies.CreateList		    // TODO: Sort TV Show episodes.		    		  End If		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function MediaInfo(VideoFile as FolderItem, Full as Boolean = False) As String		  // Download latest version:		  // http://mediainfo.sourceforge.net/en/Download/Mac_OS		  		  #If TargetMacOS then		    Dim MediaInfo As FolderItem = app.ExecutableFile.Parent.Parent.Child("Resources").Child("mediainfo")		    If MediaInfo <> Nil and MediaInfo.Exists and _		      VideoFile <> Nil And VideoFile.Exists then		      'Dim i as integer = Ticks		      Dim sh As New Shell		      If Full then		        sh.Execute( MediaInfo.ShellPath + " --output=XML --Full " + VideoFile.ShellPath )		      Else		        sh.Execute( MediaInfo.ShellPath + " --output=XML " + VideoFile.ShellPath )		      End If		      if App.DebugMode then		        		      end if		      Return sh.Result		    End If		  #EndIf		  		  Return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Minutes2Hours(Extends TotalMinutes as Integer) As String		  Dim Hours   as Integer = Floor( TotalMinutes / 60 )		  Dim Minutes as Integer =        TotalMinutes - ( Hours * 60 )		  		  Dim strRuntime as String		  		  If TotalMinutes >= 60 and TotalMinutes < 120 then		    strRuntime = str( Hours ) + Localizable.kHourAnd  + str( Minutes ) + Localizable.kMinutes		  ElseIf TotalMinutes >= 120 then		    strRuntime = str( Hours ) + Localizable.kHoursAnd + str( Minutes ) + Localizable.kMinutes		  Else		    strRuntime = str( TotalMinutes ) + Localizable.kMinutes		  End If		  		  Return strRuntime		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Month2Int(Month as String) As String		  Select case Month		    		  case "Jan"		    Return "01"		  case "Feb"		    Return "02"		  case "Mar"		    Return "03"		  case "Apr"		    Return "04"		  case "May"		    Return "05"		  case "Jun"		    Return "06"		  case "Jul"		    Return "07"		  case "Aug"		    Return "08"		  case "Sep"		    Return "09"		  case "Okt"		    Return "10"		  case "Nov"		    Return "11"		  case "Dec"		    Return "12"		    		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function MPAA2Logo(MPAA As String) As Picture		  // American English		  Dim Lang as String = Prefs.textStringForKey("DBLanguage")		  		  select case MPAA		    		  case "Rated G"		    Return Rating_G		  case "Rated PG"		    If NOT StrComp(Lang, "en-gb", 1) = 0 Then Return Rating_PG		  case "Rated PG-13"		    Return Rating_PG13		  case "Rated NC-17"		    Return Rating_NC17		  case "Rated R"		    Return Rating_R		    		  case "Rated TV-G"		    Return Rating_TVG		  case "Rated TV-PG"		    Return Rating_TVPG		  case "Rated TV-14"		    Return Rating_TV14		  case "Rated TV-MA"		    Return Rating_TVMA		    		  case "Rated TV-Y7"		    Return Rating_TVY7		  case "Rated TV-Y"		    Return Rating_TVY		  case "Rated TV-Y7FV"		    Return Rating_TVY7FV		    		  end select		  		  // UK English		  Select case MPAA		    		  case "Rated Uc"		    Return Rating_UKUc		  case "Rated U"		    Return Rating_UKU		  case "Rated PG"		    Return Rating_UKPG		  case "Rated 12A"		    Return Rating_UK12A		  case "Rated 12"		    Return Rating_UK12		  case "Rated 15"		    Return Rating_UK15		  case "Rated 18"		    Return Rating_UK18		  case "Rated R18"		    Return Rating_UKR18		    		  End Select		  		  // Dutch		  Select case MPAA		    		  case "Kijkwijzer: AL"		    Return Rating_NLAL		  case "Kijkwijzer: 6"		    Return Rating_NL6		  case "Kijkwijzer: 9"		    Return Rating_NL9		  case "Kijkwijzer: 12"		    Return Rating_NL12		  case "Kijkwijzer: 16"		    Return Rating_NL16		    		  End Select		  		  		  // German		  Select case MPAA		    		  case "FSK 0"		    Return Rating_FSK0		  case "FSK 6"		    Return Rating_FSK6		  case "FSK 12"		    Return Rating_FSK12		  case "FSK 16"		    Return Rating_FSK16		  case "FSK 18"		    Return Rating_FSK18		    		  End Select		  		  // French		  Select case MPAA		    		  Case "Classement: U"		    Return Rating_FRU		  Case "Classement: 10"		    Return Rating_FR10		  Case "Classement: 12"		    Return Rating_FR12		  Case "Classement: 16"		    Return Rating_FR16		  Case "Classement: 18"		    Return Rating_FR18		    		  End Select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function MPAA2Ratings(MPAA as String) As String		  select case MPAA		    		  case "Rated G"		    Return "General Audiences. All ages admitted"		    		  case "Rated PG"		    Return "Parental Guidance Suggested. Some material may not be suitable for children"		    		  case "Rated PG-13"		    Return "Parents Strongly Cautioned. Some material may not be appropriate for children under 13"		    		  case "Rated R"		    Return "Restricted. Under 17 requires accompanying parent or adult guardian"		    		  case "Rated NC-17"		    Return "No One 17 and under admitted"		    		  case "NR"		    Return "Unrated"		    		  end select		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function PriorArtFound(FolderParent as FolderItem) As Boolean		  Dim Poster, Fanart, Banner, ClearArt, CharacterArt, Logo, TVThumb as Boolean		  		  Poster = FindImagePoster( FolderParent ) <> Nil		  Fanart = FindImageFanart( FolderParent ) <> Nil		  Banner = FindImageBanner( FolderParent ) <> Nil		  		  ClearArt     = FolderParent.Child( "clearart.png" ).Exists		  CharacterArt = FolderParent.Child( "character.png" ).Exists		  Logo         = FolderParent.Child( "logo.png" ).Exists		  TVThumb      = FolderParent.Child( "landscape.jpg" ).Exists		  		  If Poster or Fanart or Banner or ClearArt or CharacterArt or Logo or TVThumb then		    Return True		  Else		    Return False		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub qMassRenamer(LstBox as Listbox)		  // Are you sure you want to rename your ##?		  Dim Foldes as String = Localizable.kFolders.Lowercase		  If Prefs.integerForKey("BatchRename") = 1 Then Foldes = Localizable.kFoldersandFiles.Lowercase		  If MsgDlg( wndMain, 1, Localizable.msgMassRename.ReplaceAll( "%F", Foldes ), Localizable.kCantBeUndone, Localizable.dlgOK, Localizable.dlgCancel ) = 2 Then Return		  		  // Then do your thing!		  Dim FolderName, MovieFileName, Title, TitleOriginal, TitleSort, Year, Resolution, Studio as String		  Dim Location, Destination, NFOFile, MovieFile, RenameFiles() as FolderItem		  Dim Dotty as Boolean		  		  For i as Integer = 0 to LstBox.ListCount - 1		    		    Location    = GetFolderItem( LstBox.Cell( i, 1 ) )		    Destination = GetFolderItem( LstBox.Cell( i, 1 ) ).Parent		    		    NFOFile   = FindNFOFile( Location )		    MovieFile = FindMovieItem( Location )		    		    If NFOFile <> Nil and NFOFile.Exists then		      		      Select Case wndMain.ppMain.Value		        		      Case 0		        MovieAttr.NFORead( Location )		        FolderName = Prefs.textStringForKey("RenameStringMovies")		        		        Title         = MovieAttr.Title		        TitleSort     = MovieAttr.TitleSort		        TitleOriginal = MovieAttr.TitleOriginal		        Year          = str( MovieAttr.DateYear )		        Resolution    = LstBox.Cell( i, 6 )		        If MovieAttr.Studios.Ubound > -1 Then		          Studio        = MovieAttr.Studios(0)		        Else		          Studio      = ""		        End If		        Dotty         = ( FolderName.InStr( 0, "." ) > 0 )		        		        ReDim RenameFiles(-1)		        		        If Prefs.integerForKey("BatchRename") = 1 and MovieFile <> Nil Then		          MovieFileName = MovieFile.NameWithoutExtension		          		          For n as Integer = 1 to Location.Count		            		            If Location.Item(n) <> Nil and _		              Location.Item(n).Exists and _		              Location.Item(n).NameWithoutExtension.InStr( 0, MovieFileName ) > 0 Then		              RenameFiles.Append Location.Item(n)		              'MsgBox RenameFiles( RenameFiles.Ubound ).Name		            End If		            		          Next		          		          		        End If		        		      case 1		        'TVAttr.NFORead( Location )		        FolderName = Prefs.textStringForKey("RenameStringTVShows")		        		        Title = ""		        TitleSort = ""		        TitleOriginal = ""		        Year = ""		        Resolution = ""		        Studio = ""		        Dotty = ( FolderName.InStr( 0, "." ) > 0 )		        FolderName = FolderName.ReplaceAll( ".", " " )		        		      case 2		        		        		      End Select		      		      FolderName = FolderName.ReplaceAll( "$T", Title )		      FolderName = FolderName.ReplaceAll( "$S", TitleSort )		      FolderName = FolderName.ReplaceAll( "$O", TitleOriginal )		      FolderName = FolderName.ReplaceAll( "$Y", Year )		      FolderName = FolderName.ReplaceAll( "$R", Resolution )		      FolderName = FolderName.ReplaceAll( "$C", Studio )		      		      If FolderName.Left(1) = "." then FolderName = FolderName.Replace(".", "•")		      FolderName = Trim( FolderName.ReplaceAll( ",.", "." ) )		      FolderName = Trim( FolderName.ReplaceAll( ":",  "- " ) )		      FolderName = Trim( FolderName.ReplaceAll( "()", "" )  )		      FolderName = Trim( FolderName.ReplaceAll( "[]", "" )  )		      FolderName = Trim( FolderName.ReplaceAll( "{}", "" )  )		      FolderName = Trim( FolderName.ReplaceAll( "||", "" )  )		      'FolderName = Trim ( FolderName.ReplaceAll( ".", " " ) )		      		      While FolderName.InStr( 0, "  " ) > 0		        FolderName = FolderName.ReplaceAll( "  ", " " )		      Wend		      		      // Not supported in windows		      #If NOT TargetMacOS then		        FolderName = FolderName.ReplaceAll( "\",  " - " )		        FolderName = FolderName.ReplaceAll( "/",  " - " )		        FolderName = FolderName.ReplaceAll( "*",  "x"   )		        FolderName = FolderName.ReplaceAll( "?",  ""    )		        FolderName = FolderName.ReplaceAll( """", "'"   )		        FolderName = FolderName.ReplaceAll( "<",  "}"   )		        FolderName = FolderName.ReplaceAll( ">",  "{"   )		        FolderName = FolderName.ReplaceAll( "|",  " "   )		      #EndIf		      		      FolderName = Trim( FolderName )		      If Dotty Then FolderName = FolderName.ReplaceAll( " ", "." )		      'If FolderName.Right(1) = "." Then FolderName = FolderName.Left(  FolderName.Len - 1 )		      If FolderName.Left(1)  = "." Then FolderName = FolderName.Right( FolderName.Len - 1 )		      		      If FolderName <> "" And _		        Location    <> Nil And Location.Exists And _		        Destination <> Nil And Destination.Exists then		        		        // Rename Files		        If Prefs.integerForKey("BatchRename") = 1 and MovieFileName <> "" Then		          For t as Integer = 0 to RenameFiles.Ubound		            RenameFiles(t).MoveFileTo( Location.Child( ReplaceAll( RenameFiles(t).Name, MovieFileName, FolderName ) ) )		          Next		        End If		        		        // Rename Folders		        Destination = Destination.Child( FolderName )		        Location.MoveFileTo( Destination )		        		        // Fix poster thumb		        Dim NewNFOFile as FolderItem = FindNFOFile( Destination )		        If NewNFOFile <> Nil And NewNFOFile.Exists Then		          MovieAttr.NFORead( NewNFOFile.Parent )		          MovieAttr.FolderParent = NewNFOFile.Parent		          MovieAttr.NFOWrite( NewNFOFile )		        End If		      End If		      		    End If		    		    FolderName = ""		    		  Next		  		  If LstBox = wndMain.lstMovies then wndMain.lstMovies.CreateList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function VideoFileExtension(Extends VideoFile as FolderItem) As String		  If VideoFile = Nil then Return ""		  		  Dim XMLContent as String = MediaInfo( VideoFile, True )		  		  If XmlContent = "" then Return ""		  		  Dim Xml as new XmlDocument		  Dim xroot, xnode as XmlNode		  		  Xml.PreserveWhitespace = False		  Xml.LoadXml XmlContent		  		  xroot = XML.FirstChild.FirstChild.FirstChild		  		  For i as Integer = 0 to xroot.ChildCount - 1		    		    xnode = xroot.Child(i)		    		    If xnode.FirstChild <> Nil and xnode.Name = "Codec_Extensions_usually_used" then		      		      Dim Extensions() as String = xnode.FirstChild.Value.Split( " " )		      		      Return "." + Extensions(0)		    End If		    		  Next		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule