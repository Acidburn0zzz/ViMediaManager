#tag ModuleProtected Module IMDb	#tag Method, Flags = &h0		Function GetIMDbJSON(TitleID as String, Short as Boolean = False) As JSONItem		  If TitleID = "" Then Return Nil		  		  Dim Sckt as New HTTPSocket		  Sckt.Yield = True		  Dim IMDbJSON as New JSONItem		  Dim HTML as String		  		  Dim rand as New Random		  Dim IP as String = Str( rand.InRange(0,255) ) + "." + Str( rand.InRange(0,255) ) + "." + Str( rand.InRange(0,255) ) + "." + Str( rand.InRange(0,255) )		  Sckt.SetRequestHeader( "httpheader", "REMOTE_ADDR: " + IP )		  Sckt.SetRequestHeader( "User-agent", "Mozilla/" + Str( rand.InRange(3,5) ) + "." + Str( rand.InRange(0,3) ) + " (Windows NT " + Str( rand.InRange(3,5) ) + "." + Str( rand.InRange(0,2) ) + "; rv:2.0.1) Gecko/20100101 Firefox/" + Str( rand.InRange(3,5) ) + ".0.1" )		  		  		  If TitleID.Left(2) = "tt" Then		    HTML = Trim( DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://akas.imdb.com/title/" + Trim( TitleID ) + "/", 60 ), Encodings.UTF8 ) ) ).ReplaceAll("\n", EndOfLine)		    Sckt.Close		    		    		    If HTML.InStr( 0, "The document has moved" ) > 0 Then		      Dim NewID as String = match( "The document has moved <A HREF=""(.*?)""", HTML, 1 )		      Dim NewHTML as String = Trim( DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( NewID, 60 ), Encodings.UTF8 ) ) ).ReplaceAll("\n", EndOfLine)		      		      If NewHTML <> "" Then HTML = NewHTML		    End If		    		    		    If HTML.InStr( 0, "<meta name=""application-name"" content=""IMDb"" />" ) = 0 Then		      If NOT Growl.Notify( "IMDb Search", "No title found on IMDb! [" + TitleID + "]" ) Then		        If DebugBuild Then MessageBox "No title found on IMDb!" + chr(13) + chr(13) + TitleID		      End If		      Return Nil		    End If		    		    		  Else		    HTML = Sckt.Get( "http://www.google.com/search?q=imdb+" + EncodingToURLMBS( Trim( TitleID ) ), 60 )		    Dim ID as String = match( "http:\/\/www.imdb.com\/title\/(tt\d+).*?"".*?>.*?<\/a>", HTML, 1 )		    		    If ID.Left(2) = "tt" Then		      Return GetIMDbJSON( ID )		    Else		      MessageBox "No title found on google!" + chr(13) + chr(13) + TitleID		      Return Nil		    End If		    		  End If		  		  IMDbJSON.Compact = False		  IMDbJSON.IndentSpacing = 2		  Dim EmptyArray() as String		  		  		  IMDbJSON.Value("TITLE_ID")        = Trim( match( "<link rel=""canonical"" href=""http:\/\/www.imdb.com\/title\/(tt\d+)\/"" \/>", HTML, 1 ) )		  IMDbJSON.Value("TITLE")           = Trim( match( "<title>(IMDb \- )*(.*?) \(.*?<\/title>", HTML, 2 ) )		  IMDbJSON.Value("ORIGINAL_TITLE")  = Trim( match( "class=""title-extra"">(.*?)</", HTML, 1 ) )		  IMDbJSON.Value("USA_TITLE")       = ""		  IMDbJSON.Value("AKA")             = Trim( match( "Also Known As.?:<\/h4>(.*?)(<span|<\/div)", HTML, 1 ) )		  IMDbJSON.Value("ALSO_KNOWN_AS")   = ValueArray( EmptyArray )		  		  IMDbJSON.Value("YEAR")            = Trim( match( "<title>.*?\(.*?(\d{4}).*?\).*?<\/title>", HTML, 1 ) )		  IMDbJSON.Value("RELEASE_DATE")    = match( "Release Date:<\/h4>.*?([0-9][0-9]? (January|February|March|April|May|June|July|August|September|October|November|December) (19|20)[0-9][0-9]).*?(\(|<span)", HTML, 1 )		  IMDbJSON.Value("RELEASE_DATES")   = ValueArray( EmptyArray )		  		  HTML = HTML.ReplaceAll( HTML.MyMid("<head>", "</head>"), "" ).ReplaceAll("<head></head>", "")		  IMDbJSON.Value("RUNTIME")         = match( "Runtime:<\/h4>.*?(\d+) min.*?<\/div>", HTML, 1 )		  If IMDbJSON.Value("RUNTIME")      = "" Then IMDbJSON.Value("RUNTIME") = Trim( match( "infobar.*?(\d+) min.*?<\/div>", HTML, 1 ) )		  		  IMDbJSON.Value("TOP_250")         = match( "Top 250 #(\d+)<", HTML, 1 )		  IMDbJSON.Value("RATING")          = Trim( match("ratingValue"">(\d.\d)<", HTML, 1 ) )		  IMDbJSON.Value("VOTES")           = match("ratingCount"">(\d+,?\d*)<\/span>", HTML, 1 )		  IMDbJSON.Value("MPAA_RATING")     = Trim( match( "<span itemprop=""contentRating"">(.*?)(<\/span>|<a)", HTML, 1 ) )		  IMDbJSON.Value("CERTIFICATIONS")  = ValueArray( EmptyArray )		  IMDbJSON.Value("OSCARS")          = match( "Won (\d+) Oscars.", HTML, 1 )		  IMDbJSON.Value("AWARDS")          = match("(\d+) wins", HTML, 1 )		  IMDbJSON.Value("NOMINATIONS")     = match("(\d+) nominations", HTML, 1 )		  		  IMDbJSON.Value("GENRES")          = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "Genre.?:(.*?)(<\/div>|See more)",   HTML, 1 ) ) )		  		  IMDbJSON.Value("TAGLINE")         = match( "Tagline.?:<\/h4>(.*?)(<span|<\/div)", HTML, 1 )		  IMDbJSON.Value("TAGLINES")        = ValueArray( EmptyArray )		  IMDbJSON.Value("PLOT")            = RemoveTags( match( "<p itemprop=""description"">(.*?)(<\/p>|<a)", HTML, 1 ) )		  IMDbJSON.Value("STORYLINE")       = RemoveTags( match("Storyline<\/h2>(.*?)(<em|<\/p>|<span)", HTML, 1 ).ReplaceAll( "<p>", "" ) )		  IMDbJSON.Value("STORYLINES")      = ValueArray( EmptyArray )		  		  IMDbJSON.Value("DIRECTORS")       = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "Director.?:(.*?)(<\/div>|>.?and )", HTML, 1 ) ) )		  IMDbJSON.Value("WRITERS")         = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "Writer.?:(.*?)(<\/div>|>.?and )",   HTML, 1 ) ) )		  IMDbJSON.Value("STARS")           = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "Stars:(.*?)(<\/div>|<span>\|)",     HTML, 1 ) ) )		  IMDbJSON.Value("CAST")            = ValueArray( MatchArray( match_all( "<td class=""name"">(.*?)<\/td>", HTML ), "<a.*?>(.*?)<\/a>" ) )		  IMDbJSON.Value("ROLES")           = ValueArray( MatchArray( match_all( "<td class=""character"">(.*?)<\/td>", HTML ), "<a.*?>(.*?)<\/a>" ) )		  IMDbJSON.Value("CASTTHUMBS")      = ValueArray( MatchArray( match_all( "<td class=""primary_photo"">(.*?)<\/td>", HTML ), "<noscript><img.*src=""(.*?)"".*\/><\/noscript>" ) )		  For i as Integer = 0 to IMDbJSON.Child("CASTTHUMBS").Count -1		    IMDbJSON.Child("CASTTHUMBS").Value(i) = RegExThis( IMDbJSON.Child("CASTTHUMBS").Value(i), "_V1\..*?.jpg", "_V1._SY750.jpg" )		  Next		  		  IMDbJSON.Value("LANGUAGE")        = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "Language.?:(.*?)(<\/div>|>.?and )", HTML, 1 ) ) )		  IMDbJSON.Value("COUNTRY")         = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "Country:(.*?)(<\/div>|>.?and )", HTML, 1 ) ) )		  IMDbJSON.Value("STUDIOS")         = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "Production Co:(.*?)(<\/div>|See more)", HTML, 1 ) ) )		  		  IMDbJSON.Value("RECOMMENDATIONS") = ValueArray( EmptyArray )		  		  IMDbJSON.Value("POSTER")          = match("img_primary"">.*?<img src=""(.*?)"".*?<\/td>", HTML, 1 )		  IMDbJSON.Value("POSTER_LARGE")    = ""		  IMDbJSON.Value("POSTER_SMALL")    = ""		  IMDbJSON.Value("POSTER_FULL")     = ""		  If IMDbJSON.Value("POSTER") <> "" Then		    IMDbJSON.Value("POSTER_LARGE")  = RegExThis( IMDbJSON.Value("POSTER"), "_V1\..*?.jpg", "_V1._SY500.jpg" )		    IMDbJSON.Value("POSTER_SMALL")  = RegExThis( IMDbJSON.Value("POSTER"), "_V1\..*?.jpg", "_V1._SY150.jpg" )		    IMDbJSON.Value("POSTER_FULL")   = RegExThis( IMDbJSON.Value("POSTER"), "_V1\..*?.jpg", "_V1._SY0.jpg" )		  End If		  		  IMDbJSON.Value("MEDIA_IMAGES")    = ValueArray( EmptyArray )		  		  		  		  If NOT Short Then		    		    // Also Known as & Release INFO		    Dim ReleaseInfoHTML as String = DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://www.imdb.com/title/" + TitleID + "/releaseinfo", 60 ), Encodings.UTF8 ) )		    Sckt.Close		    		    Dim AKATableRows() as String = match_all( "<tr>(.*?)<\/tr>", match( "Also Known As(.*?)<\/table>", ReleaseInfoHTML, 1 ) )		    Dim AKAS() as String		    Dim USATitle as String		    For i as Integer = 0 to AKATableRows.Ubound		      Dim NameCountry() as String = match_all( "<td>(.*?)<\/td", AKATableRows(i) )		      If NameCountry.Ubound > -1 And NameCountry(1).InStr( 0, "USA" ) > 0 Then		        USATitle = NameCountry(0)		        AKAS.Append NameCountry(0) + " = " + NameCountry(1)		      End If		    Next		    IMDbJSON.Value("ALSO_KNOWN_AS") = ValueArray( AKAS )		    IMDbJSON.Value("USA_TITLE") = USATitle		    		    Dim DateTableRows() as String = match_all( "<tr>(.*?)<\/tr>", match( "Date<\/th><\/tr>(.*?)<\/table>", ReleaseInfoHTML ) )		    Dim Dates() as String		    For i as Integer = 0 to DateTableRows.Ubound		      Dim Country as String = match( "<a.*?>(.*?)<\/a>", match( "<td><b>(.*?)<\/b><\/td>", DateTableRows(i) ), 1 )		      Dim Date() as String = match_all( "<a.*?>(.*?)<\/a>", match( "<td align=""right"">(.*?)<\/td>", DateTableRows(i) ) )		      If Date.Ubound < 0 Then		        Dates.Append match( "<td align=""right"">(.*?)<\/td>", DateTableRows(i), 1 ) + " = " + Country		      Else		        Dates.Append Date(0) + ", " + Date(1) + " = " + Country		      End If		    Next		    IMDbJSON.Value("RELEASE_DATES") = ValueArray( Dates )		    		    		    // Storylines		    Dim StoryLinesHTML as String = DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://www.imdb.com/title/" + TitleID + "/plotsummary", 60 ), Encodings.UTF8 ) )		    Sckt.Close		    IMDbJSON.Value("STORYLINES") = ValueArray( match_all( "<p class=""plotpar"">(.*?)(<i>|<a)", StoryLinesHTML ) )		    If IMDbJSON.Child("STORYLINES").Count > 0 Then IMDbJSON.Value("STORYLINE") = IMDbJSON.Child("STORYLINES").Value(0)		    		    // Taglines		    Dim TagLinesHTML as String = DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://www.imdb.com/title/" + TitleID + "/taglines", 60 ), Encodings.UTF8 ) )		    Dim Tags() as String = match_all( "<p>(.*?)<\/p><hr", TagLinesHTML )		    IMDbJSON.Value("TAGLINES")  = ValueArray( match_all( "<p>(.*?)<\/p><hr", TagLinesHTML ) )		    If IMDbJSON.Child("TAGLINES").Count >= 1 Then IMDbJSON.Child("TAGLINES").Remove(0)		    		    		    // Recommended Titles		    Dim JSONString as String = DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://www.imdb.com/widget/recommendations/_ajax/get_more_recs?specs=p13nsims%3A" + TitleID, 60 ), Encodings.UTF8 ) )		    Dim Recommendations as New JSONItem		    Recommendations.Load JSONString		    If Recommendations.HasName("recommendations") Then Recommendations = Recommendations.Child("recommendations")		    		    Dim RecIDs(), RecTitles(), Recs() as String		    For i as Integer = 0 to Recommendations.Count -1		      RecIDs.Append    Recommendations.Child(i).Value("tconst")		      RecTitles.Append match( "title=""(.*?)""", Recommendations.Child(i).Value("content"), 1 )		      		      Recs.Append      RecTitles(i) + " [" + RecIDs(i) + "]"		    Next		    IMDbJSON.Value("RECOMMENDATIONS") = ValueArray( Recs )		    		    // Media Images		    Dim MediaImagesHTML as String = DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://www.imdb.com/title/"  + TitleID + "/mediaindex", 60 ), Encodings.UTF8 ) )		    Dim links as String = match( "<div class=""thumb_list"" style=""font-size: 0px;"">(.*?)<\/div>", MediaImagesHTML, 1 )		    Dim images() as String = match_all( "src=""(.*?)""", links )		    IMDbJSON.Value("MEDIA_IMAGES") = ValueArray( images )		    		    For i as Integer = 0 to IMDbJSON.Child("MEDIA_IMAGES").Count -1		      IMDbJSON.Child("MEDIA_IMAGES").Value(i) = RegExThis( IMDbJSON.Child("MEDIA_IMAGES").Value(i), "_V1\..*?.jpg", "_V1._SY0.jpg" )		    Next		    		    		    // Full Cast		    Dim FullCastHTML as String = DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://www.imdb.com/title/" + TitleID + "/fullcredits", 60 ), Encodings.utf8 ) )		    IMDbJSON.Value("CAST")            = ValueArray( MatchArray( match_all( "<td class=""nm"">(.*?)<\/td>", FullCastHTML ), "<a.*?>(.*?)<\/a>" ) )		    IMDbJSON.Value("ROLES")           = ValueArray( match_all( "<td class=""char"">(.*?)<\/td>", FullCastHTML ) )'<a.*?>(.*?)<\/a>" ) )		    IMDbJSON.Value("CASTTHUMBS")      = ValueArray( MatchArray( match_all( "<td class=""hs"">(.*?)<\/td>", FullCastHTML ), "<img.*src=""(.*?)"".*><\/a" ) )		    		    For i as Integer = 0 to IMDbJSON.Child("ROLES").Count -1		      If IMDbJSON.Child("ROLES").Value(i).Instr( 0, "<a" ) > 0 Then		        IMDbJSON.Child("ROLES").Value(i) = match( "<a.*?>(.*?)<\/a>", IMDbJSON.Child("ROLES").Value(i), 1 )		      End If		    Next		    		    For i as Integer = 0 to IMDbJSON.Child("CASTTHUMBS").Count -1		      IMDbJSON.Child("CASTTHUMBS").Value(i) = RegExThis( IMDbJSON.Child("CASTTHUMBS").Value(i), "_V1\..*?.jpg", "_V1._SY512.jpg" )		    Next		    		    // Certification		    Dim CertificationHTML as String = DecodingFromHTMLMBS( DefineEncoding( Sckt.Get( "http://www.imdb.com/title/" + TitleID + "/parentalguide", 60 ), Encodings.UTF8 ) )		    IMDbJSON.Value("CERTIFICATIONS") = ValueArray( match_all( "<a.*?>(.*?)<\/a>", match( "<div class=""info-content"">(.*?)<\/div>", CertificationHTML, 1 ) ) )		    		    		    dim s as String		  End If		  		  		  Return IMDbJSON		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function match(SrchPattern as String, Source as String, i as Integer = 0) As String		  Dim rg as New RegEx		  Dim myMatch as RegExMatch		  rg.Options.DotMatchAll = True		  rg.SearchPattern = SrchPattern		  myMatch = rg.search( Source )		  		  		  If myMatch <> Nil Then		    Return Trim( myMatch.SubExpressionString(i) )		  Else		    Return ""		  End if		  		Exception err as RegExException		  MsgBox err.message		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function MatchArray(Arry() as String, SrchPattern as String, i as Integer = 1) As String()		  Dim Arr() as String		  For each value as Variant in Arry		    Arr.Append Trim( match( SrchPattern, value, i ) )		  Next		  Return Arr		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function match_all(SrchPattern as String, Source as String) As String()		  // RegEx		  Dim myRegEx As new RegEx		  Dim myMatch As RegExMatch		  myRegEx.Options.TreatTargetAsOneLine = True		  myRegEx.Options.DotMatchAll = True		  myRegEx.SearchPattern = SrchPattern		  myRegEx.ReplacementPattern = ""		  		  		  Dim Results() as String		  		  // Pop up all matches one by one		  myMatch = myRegEx.Search( Source )		  While myMatch <> Nil		    		    Results.Append Trim( myMatch.SubExpressionString(1) )		    		    Source = myRegEx.Replace( Source )		    myMatch = myRegEx.Search()		  Wend		  		  Return Results		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function RemoveTags(Text as String) As String		  		  Return RegExThis( Text, "<.*?<\/.*?>", "" )		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ValueArray(Values() as String) As JSONItem		  If Values <> Nil Then		    Dim Daddy as New JSONItem		    For i as Integer = 0 to Values.Ubound		      Daddy.Value(i) = Values(i)		    Next		    		    Return Daddy		  End If		  		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule