#tag ClassProtected Class MovieScktInherits HTTPSocket	#tag Event		Sub Error(code as integer)		  SocketError( code, Me )		  		Exception err as NilObjectException		  Me.Close		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub GetArt(ID as String, Name as String)		  Dim Sckt as New MovieSckt		  Dim JSONString as String		  Dim Pic as Picture		  		  Dim Lang as String = Prefs.textStringForKey("DBLanguage")		  If Lang.InStr( 0, "en" ) > 0 Then Lang = "en"		  		  Dim Count as Integer = 1		  If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		  		  // TMDB Art		  'If Prefs.boolForKey("AutoDownloadPoster") Or _		  'Prefs.boolForKey("AutoDownloadFanart") Or _		  'Prefs.boolForKey("AutoDownloadExtraThumbs") Or _		  'Prefs.boolForKey("AutoDownloadExtraFanart") Then		  		  dlgProgress.Update( Loc.kDownloading + ":", "[TMDB] " + Name + " - " + Loc.kReadingInfo + "...", Count ) // 2		  JSONString = Sckt.Get( Sckt.URL("MovieImages", ID ), Prefs.integerForKey("TimeOut") )		  Sckt.Close		  		  Dim JSON as New JSONItem		  If JSONString.ValidJSON("TMDB-Art") Then JSON.Load JSONString Else Return		  Dim URL as String		  		  		  Dim PosterLoc, FanartLoc as FolderItem		  PosterLoc = MovieAttr.DestinationPoster( MovieAttr.FolderParent )		  FanartLoc = MovieAttr.DestinationFanart( MovieAttr.FolderParent )		  		  		  // Posters		  'If Prefs.boolForKey("AutoDownloadPoster") And		  If JSON.HasName("posters") and JSON.Child("posters").Count > 0 Then		    ReDim MovieAttr.ART_PosterURLs(-1)		    ReDim MovieAttr.ART_PosterDimensions(-1)		    ReDim MovieAttr.ART_PosterThumbURLs(-1)		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    		    For i as Integer = 0 to JSON.Child("posters").Count - 1		      Dim jItem as New JSONItem		      jItem = JSON.Child("posters").Child(i)		      		      If ( jItem.Value("iso_639_1") = Lang Or jItem.Value("iso_639_1") = "" ) And jItem.Value("file_path") <> "" And URL = "" Then URL = jItem.Value("file_path")		      		      // Re-Populate the NFO thumbs		      MovieAttr.ART_PosterURLs.Append       URLbase_image + "original" + jItem.Value("file_path")		      MovieAttr.ART_PosterDimensions.Append jItem.Value("width") + "x" + jItem.Value("height")		      MovieAttr.ART_PosterThumbURLs.Append  URLbase_image + "w92" + jItem.Value("file_path")		      		    Next		    		    // Download first image		    If Prefs.boolForKey("AutoDownloadPoster") And PosterLoc <> Nil and NOT PosterLoc.Exists and URL <> "" Then		      dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kDefaultPoster.Lowercase, Count ) // 3		      MovieAttr.ART_Poster = URL2Picture( URLbase_image + SizePoster + URL, PosterLoc.NameWithoutExtension, PosterLoc.NameExtension, MovieAttr.FolderParent )		      CacheImageSet( MovieAttr.ART_Poster, ".movie.poster.jpg" )		    End If		    URL = ""		  End If		  		  		  // Backdrops		  'If Prefs.boolForKey("AutoDownloadFanart") And		  If JSON.HasName("backdrops") and JSON.Child("backdrops").Count > 0 Then		    ReDim MovieAttr.ART_FanartURLs(-1)		    ReDim MovieAttr.ART_FanartDimensions(-1)		    ReDim MovieAttr.ART_FanartThumbURLs(-1)		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    		    Dim ExtraThumbs as FolderItem = MovieAttr.FolderParent.Child("extrathumbs")		    Dim ExtraFanart as FolderItem = MovieAttr.FolderParent.Child("extrafanart")		    		    For i as Integer = 0 to JSON.Child("backdrops").Count - 1		      Dim jItem as new JSONItem		      jItem = JSON.Child("backdrops").Child(i)		      		      If ( jItem.Value("iso_639_1") = Lang Or jItem.Value("iso_639_1") = "" ) And jItem.Value("file_path") <> "" And URL = "" Then URL = jItem.Value("file_path")		      		      // Re-Populate the NFO Backdrops		      MovieAttr.ART_FanartURLs.Append       URLbase_image + "original" + jItem.Value("file_path")		      MovieAttr.ART_FanartDimensions.Append jItem.Value("width") + "x" + jItem.Value("height")		      MovieAttr.ART_FanartThumbURLs.Append  URLbase_image + "w300" + jItem.Value("file_path")		      		      If Prefs.boolForKey("AutoDownloadExtraThumbs") Then		        		        dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kExtraThumbs + " && " + Loc.kExtraFanarts + "...", Count ) 'Str(i + 1) + Loc.k1of2 + Str( JSON.Child("backdrops").Count ) + " " + Loc.kThumb + " && " + Loc.kFanart + " " + Loc.kImages.Lowercase + "...", Count ) // 4		        dlgProgress.Debug Str(i + 1) + Loc.k1of2 + Str( JSON.Child("backdrops").Count ) + " " + Loc.kThumb + " && " + Loc.kFanart + " " + Loc.kImages.Lowercase		        If NOT ExtraThumbs.Exists Then ExtraThumbs.CreateAsFolder		        		        Pic = URL2Picture( URLbase_image + "w300" + jItem.Value("file_path"), "thumb" + Str(i), "jpg", ExtraThumbs )		        Pic = Nil		      End If		      		      		      If Prefs.boolForKey("AutoDownloadExtraFanart") Then		        		        dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kExtraThumbs + " && " + Loc.kExtraFanarts  + "...", Count )'Str(i + 1) + Loc.k1of2 + Str( JSON.Child("backdrops").Count ) + " " + Loc.kThumb + " && " + Loc.kFanart + " " + Loc.kImages.Lowercase + "...", Count ) // 4		        dlgProgress.Debug Str(i + 1) + Loc.k1of2 + Str( JSON.Child("backdrops").Count ) + " " + Loc.kThumb + " && " + Loc.kFanart + " " + Loc.kImages.Lowercase		        If NOT ExtraFanart.Exists Then ExtraFanart.CreateAsFolder		        		        Pic = URL2Picture( URLbase_image + "original" + jItem.Value("file_path"), "fanart" + Str(i), "jpg", ExtraFanart )		        Pic = Nil		      End If		      		    Next		    dlgProgress.Debug ""		    		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    		    // Download first image		    If Prefs.boolForKey("AutoDownloadFanart") And FanartLoc <> Nil and NOT FanartLoc.Exists And URL <> "" Then		      dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kDefaultFanart, Count ) // 5		      MovieAttr.ART_Fanart = URL2Picture( URLbase_image + SizeFanart + URL, FanartLoc.NameWithoutExtension, FanartLoc.NameExtension, MovieAttr.FolderParent )		      CacheImageSet( MovieAttr.ART_Fanart, ".movie.fanart.jpg")		    End If		    URL = ""		  End If		  		  'End If		  		  		  JSONString = ""		  		  // Fanart.TV Art		  If Prefs.boolForKey("AutoDownloadClearArt") Or _		    Prefs.boolForKey("AutoDownloadLogo") Or _		    Prefs.boolForKey("AutoDownloadDiscArt") Or _		    Prefs.boolForKey("AutoDownloadThumb") Or _		    Prefs.boolForKey("AutoDownloadBanner") Then		    		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    		    dlgProgress.Update( Loc.kDownloading + ":", "[Fanart.TV] " + Name + " - " + Loc.kReadingInfo + "...", -1 ) // 6		    JSONString = sckt.Get( "http://fanart.tv/webservice/movie/" + MovieCore.ApiKey_FanartTV + "/" + ID + "/json/all/1/2/", Prefs.integerForKey("TimeOut") )		    sckt.Close		    		    Dim FirstBracketLoc as Integer = JSONString.InStr( 2, "{" )		    JSONString = JSONString.Right( JSONString.Len - FirstBracketLoc + 1)		    		    Dim JSONFanartTV as New JSONItem		    If JSONString.ValidJSON("Fanart.TV") Then JSONFanartTV.Load JSONString		    		    		    URL = ""		    		    // ClearArt		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kDefaultClearArt, Count ) // 7		    		    If Prefs.boolForKey("AutoDownloadClearArt") And _		      ( JSONFanartTV.HasName("movieart") or JSONFanartTV.HasName("hdmovieart") ) And _		      NOT MovieAttr.FolderParent.Child("clearart.png").Exists Then		      Dim ClearArt as New JSONItem		      If JSONFanartTV.HasName("movieart")   Then ClearArt = JSONFanartTV.Child("movieart")		      If JSONFanartTV.HasName("hdmovieart") Then ClearArt = JSONFanartTV.Child("hdmovieart")		      		      For i as Integer = 0 to ClearArt.Count - 1		        If ClearArt.Child(i).Value("lang") = Lang Then		          URL = ClearArt.Child(i).Value("url")		          Exit		        Else		          If URL = "" Then URL = ClearArt.Child(i).Value("url")		        End If		      Next		      		      MovieAttr.ART_ClearArt = URL2Picture( URL, "clearart", "png", MovieAttr.FolderParent )		    End If		    		    URL = ""		    		    // ClearLogo		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kDefaultLogo, Count ) // 8		    		    If Prefs.boolForKey("AutoDownloadLogo") And _		      ( JSONFanartTV.HasName("movielogo") Or JSONFanartTV.HasName("hdmovielogo") ) And _		      NOT MovieAttr.FolderParent.Child("logo.png").Exists Then		      Dim ClearLogo as New JSONItem		      If JSONFanartTV.HasName("movielogo") Then ClearLogo = JSONFanartTV.Child("movielogo")		      If JSONFanartTV.HasName("hdmovielogo") Then ClearLogo = JSONFanartTV.Child("hdmovielogo")		      		      For i as Integer = 0 to ClearLogo.Count - 1		        If ClearLogo.Child(i).Value("lang") = Lang Then		          URL = ClearLogo.Child(i).Value("url")		          Exit		        Else		          If URL = "" Then URL = ClearLogo.Child(i).Value("url")		        End If		      Next		      		      MovieAttr.ART_Logo = URL2Picture( URL, "logo", "png", MovieAttr.FolderParent )		    End If		    		    URL = ""		    		    // ClearDisc		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kDefaultDiscArt, Count ) // 9		    		    If Prefs.boolForKey("AutoDownloadDiscArt") And _		      JSONFanartTV.HasName("moviedisc") And NOT MovieAttr.FolderParent.Child("disc.png").Exists Then		      Dim Disc as New JSONItem		      Disc = JSONFanartTV.Child("moviedisc")		      		      For i as Integer = 0 to Disc.Count - 1		        If Disc.Child(i).Value("lang") = Lang Then		          URL = Disc.Child(i).Value("url")		          Exit		        Else		          If URL = "" Then URL = Disc.Child(i).Value("url")		        End If		      Next		      		      MovieAttr.ART_Disc = URL2Picture( URL, "disc", "png", MovieAttr.FolderParent )		      'CacheImageSet( MovieAttr.ART_Disc, MovieAttr.ID_IMDB + ".movie.disc.png" )		    End If		    		    URL = ""		    		    // Banner		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kDefaultBanner, Count ) // 10		    Dim f as FolderItem = FindImageBanner( MovieAttr.FolderParent )		    		    If Prefs.boolForKey("AutoDownloadBanner") And _		      JSONFanartTV.HasName("moviebanner") And ( f = Nil or NOT f.Exists ) Then		      Dim Banner as New JSONItem		      If JSONFanartTV.HasName("moviebanner") Then Banner = JSONFanartTV.Child("moviebanner")		      		      For i as Integer = 0 to Banner.Count - 1		        If Banner.Child(i).Value("lang") = Lang Then		          URL = Banner.Child(i).Value("url")		          Exit		        Else		          If URL = "" Then URL = Banner.Child(i).Value("url")		        End If		      Next		      		      MovieAttr.ART_Banner = URL2Picture( URL, "banner", "jpg", MovieAttr.FolderParent )		    End If		    		    URL = ""		    		    // Thumb		    If MovieCore.MassSearch Then Count = -1 Else Count = Count + 1		    dlgProgress.Update( Loc.kDownloading + ":", Name + " - " + Loc.kDefaultThumb, Count ) // 11		    		    If Prefs.boolForKey("AutoDownloadThumb") And _		      JSONFanartTV.HasName("moviethumb") And NOT MovieAttr.FolderParent.Child("landscape.jpg").Exists Then		      Dim Thumb as New JSONItem		      If JSONFanartTV.HasName("moviethumb") Then Thumb = JSONFanartTV.Child("moviethumb")		      		      For i as Integer = 0 to Thumb.Count - 1		        If Thumb.Child(i).Value("lang") = Lang Then		          URL = Thumb.Child(i).Value("url")		          Exit		        Else		          If URL = "" Then URl = Thumb.Child(i).Value("url")		        End If		      Next		      		      MovieAttr.ART_Thumb = URL2Picture( URL, "landscape", "jpg", MovieAttr.FolderParent )		      'CacheImageSet( MovieAttr.ART_Thumb, MovieAttr.ID_IMDB + ".movie.thumb.jpg" )		    End If		    		    URL = ""		    JSONFanartTV = Nil		  End If		  		  JSON = Nil		  		  'Return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetMovieNFO(ID as String, Update as Boolean = False)		  Dim JSONString as String		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  		  Dim r as New Random		  Dim webkit as Double = r.InRange( 452, 536 )		  Dim Mozila as Integer = r.InRange( 5, 16 )		  sckt.SetRequestHeader( "User-agent", "Mozilla/" + Str( Mozila ) + ".0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/" + Str( webkit ) + ".0 (KHTML, like Gecko) Version/" + Str( Mozila ) + ".0 Safari/8536.25" )		  		  // Temporary save		  Dim PrevTitle, PrevTitleSort, PrevTitleOriginal, PrevGenres(), PrevSet, PrevSetOrder as String		  Dim PrevWatchedStatus as Boolean = MovieAttr.StatusWatched		  		  If Update Then		    PrevTitle         = MovieAttr.Title		    PrevTitleSort     = MovieAttr.TitleSort		    PrevTitleOriginal = MovieAttr.TitleOriginal		    For i as Integer = 0 to MovieAttr.Genres.Ubound		      PrevGenres.Append MovieAttr.Genres(i)		    Next		    		    PrevSet = MovieAttr.Set		    PrevSetOrder = Str( MovieAttr.SetOrder )		  End If		  		  MovieAttr.ClearProperties		  		  If Update Then		    MovieAttr.Set = PrevSet		    MovieAttr.SetOrder = Val( PrevSetOrder )		    MovieAttr.StatusWatched = PrevWatchedStatus		  End If		  		  If NOT MovieCore.MassSearch Then dlgProgress.Reset		  		  // ---- Gathering Information.		  Dim Lang as String = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 )		  Dim TimeOut as Integer = Prefs.integerForKey("TimeOut") /2' / 4		  		  // General Info		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.mTabSummary + " " + Loc.mTabInfo.Lowercase + "...", 1, 19 ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "..." // 3		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieInfo", ID, "en" ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  // Is TMDB valid?		  Dim TMDBValid as Boolean = NOT ( JSONString.InStr( 0, "Invalid id - The pre-requisite id is invalid or not found" ) > 0 )		  		  Dim MovieInfo as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - Info") Then		    MovieInfo.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  Else		    If TMDBValid Then Return		  End If		  		  JSONString = ""		  		  // ## TMDB Localized Info		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "Localized " + Loc.mTabInfo.Lowercase + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "...." // 3		  If TMDBValid Then JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieInfo", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim LocalMovieInfo as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - Localized Info") Then LocalMovieInfo.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  		  JSONString = ""		  		  // ## TMDB Alternative Titles		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "Alternative Titles " + Loc.mTabInfo + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "....." // 4		  If TMDBValid Then JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieAlternativeTitles", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim AlternativeTitles as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - Alternative Titles") Then AlternativeTitles.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  		  JSONString = ""		  		  // ## TMDB Cast		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.mTabPeople + " " + Loc.mTabInfo.Lowercase + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "......" // 5		  If TMDBValid Then JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieCast", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Cast as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - Cast") Then		    Cast.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  Else		    If TMDBValid Then Return		  End If		  		  JSONString = ""		  		  // ## TMDB Images		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kImages.Titlecase + " " + Loc.mTabInfo.Lowercase + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "......." // 6		  If TMDBValid Then JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieImages", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Images as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - " + Loc.kImages) Then		    Images.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  Else		    If TMDBValid Then Return		  End If		  		  JSONString = ""		  		  // ## TMDB Releases		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "Releases " + Loc.mTabInfo.Lowercase + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "........" // 7		  If TMDBValid Then JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieReleases", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Releases as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - Releases") Then		    Releases.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  Else		    If TMDBValid Then Return		  End If		  		  JSONString = ""		  		  // ## TMDB Trailers		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kTrailers + " " + Loc.mTabInfo.Lowercase + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "........." // 8		  If TMDBValid Then JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieTrailers", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Trailers as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - Trailers") Then Trailers.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  		  JSONString = ""		  		  		  // ## TMDB Recommendations		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kRecMovies + " " + Loc.mTabInfo.Lowercase + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + ".........." // 9		  If TMDBValid Then JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieRecommendations", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Recommendations as New JSONItem		  If TMDBValid And JSONString.ValidJSON("TMDB - Recommendations") Then Recommendations.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  		  JSONString = ""		  		  // Process Page 1 results		  If Recommendations.HasName("results") And Recommendations.Count > 0 Then		    For i as Integer = 0 to Recommendations.Child("results").Count - 1		      Dim jItem as New JSONItem		      If Recommendations.Child("results").Value(i) = Nil Then Continue		      jItem = Recommendations.Child("results").Child(i)		      		      MovieAttr.RecMovies.Append    jItem.Value("title")		      MovieAttr.RecMoviesIDs.Append jItem.Value("id")		    Next		  End If		  		  // Get the other pages		  If Recommendations.HasName("total_pages") Then		    Dim Page as Integer = Recommendations.Value("total_pages")		    		    For i as Integer = 2 to Recommendations.Value("total_pages")		      JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieRecommendations", ID, Lang, i ), TimeOut ), Encodings.UTF8 )		      sckt.Close		      		      Dim RecommendedPage as New JSONItem		      If TMDBValid And JSONString.ValidJSON("TMDB - " + Loc.kRecMovies) Then RecommendedPage.Load( ConvertEncoding( JSONString, Encodings.UTF8 ) )		      		      JSONString = ""		      		      // Process other page results		      If RecommendedPage.HasName("results") And RecommendedPage.Count > 0 Then		        		        For n as Integer = 0 to RecommendedPage.Child("results").Count - 1		          Dim jItem as New JSONItem		          jItem = RecommendedPage.Child("results").Child(n)		          		          MovieAttr.RecMovies.Append    jItem.Value("title")		          MovieAttr.RecMoviesIDs.Append jItem.Value("id")		        Next		        		      End If		      		    Next		    		  End If		  		  		  		  // ## IMDb		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "IMDb " + Loc.mTabInfo.Lowercase + "..." ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.mTabInfo.Lowercase + "..........." // 10		  If ID.Left(2) = "tt" Then		    JSONString = Trim( IMDBjson( ID ) )		  Else		    JSONString = Trim( IMDBjson( MovieInfo.Value("imdb_id") ) )		  End If		  		  If JSONString.Left(1) <> "{" Then		    Dim sx1 as Integer = JSONString.InStr( 0, "{" )		    If sx1 > 0 Then JSONString = JSONString.Right( JSONString.Len - sx1 + 1 )		  End If		  		  Dim IMDBNew as New JSONItem		  If JSONString.ValidJSON( "IMDB New" ) Then IMDBNew.Load DecodingFromHTMLMBS( JSONString.ReplaceAll("&#x27;","'").ReplaceAll("&#x22;","\""").ReplaceAll("&#x26;","&") )		  		  JSONString = ""		  		  		  // ## IMDB top250		  #If TargetLinux Then		    If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "IMDb Top250 " + Loc.mTabInfo.Lowercase + "..." ) // 11		    JSONString = DefineEncoding( sckt.Get( "http://250.s-anand.net/data/MariusTh86@gmail.com/seen", TimeOut ), Encodings.UTF8 )		    sckt.Close		    		    Dim Top250 as New JSONItem		    If JSONString.ValidJSON( "IMDb Top250" ) Then Top250.Load ConvertEncoding( JSONString, Encodings.UTF8 )		    		    JSONString = ""		  #EndIf		  		  // ## Rotten Tomatoes		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "RottenTomatoes " + Loc.mTabInfo.Lowercase + "..." ) // 11		  If ID.Left(2) = "tt" Then		    JSONString = DefineEncoding( sckt.Get( URL( "TomatoesMovieAlias", ID.ReplaceAll("tt", "") ), TimeOut ), Encodings.UTF8 )		  ElseIf MovieInfo.HasName("imdb_id") Then		    JSONString = DefineEncoding( sckt.Get( URL( "TomatoesMovieAlias", MovieInfo.Value("imdb_id").ReplaceAll("tt", "") ), TimeOut ), Encodings.UTF8 )		  End If		  sckt.Close		  		  Dim FirstBracketLoc as Integer = JSONString.InStr(0, "{" )		  JSONString = Trim( JSONString.Right( JSONString.Len - FirstBracketLoc + 1) )		  		  Dim TomatoesInfo as New JSONItem		  If JSONString.ValidJSON("Rotten Tomatoes") Then TomatoesInfo.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  		  JSONString = ""		  		  // ## FanartTV		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownload + ":", "Fanart.TV " + Loc.mTabInfo.Lowercase + "..." ) // 12		  		  Dim FanartTVJSON as New JSONItem		  If Prefs.boolForKey("AutoDownloadClearArt") Or Prefs.boolForKey("AutoDownloadLogo") Or Prefs.boolForKey("AutoDownloadDiscArt") Then		    // http://fanart.tv/webservice/movie/apikey/imdb-tmdb_id[|id2|id3]/format/type/sort/limit/		    JSONString = DefineEncoding( sckt.Get( "http://fanart.tv/webservice/movie/" + MovieCore.ApiKey_FanartTV + "/" + ID + "/json/all/1/2/", TimeOut ), Encodings.UTF8 )		    sckt.Close		    		    FirstBracketLoc = JSONString.InStr(2, "{" )		    JSONString = Trim( JSONString.Right( JSONString.Len - FirstBracketLoc + 1) )		    		    If JSONString.ValidJSON("FanartTV") Then FanartTVJSON.Load JSONString		  End If		  		  JSONString = ""		  		  // ----- Process Information		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kReadingInfo + ":", FindMovieName( MovieAttr.FolderParent ) ) Else dlgProgress.Debug Loc.kProcessing + " " + Loc.mTabInfo.Lowercase + "..."  // 13		  		  If Lang = "en-gb" Then Lang = "GB"		  If Lang.InStr( 0, "en" ) > 0 Then Lang = "US" Else Lang = Lang.Uppercase		  Dim IMDBEnabled as Boolean = ( ( ID.Left(2) = "tt" Or MovieInfo.Value("imdb_id") <> "" ) And IMDBNew.ToString <> "" And IMDBNew.ToString <> "{}" )		  		  		  // ## ID's		  If MovieInfo.HasName("imdb_id") Then		    MovieAttr.ID_IMDB = MovieInfo.Value("imdb_id")		    		  ElseIf IMDBNew.HasName("TITLE_ID") Then		    MovieAttr.ID_IMDB = IMDBNew.Value("TITLE_ID")		  End If		  If MovieInfo.HasName("id") Then MovieAttr.ID_TMDB = MovieInfo.Value("id")		  If TomatoesInfo.HasName("id") Then MovieAttr.ID_RottenTomatoes = TomatoesInfo.Value("id")		  		  // ## Title		  If Update Then MovieAttr.Title = PrevTitle // Don't update title		  If MovieAttr.Title = "" And IMDBNew.HasName("TITLE")        And  Lang <> "US" Then MovieAttr.Title = IMDBNew.Value("TITLE")		  If MovieAttr.Title = "" And LocalMovieInfo.HasName("title") Then MovieAttr.Title = LocalMovieInfo.Value("title") // Localized		  If MovieAttr.Title = "" And MovieInfo.HasName("title")      Then MovieAttr.Title = MovieInfo.Value("title") // U.S. Backup		  		  // ## Localized Title		  If ( NOT ( Lang = "US" ) Or NOT Lang.InStr(0, "en") > 0 ) And AlternativeTitles.HasName("titles") Then		    		    For i as Integer = 0 To AlternativeTitles.Child("titles").Count - 1		      Dim jItem as New JSONItem		      jItem = AlternativeTitles.Child("titles").Child(i)		      If jItem.Value("iso_3166_1") = Lang and jItem.Value("title") <> "" Then		        MovieAttr.Title = jItem.Value("title")		        Exit		      End If		    Next		    		  End If		  		  		  // ## Original Title		  If Update Then MovieAttr.TitleOriginal = PrevTitleOriginal		  If MovieAttr.TitleOriginal = "" And IMDBNew.HasName("ORIGINAL_TITLE")   And IMDBNew.Value("ORIGINAL_TITLE")   <> "" Then MovieAttr.TitleOriginal = IMDBNew.Value("ORIGINAL_TITLE")		  'If MovieAttr.TitleOriginal = "" And MovieInfo.HasName("original_title") And MovieInfo.Value("original_title") <> "" Then MovieAttr.TitleOriginal = MovieInfo.Value("original_title")		  If MovieAttr.TitleOriginal = "" And IMDBNew.HasName("TITLE")            And IMDBNew.Value("TITLE")            <> "" Then MovieAttr.TitleOriginal = IMDBNew.Value("TITLE")		  If MovieAttr.TitleOriginal = "" And MovieAttr.Title <> "" Then MovieAttr.TitleOriginal = MovieAttr.Title		  If MovieAttr.TitleOriginal <> "" And MovieAttr.Title = "" THen MovieAttr.Title = MovieAttr.TitleOriginal		  		  // ## Sort Title		  If PrevTitleSort = "" Then MovieAttr.TitleSort = Articulator( MovieAttr.Title ) Else MovieAttr.TitleSort = PrevTitleSort		  		  		  // ## Description Plot		  If LocalMovieInfo.HasName("overview") Then MovieAttr.DescriptionPlot = LocalMovieInfo.Value("overview") // Localized		  If MovieInfo.HasName("overview")      And  MovieAttr.DescriptionPlot = "" Then MovieAttr.DescriptionPlot = MovieInfo.Value("overview") // U.S. Backup		  		  		  // ## Description Tagline		  If LocalMovieInfo.HasName("tagline") Then MovieAttr.DescriptionTagline = LocalMovieInfo.Value("tagline") // Localized		  If MovieInfo.HasName("tagline") And MovieAttr.DescriptionTagline = "" Then MovieAttr.DescriptionTagline = Trim( MovieInfo.Value("tagline") )		  		  // Extra Taglines		  If MovieInfo.HasName("tagline") Then MovieAttr.DescriptionTaglines.Append MovieInfo.Value("tagline")		  If IMDBNew.HasName("TAGLINES") Then		    For i as Integer = 0 to IMDBNew.Child("TAGLINES").Count - 1		      MovieAttr.DescriptionTaglines.Append Trim( RegExThis( IMDBNew.Child("TAGLINES").Value(i), "\[.*\]", "") )		    Next		    MovieAttr.DescriptionTaglines = RemoveDuplicatesFromArray( MovieAttr.DescriptionTaglines )		    If MovieAttr.DescriptionTagline = "" And MovieAttr.DescriptionTaglines.Ubound > -1 Then MovieAttr.DescriptionTagline = MovieAttr.DescriptionTaglines(0)		  ENd If		  		  		  // ## IMDb outline & plot		  If Lang = "US" Or Lang = "GB" Then		    If IMDBNew.HasName("PLOT")       And IMDBNew.Value("PLOT") <> "" Then MovieAttr.DescriptionOutline = IMDBNew.Value("PLOT")		    If IMDBNew.HasName("STORYLINE")  And Len( IMDBNew.Value("STORYLINE") )  > Len( MovieAttr.DescriptionPlot ) Then MovieAttr.DescriptionPlot = IMDBNew.Value("STORYLINE")		    // In case the storyline has been shortened, select the first full story line from the storylines page.		    If IMDBNew.HasName("STORYLINES") And IMDBNew.Child("STORYLINES").Count > 0 And Len( IMDBNew.Child("STORYLINES").Value(0) )  > Len( MovieAttr.DescriptionPlot ) Then MovieAttr.DescriptionPlot = IMDBNew.Child("STORYLINES").Value(0)		  End If		  // If the outline and plot are STILL empty by now, fill it up with whatever I can find, no matter the language.		  If MovieAttr.DescriptionOutline = "" And IMDBNew.HasName("PLOT")               Then MovieAttr.DescriptionOutline = IMDBNew.Value("PLOT")		  If MovieAttr.DescriptionPlot    = "" And IMDBNew.Child("STORYLINES").Count > 0 Then MovieAttr.DescriptionPlot = IMDBNew.Child("STORYLINES").Value(0)		  		  		  // ## Release		  If MovieInfo.HasName("release_date") Then MovieAttr.DatePremiered = MovieInfo.Value("release_date")		  If MovieInfo.HasName("release_date") Then MovieAttr.DateYear = Val( MovieInfo.Value("release_date").left(4) )		  If TomatoesInfo.HasName( "release_dates" ) And TomatoesInfo.Child("release_dates").HasName("dvd") Then		    MovieAttr.DateReleasedOnDVD = TomatoesInfo.Child("release_dates").Value("dvd")		  End If		  		  If IMDBNew.HasName("RELEASE_DATE") And IMDBNew.Value("RELEASE_DATE") <> "" And IMDBNew.Value("RELEASE_DATE") <> "False" Then		    Dim Date as String = IMDBNew.Value("RELEASE_DATE")		    Dim PrettyMonth as String = Trim( RegExThis( Date, "[0-9]", "" ) )		    Dim Day as String = Date.Left(2)		    Dim Year as String = Date.Right(4)		    MovieAttr.DatePremiered = Year + "-" + Month2Int( PrettyMonth ) + "-" + Day		    		    If IMDBNew.HasName("YEAR") And IMDBNew.Value("YEAR") <> "" Then MovieAttr.DateYear = IMDBNew.Value("YEAR")		  End If		  		  // ## MPAA		  Dim RatingExplanation as String		  If IMDBNew.HasName("MPAA_RATING") Then		    RatingExplanation = Trim( RegExThis( IMDBNew.Value("MPAA_RATING"), "RATED .* for ", "" ) )		    RatingExplanation = Trim( RatingExplanation.ReplaceAll("(re-rating on appeal)","") )		    RatingExplanation = Trim( RatingExplanation.ReplaceAll("on appeal","") )		  End If		  		  If Releases.HasName("countries") Then		    Dim ArrCountry(), ArrMPAA() as String		    For i as Integer = 0 to Releases.Child("countries").Count - 1		      Dim jItem as New JSONItem		      jItem = Releases.Child("countries").Child(i)		      		      ArrCountry.Append jItem.Value("iso_3166_1")		      ArrMPAA.Append    jItem.Value("certification")		      		      If jItem.Value("iso_3166_1") = "US" Then		        If MovieAttr.DatePremiered = "" Then MovieAttr.DatePremiered = jItem.Value("release_date")		        If jItem.Value("certification") <> "" And MovieAttr.RatingMPAA = "" Then MovieAttr.RatingMPAA = MPAAFromCountry( jItem.Value("certification"), "US" )		      End If		      		      If jItem.Value("iso_3166_1") = Lang Then		        MovieAttr.DatePremiered = jItem.Value("release_date")		        If jItem.Value("certification") <> "" Then MovieAttr.RatingMPAA = MPAAFromCountry( jItem.Value("certification"), Lang )		      End If		    Next		    		    For i as Integer = 0 to ArrCountry.Ubound		      If ArrCountry(i) <> "" And ArrMPAA(i) <> "" Then		        MovieAttr.RatingCertification.Append FlagCountry( ArrCountry(i) ) + ":" + ArrMPAA(i)		      End If		    Next		  End If		  		  If MovieAttr.RatingMPAA = "" And IMDBNew.HasName("MPAA_RATING") Then		    MovieAttr.RatingMPAA = Trim( IMDBNew.Value("MPAA_RATING").Left( IMDBNew.Value("MPAA_RATING").InStrB( 0, " for " ) ) )		    MovieAttr.RatingMPAA = MovieAttr.RatingMPAA.ReplaceAll("on appeal","")		  End If		  		  If RatingExplanation <> "" And MovieAttr.RatingMPAA <> "" Then MovieAttr.RatingMPAA = MovieAttr.RatingMPAA + " for " + RatingExplanation + "."		  		  // ## Rating		  If MovieInfo.HasName("vote_average") Then MovieAttr.Rating = Round( MovieInfo.Value( "vote_average" ) * 10 ) / 10		  If MovieInfo.HasName("vote_count")   Then MovieAttr.RatingVotes = MovieInfo.Value( "vote_count" )		  		  If IMDBEnabled Then		    If IMDBNew.HasName("RATING") And IMDBNew.Value("RATING") <> "" Then MovieAttr.Rating = IMDBNew.Value("RATING")		    If IMDBNew.HasName("VOTES")  And IMDBNew.Value("VOTES") <> ""  Then MovieAttr.RatingVotes = Val( IMDBNew.Value("VOTES").ReplaceAll(",","") )		  End If		  		  // IMDB's Formula for Weighted Rating (WR) = (v ÷ (v+m)) × R + (m ÷ (v+m)) × C		  // Should really only be used if IMDB is enabled, but maybe weighted rating is fun for TMDB rating as well.		  'Dim WeightedRating as Double = ( MovieAttr.RatingVotes / ( MovieAttr.RatingVotes + 25000 ) ) * MovieAttr.Rating + ( 25000 / ( MovieAttr.RatingVotes + 3000 ) ) * 7.1		  'If MovieAttr.RatingVotes >= 25000 and WeightedRating >= 8 then MovieAttr.RatingTop250 = Round( WeightedRating * 10 ) / 10		  		  // IMDB's Formula for Weighted Rating (WR) = ( ( R * v ) + ( C * m ) ) / ( v + m ) According to Wikpedia		  'Dim WeightedRating as Double = ( ( MovieAttr.Rating * MovieAttr.RatingVotes ) + ( 7.1 * 25000) ) / ( MovieAttr.RatingVotes + 25000 )		  'If MovieAttr.RatingVotes >= 25000 And WeightedRating > 8 Then MovieAttr.RatingTop250 = WeightedRating		  		  		  // ## Top250		  If IMDBNew.HasName("TOP_250") And IMDBNew.Value("TOP_250") <> "" Then MovieAttr.RatingTop250 = IMDBNew.Value("TOP_250")		  		  #If TargetLinux Then		    If Top250.HasName( "movies" ) Then		      		      For i as Integer = 0 to Top250.Child("movies").Count - 1		        Dim jItem as New JSONItem		        jItem = Top250.Child("movies").Child(i)		        Dim Top250ID as String = jItem.Value("url").ReplaceAll("title","").ReplaceAll("/","")		        If Top250ID = MovieAttr.ID_IMDB Then		          MovieAttr.RatingTop250 = i + 1		          If jItem.HasName( "rating" ) Then MovieAttr.Rating = jItem.Value( "rating" )		          If jItem.HasName( "votes" ) Then MovieAttr.RatingVotes = Val( jItem.Value( "votes" ).ReplaceAll(",","") )		        End If		      Next		      		    End If		  #EndIf		  		  		  		  // ## Genres		  ReDim MovieAttr.Genres(-1)		  		  For i as Integer = 0 to PrevGenres.Ubound		    MovieAttr.Genres.Append PrevGenres(i)		  Next		  		  Dim TmpArray() as String		  If LocalMovieInfo.HasName("genres") Then		    TmpArray = JSONArray( LocalMovieInfo.Child("genres"), "name" )		  ElseIf MovieInfo.HasName("genres") Then		    TmpArray = JSONArray( MovieInfo.Child("genres"), "name" )		  End If		  		  For i as Integer = 0 to TmpArray.Ubound		    MovieAttr.Genres.Append TmpArray(i)		  Next		  		  If IMDBEnabled And ( Lang = "US" Or Lang = "GB" ) Then		    Dim arry() as String = JSONArray( IMDBNew.Child("GENRES") )		    For i as Integer = 0 to arry.Ubound		      MovieAttr.Genres.Append arry(i).ReplaceAll("Sci-Fi", "Science Fiction")		    Next		  End If		  		  // Sort out double genres		  MovieAttr.Genres = RemoveDuplicatesFromArray( MovieAttr.Genres )		  		  If Prefs.textStringForKey("MediaPlayer") = "Boxee" Then		    // Apparantly, boxee only supports uppercase genres?		    For i as Integer = 0 to MovieAttr.Genres.Ubound		      MovieAttr.Genres(i) = MovieAttr.Genres(i).Uppercase		    Next		  End If		  		  		  		  // ## Studios		  If MovieInfo.HasName("production_companies") Then MovieAttr.Studios = JSONArray( MovieInfo.Child("production_companies"), "name" )		  If IMDBNew.HasName("STUDIOS") Then		    For i as Integer = 0 to IMDBNew.Child("STUDIOS").Count - 1		      MovieAttr.Studios.Append IMDBNew.Child("STUDIOS").Value(i)		    Next		  End If		  		  MovieAttr.Studios = RemoveDuplicatesFromArray( MovieAttr.Studios )		  		  // Append tomatoe studio if it's not already appended.		  If TomatoesInfo.HasName("studio") And TomatoesInfo.Value("studio") <> "" Then		    Dim b as Boolean = False		    For i as integer = 0 to MovieAttr.Studios.Ubound		      If b = False Then b = NOT ( MovieAttr.Studios(i) = TomatoesInfo.Value("studio") )		    Next		    If b = True Then MovieAttr.Studios.Append TomatoesInfo.Value("studio")		  End If		  		  // ## Countries		  If MovieInfo.HasName("production_countries") Then MovieAttr.Countries = JSONArray( MovieInfo.Child("production_countries"), "name" )		  If MovieAttr.Countries.Ubound = -1 And IMDBNew.HasName("COUNTRY") And IMDBNew.Child("COUNTRY").Count > 0 Then		    MovieAttr.Countries = JSONArray( IMDBNew.Child("COUNTRY") )		  End If		  		  // ## Spoken Languages		  If MovieInfo.HasName("spoken_languages") Then		    MovieAttr.LanguagesSpoken = JSONArray( MovieInfo.Child("spoken_languages"), "name" )		    MovieAttr.LanguagesSpokenCode = JSONArray( MovieInfo.Child("spoken_languages"), "iso_639_1" )		  End If		  		  If MovieAttr.LanguagesSpoken.Ubound = -1 And IMDBNew.HasName("LANGUAGE") And IMDBNew.Child("LANGUAGE").Count > 0 Then		    MovieAttr.LanguagesSpoken = JSONArray( IMDBNew.Child("LANGUAGE") )		  End If		  		  // ## Other MovieInfo		  If MovieInfo.HasName("runtime") Then MovieAttr.InfoVideoRuntime = MovieInfo.Value("runtime")		  		  // ## Stars		  If IMDBNew.HasName("STARS") Then		    For i as Integer = 0 to IMDBNew.Child("STARS").Count - 1		      MovieAttr.ActorStar.Append IMDBNew.Child("STARS").Value(i)		    Next		  End If		  		  // ## Cast		  If Cast.HasName("cast") Then		    For i as Integer = 0 to Cast.Child("cast").Count - 1		      Dim jItem as New JSONItem		      jItem = Cast.Child("cast").Child(i)		      		      MovieAttr.ActorID.Append   jItem.value("id")		      MovieAttr.ActorName.Append jItem.Value("name")		      MovieAttr.ActorRole.Append jItem.Value("character")		      If jItem.Value("profile_path") = "" Then MovieAttr.ActorThumbURL.Append "" Else MovieAttr.ActorThumbURL.Append URLbase_image + "w342" + jItem.Value("profile_path")		      		    Next		  ElseIf IMDBNew.HasName("CAST") And IMDBNew.Child("CAST").Count > 0 Then		    For i as Integer = 0 to IMDBNew.Child("CAST").Count - 1		      MovieAttr.ActorID.Append       ""		      MovieAttr.ActorName.Append     IMDBNew.Child("CAST").Value(i)		      If IMDBNew.HasName("ROLES") And IMDBNew.Child("ROLES").Count > 0 Then		        MovieAttr.ActorRole.Append     IMDBNew.Child("ROLES").Value(i)		      Else		        MovieAttr.ActorRole.Append   ""		      End If		      MovieAttr.ActorThumbURL.Append ""		    Next		  End If // @END HasName("Cast")		  		  // ## Crew		  Dim tmpDirectors(), tmpWriters() as String		  		  If Cast.HasName("crew") Then		    For i as Integer = 0 to Cast.Child("crew").Count - 1		      Dim jItem as New JSONItem		      jItem = Cast.Child("crew").Child(i)		      		      		      If jItem.Value("department") = "Directing" Then		        tmpDirectors.Append Trim( jItem.Value("name") )		      End If		      		      If jItem.Value("department") = "Writing" Then		        tmpWriters.Append Trim( jItem.Value("name") )		      End If		      		      If jItem.Value("department") = "Sound" Then		        If MovieAttr.CreditMusic = "" Then		          MovieAttr.CreditMusic = Trim( jItem.Value("name") )		        Else		          MovieAttr.CreditMusic   = MovieAttr.CreditMusic   + ", " + jItem.Value("name")		        End If		      End If		      		    Next		  End If // @END HasName("Crew")		  		  // IMDb Directors		  If IMDBNew.HasName("DIRECTORS") And IMDBNew.Child("DIRECTORS").Count > 0 Then		    Dim Director() as String = JSONArray( IMDBNew.Child("DIRECTORS") )		    For i as Integer = 0 to Director.Ubound		      tmpDirectors.Append Trim( Director(i) )		    Next		  End If		  		  // IMDb Writers		  If IMDBNew.HasName("WRITERS") And IMDBNew.Child("WRITERS").Count > 0 Then		    Dim Writer() as String = JSONArray( IMDBNew.Child("WRITERS") )		    For i as Integer = 0 to Writer.Ubound		      tmpWriters.Append Trim( Writer(i) )		    Next		  End If		  		  tmpDirectors = RemoveDuplicatesFromArray( tmpDirectors )		  tmpWriters   = RemoveDuplicatesFromArray( tmpWriters   )		  		  For i as Integer = 0 to tmpDirectors.Ubound		    If MovieAttr.CreditDirector = "" Then		      MovieAttr.CreditDirector = tmpDirectors(i)		    Else		      MovieAttr.CreditDirector = MovieAttr.CreditDirector + ", " + tmpDirectors(i)		    End If		  Next		  		  For i as Integer = 0 to tmpWriters.Ubound		    If MovieAttr.CreditWriter = "" Then		      MovieAttr.CreditWriter = tmpWriters(i)		    Else		      MovieAttr.CreditWriter = MovieAttr.CreditWriter + ", " + tmpWriters(i)		    End If		  Next		  		  		  // ## IMDb Recommended movies		  If IMDBNew.HasName("RECOMMENDED_TITLES") Then		    For i as Integer = 0 to IMDBNew.Child("RECOMMENDED_TITLES").Count - 1		      Dim RecTitle as String = Trim( RegExThis( IMDBNew.Child("RECOMMENDED_TITLES").Value(i), "\[.*\]", "" ) )		      Dim RecID as String = Trim( RegExThis( IMDBNew.Child("RECOMMENDED_TITLES").Value(i), ".*\[", "" ) ).ReplaceAll("]","")		      If RecTitle = "" Then RecTitle = Loc.kNotAvailable		      		      MovieAttr.RecMovies.Append    RecTitle		      MovieAttr.RecMoviesIDs.Append RecID		    Next		  End If		  		  		  // ## RottenTomatoes		  If TomatoesInfo.HasName("critics_consensus") Then MovieAttr.TomatoConcensus = TomatoesInfo.Value("critics_consensus")		  If TomatoesInfo.HasName("ratings") Then		    Dim jItem as New JSONItem		    jItem = TomatoesInfo.Child("ratings")		    		    If jItem.HasName("critics_rating") Then MovieAttr.TomatoCriticsRating = jItem.Value("critics_rating")		    If jItem.HasName("critics_score")  Then MovieAttr.TomatoCriticsScore  = jItem.Value("critics_score")		    		    If jItem.HasName("audience_rating") Then MovieAttr.TomatoAudienceRating = jItem.Value("audience_rating")		    If jItem.HasName("audience_score")  Then MovieAttr.TomatoAudienceScore  = jItem.Value("audience_score")		  End If		  		  		  		  // ## Poster		  Dim FirstPoster as String		  If Images.HasName("posters") Then		    For i as Integer = 0 to Images.Child("posters").Count - 1		      Dim jItem as new JSONItem		      jItem = Images.Child("posters").Child(i)		      		      If FirstPoster = "" And _		        (jItem.Value("iso_639_1") = Prefs.textStringForKey("DBLanguage").NthField("-",1) OR _		        jItem.Value("iso_639_1") = "" ) Then FirstPoster = URLbase_image + SizePoster + jItem.Value("file_path")		        		        MovieAttr.ART_PosterURLs.Append       URLbase_image + "original" + jItem.Value("file_path")		        MovieAttr.ART_PosterThumbURLs.Append  URLbase_image + "w92" + jItem.Value("file_path")		        MovieAttr.ART_PosterDimensions.Append jItem.Value("width") + "x" + jItem.Value("height")		    Next		  End If		  		  // IMDB Poster		  If IMDBEnabled And IMDBNew.Value("POSTER_FULL") <> "" And NOT IMDBNew.Value("POSTER_FULL").instr(0, "scorecardresearch") > 0 Then		    MovieAttr.ART_PosterURLs.Append        IMDBNew.Value("POSTER_FULL")		    MovieAttr.ART_PosterThumbURLs.Append   IMDBNew.Value("POSTER_SMALL")		    MovieAttr.ART_PosterDimensions.Append  ""		    If FirstPoster = "" Then FirstPoster = IMDBNew.Value("POSTER_FULL")		  End If		  		  // Download Default Poster		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kDefaultPoster ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.kPoster.Lowercase + "..."  // 14		  If Prefs.boolForKey("AutoDownloadPoster") And ( FindImagePoster( MovieAttr.FolderParent ) = Nil OR NOT FindImagePoster( MovieAttr.FolderParent ).Exists ) Then		    Dim PosterLocation as FolderItem = MovieAttr.DestinationPoster( MovieAttr.FolderParent )		    If PosterLocation <> Nil And NOT PosterLocation.Exists Then		      MovieAttr.ART_Poster = URL2Picture( FirstPoster, PosterLocation.NameWithoutExtension, PosterLocation.NameExtension, MovieAttr.FolderParent )		      CacheImageSet MovieAttr.ART_Poster, MovieAttr.ID_IMDB + ".movie.poster.jpg"		    End If		  End If		  		  		  		  // ## Fanart		  Dim FirstFanart as String		  If Images.HasName("backdrops") Then		    For i as Integer = 0 to Images.Child("backdrops").Count - 1		      Dim jItem as New JSONItem		      jItem = Images.Child("backdrops").Child(i)		      		      If FirstFanart = "" Then FirstFanart = URLbase_image + SizeFanart + jItem.Value("file_path")		      		      MovieAttr.ART_FanartURLs.Append       URLbase_image + "original" + jItem.Value("file_path")		      MovieAttr.ART_FanartThumbURLs.Append  URLbase_image + "w300"     + jItem.Value("file_path")		      MovieAttr.ART_FanartDimensions.Append jItem.Value("width") + "x" + jItem.Value("height")		    Next		  End If		  		  // FanartTV Fanart		  If FanartTVJSON.HasName("moviebackground") Then		    For i as Integer = 0 to FanartTVJSON.Child("moviebackground").Count - 1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("moviebackground").Child(i)		      		      If jItem.Value("url") <> "" Then		        MovieAttr.ART_FanartURLs.Append       jItem.Value("url")		        MovieAttr.ART_FanartThumbURLs.Append  jItem.Value("url")		        MovieAttr.ART_FanartDimensions.Append "1920x1080"		      End If		      		    Next		  End If		  		  // Download Default Fanart		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kDefaultFanart ) Else dlgProgress.Debug Loc.kDownloading + " " + Loc.kFanart.Lowercase + "..."  // 15		  If Prefs.boolForKey("AutoDownloadFanart") And ( FindImageFanart( MovieAttr.FolderParent ) = Nil OR NOT FindImageFanart( MovieAttr.FolderParent ).Exists ) Then		    Dim FanartLocation as FolderItem = MovieAttr.DestinationFanart( MovieAttr.FolderParent )		    If FanartLocation <> Nil And NOT FanartLocation.Exists Then		      MovieAttr.ART_Fanart = URL2Picture( FirstFanart, FanartLocation.NameWithoutExtension, FanartLocation.NameExtension, MovieAttr.FolderParent )		      CacheImageSet MovieAttr.ART_Fanart, MovieAttr.ID_IMDB + ".movie.fanart.jpg"		    End If		  End If		  		  		  // ## Trailer		  If Trailers.HasName("youtube") Then		    		    For i as Integer = 0 to Trailers.Child("youtube").Count - 1		      Dim jItem as New JSONItem		      jItem = Trailers.Child("youtube").Child(i)		      If jItem.Value("source") <> "" Then		        MovieAttr.TrailerNames.Append   jItem.Value("name")		        MovieAttr.TrailerQuality.Append jItem.Value("size")		        MovieAttr.TrailerURLs.Append    "http://www.youtube.com/watch?v=" + jItem.Value("source")		      End If		    Next		    		  End If		  		  		  // ## File -> MediaInfo		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kReadingInfo + ":", MovieCore.kFileInfo + ": " + FindMovieName( MovieAttr.FolderParent ) ) // 16		  MovieCore.MovieFileInfo( MovieAttr.FolderParent )		  		  		  // ## Write NFO		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kMetadata + ":", Loc.kWritingNFO ) // 17		  MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieAttr.FolderParent ) )		  		  		  // ## AutoManage Media		  If NOT MovieCore.MassSearch And Prefs.boolForKey("AutoManageMedia") Then SingleRenamer MovieAttr.FolderParent, -1, True // 18		  		  		  // ## ExtraThumbs / ExtraFanart		  If Images.HasName("backdrops") Then		    		    If Images.Child("backdrops").Count > 0 Then		      If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kExtraThumbs.Lowercase + "..."		      Dim Pic as Picture		      		      // ExtraThumbs		      If Prefs.boolForKey("AutoDownloadExtraThumbs") Then		        If NOT MovieCore.MassSearch Then dlgProgress.Reset		        Dim Destination as FolderItem = MovieAttr.FolderParent.Child("extrathumbs")		        If NOT Destination.Exists Then Destination.CreateAsFolder		        		        For i as Integer = 0 to Images.Child("backdrops").Count - 1		          Dim jItem as new JSONItem		          jItem = Images.Child("backdrops").Child(i)		          		          If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", str(i+1) + Loc.k1of2 + Str( Images.Child("backdrops").Count ) + " " + Loc.kThumb + " " + Loc.kImages.Lowercase + "...", 1, Images.Child("backdrops").Count )		          Pic = URL2Picture( URLbase_image + "w780" + jItem.Value("file_path"), "thumb" + str(i+1), "jpg", Destination )		          		        Next		      End If		      		      		      // ExtraFanart		      If Prefs.boolForKey("AutoDownloadExtraFanart") Then		        If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kExtraFanarts.Lowercase + "..."		        		        If NOT MovieCore.MassSearch Then dlgProgress.Reset		        Dim Destination as FolderItem = MovieAttr.FolderParent.Child("extrafanart")		        If NOT Destination.Exists Then Destination.CreateAsFolder		        		        For i as Integer = 0 to Images.Child("backdrops").Count - 1		          Dim jItem as new JSONItem		          jItem = Images.Child("backdrops").Child(i)		          		          If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", str(i+1) + Loc.k1of2 + Str( Images.Child("backdrops").Count ) + " " + Loc.kFanart + " " + Loc.kImages.Lowercase + "...", 1, Images.Child("backdrops").Count )		          Pic = URL2Picture( URLbase_image + SizeFanart + jItem.Value("file_path"), "fanart" + str(i+1), "jpg", Destination )		          		        Next		      End If		      		    End If		  End If // @END Images.HasName("backdrops")		  		  // ## FanartTV		  If Prefs.boolForKey("AutoDownloadClearArt") Or Prefs.boolForKey("AutoDownloadLogo") Or Prefs.boolForKey("AutoDownloadDiscArt") Or Prefs.boolForKey("AutoDownloadBanner") Or Prefs.boolForKey("AutoDownloadThumb") Then		    If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kExtraArt.Lowercase + "..."		    		    Dim f as FolderItem = FindImageBanner( MovieAttr.FolderParent )		    		    Dim Count as Integer = 0		    If Prefs.boolForKey("AutoDownloadClearArt") And _		      ( FanartTVJSON.HasName("movieart") Or FanartTVJSON.HasName("hdmovieart") ) And _		      NOT MovieAttr.FolderParent.Child("clearart.png").Exists Then Count = Count + 1		      		      If Prefs.boolForKey("AutoDownloadLogo")     And _		        ( FanartTVJSON.HasName("movielogo") Or FanartTVJSON.HasName("hdmovielogo") ) And _		        NOT MovieAttr.FolderParent.Child("logo.png").Exists     Then Count = Count + 1		        		        If Prefs.boolForKey("AutoDownloadDiscArt")  And FanartTVJSON.HasName("moviedisc")   And NOT MovieAttr.FolderParent.Child("disc.png").Exists     Then Count = Count + 1		        If Prefs.boolForKey("AutoDownloadBanner")   And FanartTVJSON.HasName("moviebanner") And ( f = NIL Or NOT f.Exists )                              Then Count = Count + 1		        If Prefs.boolForKey("AutoDownloadThumb" )   And FanartTVJSON.HasName("moviethumb")  And NOT MovieAttr.FolderParent.Child("landscape.jpg").Exists Then Count = Count + 1		        		        If NOT MovieCore.MassSearch Then dlgProgress.Reset		        Dim URL as String = ""		        		        // ClearArt		        If Prefs.boolForKey("AutoDownloadClearArt") And ( FanartTVJSON.HasName("movieart") Or FanartTVJSON.HasName("hdmovieart") ) And NOT MovieAttr.FolderParent.Child("clearart.png").Exists Then		          If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kClearArt.Lowercase + "..."		          		          Dim ClearArt as New JSONItem		          If FanartTVJSON.HasName("movieart")   Then ClearArt = FanartTVJSON.Child("movieart")		          If FanartTVJSON.HasName("hdmovieart") Then ClearArt = FanartTVJSON.Child("hdmovieart")		          		          If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kDefaultClearArt, 1, Count )		          For i as Integer = 0 to ClearArt.Count - 1		            If ClearArt.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = ClearArt.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = ClearArt.Child(i).Value("url")		            End If		          Next		          		          MovieAttr.ART_ClearArt = URL2Picture( URL, "clearart", "png", MovieAttr.FolderParent )		          URL = ""		        End If		        		        // ClearLogo		        If Prefs.boolForKey("AutoDownloadLogo") And ( FanartTVJSON.HasName("movielogo") Or FanartTVJSON.HasName("hdmovielogo") ) And NOT MovieAttr.FolderParent.Child("logo.png").Exists Then		          If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kLogo.Lowercase + "..."		          		          Dim Logo as New JSONItem		          If FanartTVJSON.HasName("movielogo")   Then Logo = FanartTVJSON.Child("movielogo")		          If FanartTVJSON.HasName("hdmovielogo") Then Logo = FanartTVJSON.Child("hdmovielogo")		          		          If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kDefaultLogo, 1, Count )		          For i as Integer = 0 to Logo.Count - 1		            If Logo.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = Logo.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = Logo.Child(i).Value("url")		            End If		          Next		          		          MovieAttr.ART_Logo = URL2Picture( URL, "logo", "png", MovieAttr.FolderParent )		          URL = ""		        End If		        		        // ClearDisc		        If Prefs.boolForKey("AutoDownloadDiscArt") And FanartTVJSON.HasName("moviedisc") And NOT MovieAttr.FolderParent.Child("disc.png").Exists  Then		          If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kDiscArt.Lowercase + "..."		          		          Dim Disc as New JSONItem		          Disc = FanartTVJSON.Child("moviedisc")		          		          If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kDefaultDiscArt, 1, Count )		          For i as Integer = 0 to Disc.Count - 1		            If Disc.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = Disc.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = Disc.Child(i).Value("url")		            End If		          Next		          		          MovieAttr.ART_Disc = URL2Picture( URL, "disc", "png", MovieAttr.FolderParent )		          'CacheImageSet MovieAttr.ART_Disc, MovieAttr.ID_IMDB + ".movie.disc.png"		          URL = ""		        End If		        		        // Banner		        If Prefs.boolForKey("AutoDownloadBanner") And FanartTVJSON.HasName("moviebanner") And NOT MovieAttr.FolderParent.Child("banner.jpg").Exists Then		          If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kBanner.Lowercase + "..."		          		          Dim Banner as New JSONItem		          Banner = FanartTVJSON.Child("moviebanner")		          		          If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kDefaultBanner, 1, Count )		          For i as Integer = 0 to Banner.Count - 1		            If Banner.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = Banner.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = Banner.Child(i).Value("url")		            End If		          Next		          		          MovieAttr.ART_Banner = URL2Picture( URL, "banner", "jpg", MovieAttr.FolderParent )		          URL = ""		        End If		        		        // Thumb		        If Prefs.boolForKey("AutoDownloadThumb") And FanartTVJSON.HasName("moviethumb") And NOT MovieAttr.FolderParent.Child("landscape.jpg").Exists Then		          If MovieCore.MassSearch Then dlgProgress.Debug Loc.kDownloading + " " + Loc.kThumb.Lowercase + "..."		          		          Dim Thumb as New JSONItem		          If FanartTVJSON.HasName("moviethumb") Then Thumb = FanartTVJSON.Child("moviethumb")		          		          If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kDefaultThumb, 1, Count )		          For i as Integer = 0 to Thumb.Count - 1		            If Thumb.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = Thumb.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = Thumb.Child(i).Value("url")		            End If		          Next		          		          MovieAttr.ART_Thumb = URL2Picture( URL, "landscape", "jpg", MovieAttr.FolderParent )		          'CacheImageSet( MovieAttr.ART_Thumb, MovieAttr.ID_IMDB + ".movie.thumb.jpg" )		          URL = ""		        End If		        		      End If		      		      		      // ## Download Trailer		      If MovieAttr.TrailerURLs.Ubound > -1 Then		        'MessageBox MovieAttr.TrailerURLs(0)		        		        Dim trSckt as New TrailerSckt		        Dim YTContent as String = sckt.Get( MovieAttr.TrailerURLs(0), Prefs.integerForKey("TimeOut") )		        trSckt.Close		        		        Dim TrailerURL as String		        If YTContent <> "" Then TrailerURL = trSckt.YoutubeContent( YTContent, True )		        dim c as new Clipboard		        c.Text = TrailerURL		        		      End If		      		      'If MovieAttr.TrailerURLs.Ubound > -1 Then		      'If NOT MovieCore.MassSearch Then		      'dlgProgress.Reset		      'dlgProgress.Add( Loc.kDownloading + ":", Loc.kTrailer + "...", 1, 2 )		      'Else		      'dlgProgress.Debug Loc.kDownloading + " " + Loc.kTrailer.Lowercase + "..."		      'End If		      '		      'Dim MovieFile as FolderItem = FindMovieItem( MovieAttr.FolderParent )		      'Dim TrailerDestination as FolderItem = MovieAttr.FolderParent.Child( Prefs.textStringForKey("FileNameTrailer").ReplaceAll( "<movie>", MovieFile.NameWithoutExtension ) )		      '		      'If TrailerDestination <> Nil And NOT TrailerDestination.Exists Then		      'Dim TrSckt as New TrailerSckt		      'TrSckt.Yield = True		      '		      ''TrSckt.Download MovieAttr.TrailerURLs(0)		      ''TrSckt.Close		      '		      'Dim YTContent as String = sckt.Get( MovieAttr.TrailerURLs(0), Prefs.integerForKey("TimeOut") )		      'sckt.Close		      '		      'Dim TrailerURL as String		      'If YTContent <> "" Then TrailerURL = TrSckt.YoutubeContent( YTContent, True )		      '		      ''TrSckt.Yield = True		      'TrSckt.Get TrailerURL, SpecialFolder.Temporary.Child( "trailer.downloading" )		      ''TrSckt.Get TrailerURL, TrailerDestination		      'TrSckt.Close		      '		      'End If		      '		      'End If		      		      		      'If NOT MovieCore.MassSearch And Update Then		      'wndMain.lstMovies.UpdateRow( wndMain.lstMovies.ListIndex )		      '		      'wndMain.lstMovies.Sort		      '		      'MovieAttr.LoadImages MovieAttr.FolderParent		      'wndMain.cvsMovieDetails.Invalidate		      '		      'dlgProgress.Close		      'End If		      		      Return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetPersonNFO(ID as String)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function URL(Method As String, Parameter As String, Lang As String = "All", Page As Integer = 1, Opt As String = "") As String		  Dim ext as String		  Dim Base as String = URLbase		  Dim ApiKey as String = MovieCore.ApiKey_TMDB		  		  If Method.InStr(0, "Tomatoes") > 0 Then		    Base = ""		    ApiKey = MovieCore.ApiKey_RottenTomatoes		  End If		  		  If Lang = "All" Then		    Lang = ""		  ElseIf Lang = "" Then		    Lang = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 )		  Else		    Lang = Lang		  End If		  		  Select Case Method		    		  Case "MovieInfo"		    ext = URLmovie_info		    Lang = "&language=" + Lang		    		  Case "MovieAlternativeTitles"		    ext = URLmovie_alternative_titles		    If Lang <> "" Then Lang = "&language=" + Lang		    		  Case "MovieCast"		    ext = URLMovie_casts		    		  Case "MovieImages"		    ext = URLmovie_images		    Lang = ""		    		  Case "MovieReleases"		    ext = URLmovie_releases		    If Lang <> "" Then Lang = "&language=" + Lang		    		  Case "MovieTrailers"		    ext = URLmovie_trailers		    If Lang <> "" Then Lang = "&language=" + Lang		    		  Case "SearchMovie"		    ext = URLsearch_movie		    If Lang <> "" Then Lang = "&language=" + Lang		    If Opt <> "" Then Opt = "&year=" + opt		    Parameter = String2Entities( Parameter )		    		  Case "MovieRecommendations"		    ext = URLmovie_similar		    If Lang <> "" Then Lang = "&language=" + Lang		    		    		    // ---- RottenTomatoes		  Case "TomatoesSearch"		    ext = URLtomatoes_search		    Lang = "&country=" + Lang		    Opt = "&page_limit=" + Opt		    		  Case "TomatoesMovieInfo"		    ext = URLtomatoes_movie		    Lang = ""		    		  Case "TomatoesMovieAlias"		    ext = URLtomatoes_movie_alias		    		    		  Case "TomatoesMovieReviews"		    ext = URLtomatoes_movie_reviews		    Lang = ""		    Opt = "&page_limit=50&review_type=" + Opt		    // Review Types: "all", "top_critic" and "dvd". Default: "top_critic"		    		  Case "TomatoesMovieCast"		    Base = ""		    ext = URLtomatoes_movie_cast		    Lang = ""		    'Lang = "&country=" + Lang		    		  Case "TomatoesMovieSimiliar"		    ext = URLtomatoes_movie_similiar		    Lang = ""		    Opt = "&limit=5"		    		  Case "TomatoesMovieClips"		    ext = URLtomatoes_movie_clips		    Lang = ""		    		  Case "TomatoesBoxOffice"		    ext = URLtomatoes_lists_box_office		    Lang = "&country=" + Lang		    Opt = "&limit=10"		    		  End Select		  		  Return Base + ext.ReplaceAll("{0}", Parameter ) + ApiKey + "&page=" + Str(Page) + Lang + Opt + "&include_adult=true"		End Function	#tag EndMethod	#tag Note, Name = Image Sizes		"images": {		  "backdrop_sizes": ["w300", "w780", "w1280", "original"],		  "base_url": "http://cf2.imgobject.com/t/p/",		  "poster_sizes": ["w92", "w154", "w185", "w342", "w500", "original"],		  "profile_sizes": ["w45", "w185", "h632", "original"]		}				Construction:		  URLbase_image + "{size}" + "image.jpg"	#tag EndNote	#tag Note, Name = Untitled				  Dim Lang as String = Prefs.textStringForKey("DBLanguage")		  If Lang.InStr(0,"-") = 0 Then Lang = Lang + "-" + Lang		  If Lang = "en-en" Then Lang = "en"		  		  Dim test as JSONItem		  		  Dim Base as String = "http://api.themoviedb.org/3"		  Dim Extension as String		  		  Select Case url		    		  Case "misc_upcoming"		    Extension = "/movie/upcoming?page={0}&api_key="		    		  End Select		  		  Return Base + Extension.ReplaceAll("{0}", prm) + ApiKey		  		  		  If ID.Left(2) = "tt" then		    // IMDB Lookup		    Return "http://api.themoviedb.org/2.1/Movie.imdbLookup/" + Lang + "/xml/" + ApiKey + "/" + ID		  Else		    // TMDB Lookup		    Return "http://api.themoviedb.org/2.1/Movie.getInfo/" + Lang + "/xml/" + ApiKey + "/" + ID		  End If	#tag EndNote	#tag Note, Name = URL Construction				Return URLbase + URL*.ReplaceAll("{0}", "ID or Query") + ApiKey + "&page=" + "1+" + "&language="				URL search_* all have multi pages.		URL top_rated/popular/upcoming all have (5) multi-pages.	#tag EndNote	#tag Constant, Name = URLbase, Type = String, Dynamic = False, Default = \"http://api.themoviedb.org/3", Scope = Public	#tag EndConstant	#tag Constant, Name = URLbase_image, Type = String, Dynamic = False, Default = \"http://cf2.imgobject.com/t/p/", Scope = Public	#tag EndConstant	#tag Constant, Name = URLcompany_info, Type = String, Dynamic = False, Default = \"/company/{0}\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLcompany_movies, Type = String, Dynamic = False, Default = \"/company/{0}/movies\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLconfiguration, Type = String, Dynamic = False, Default = \"/configuration\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLgenre_list, Type = String, Dynamic = False, Default = \"/genre/list\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLgenre_movies, Type = String, Dynamic = False, Default = \"/genre/{0}/movies\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmisc_popular, Type = String, Dynamic = False, Default = \"/movie/popular\?page\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmisc_top_rated, Type = String, Dynamic = False, Default = \"/movie/top-rated\?page\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmisc_upcoming, Type = String, Dynamic = False, Default = \"/movie/upcoming\?page\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_alternative_titles, Type = String, Dynamic = False, Default = \"/movie/{0}/alternative_titles\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_casts, Type = String, Dynamic = False, Default = \"/movie/{0}/casts\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_images, Type = String, Dynamic = False, Default = \"/movie/{0}/images\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_info, Type = String, Dynamic = False, Default = \"/movie/{0}\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_keywords, Type = String, Dynamic = False, Default = \"/movie/{0}/keywords\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_releases, Type = String, Dynamic = False, Default = \"/movie/{0}/releases\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_similar, Type = String, Dynamic = False, Default = \"/movie/{0}/similar_movies\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_trailers, Type = String, Dynamic = False, Default = \"/movie/{0}/trailers\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_translations, Type = String, Dynamic = False, Default = \"/movie/{0}/translations\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLperson_credits, Type = String, Dynamic = False, Default = \"/person/{0}/credits\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLperson_images, Type = String, Dynamic = False, Default = \"/person/{0}/images\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLperson_info, Type = String, Dynamic = False, Default = \"/person/{0}\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLsearch_companies, Type = String, Dynamic = False, Default = \"/search/company\?query\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLsearch_movie, Type = String, Dynamic = False, Default = \"/search/movie\?query\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLsearch_person, Type = String, Dynamic = False, Default = \"/search/person\?query\x3D{0}&api_key", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_lists_box_office, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/lists/movies/box_office.json\?apikey\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_movie, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/movies/{0}.json\?apikey\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_movie_alias, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/movie_alias.json\?type\x3Dimdb&id\x3D{0}&apikey\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_movie_cast, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/movies/{0}/cast.json\?apikey\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_movie_clips, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/movies/{0}/clips.json\?apikey\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_movie_reviews, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/movies/{0}/reviews.json\?apikey\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_movie_similiar, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/movies/{0}/similar.json\?apikey\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLtomatoes_search, Type = String, Dynamic = False, Default = \"http://api.rottentomatoes.com/api/public/v1.0/movies.json\?q\x3D{0}&apikey\x3D", Scope = Protected	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Address"			Visible=true			Group="Behavior"			Type="String"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="defaultPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyAddress"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Port"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="yield"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="HTTPSocket"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass