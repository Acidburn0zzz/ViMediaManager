#tag ModuleProtected Module Scrape	#tag Method, Flags = &h1		Protected Sub AllMovies()		  Dim MovieName, XmlContent, UnfoundTitles as String		  Dim sckt as new TMDB		  sckt.Yield = True		  //# Cancelled = False		  MassSearch = True		  		  For i as Integer = 0 to wndMain.lstMovies.ListCount - 1		    //# If Cancelled then Return		    		    If wndMain.lstMovies.Cell( i, 2 ) = "" then // If there's no MovieDB ID then go ahead		      MovieAttr.FolderParent = GetFolderItem( wndMain.lstMovies.Cell( i, 1 ) )		      //# If Cancelled then Return		      If MovieAttr.FolderParent <> Nil and MovieAttr.FolderParent.Exists then		        MovieName = FindMovieName( MovieAttr.FolderParent, False )		        //# If Cancelled then Return		        If MovieName <> "" then		          //$ Progress( Localizable.kSearching + ":", MovieName + "...", i, wndMain.lstMovies.ListCount - 1 )		          dlgProgress.Update( Localizable.kSearching + ":", MovieName + "...", i )		          XmlContent = sckt.Get( sckt.URL_Search( MovieName ), Prefs.integerForKey("TimeOut") )		          sckt.Close		          		          //# If Cancelled then Return		          		          If XmlContent.InStr( 0, "Nothing found" ) > 0 then		            		            If NOT Growl.Notify( App.kAppName, Localizable.kCouldNotBeFound.ReplaceAll( "%s", MovieName ) ) then		              'MsgBox "Growling"		              'If UnfoundTitles = "" then		              'UnfoundTitles = MovieName		              'Else		              'UnfoundTitles = UnfoundTitles + chr(13) + MovieName		              'End If		            Else		              'MsgBox "Not growling"		            End If // @END Growl		            		            If UnfoundTitles = "" then		              UnfoundTitles = MovieName		            Else		              UnfoundTitles = UnfoundTitles + chr(13) + MovieName		            End If		            		          ElseIf XmlContent.Left(5) = "<?xml" then		            sckt.ScrapeFirstResult( XmlContent )		          Else		            // Unfound Title		            		            If NOT Growl.Notify( App.kAppName, Localizable.kCouldNotBeFound.ReplaceAll( "%s", MovieName ) ) then		              		              		              		            End If // @END Growl		            		            If UnfoundTitles = "" then		              UnfoundTitles = MovieName		            Else		              UnfoundTitles = UnfoundTitles + chr(13) + MovieName		            End If		            		          End If // @END XML is valid		          		        End If // @END MovieName <> ""		        XmlContent = ""		        MovieName = ""		        		      End If		      		    End If		  Next		  		  //$ Progress("close")		  MassSearch = False		  // wndMain.lstMovies.CreateList		  		  dlgProgress.Add( Localizable.Refresh + ":", Localizable.kReadingInfo + "...", 0, 0 )		  wndMain.lstMovies.CreateList		  wndMain.lstMovies.ListIndex = wndMain.lstMovies.ListIndex		  		  // If UnfoundTitles <> "" then MsgBox Localizable.kCouldNotBeFound.ReplaceAll( "%s", Localizable.Movies ) + chr(13) + chr(13) + UnfoundTitles		  If UnfoundTitles <> "" then wndResults.Init( Localizable.kCouldNotBeFoundFollowing.ReplaceAll( "%s", Localizable.Movies.Lowercase ), UnfoundTitles )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearArts()		  ReDim ArtSize(-1)		  ReDim ArtThumb(-1)		  ReDim ArtThumbURL(-1)		  ReDim ArtURL(-1)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub IMDbApi(ID as String, Full as Boolean = True)		  Dim XmlContent as String		  Dim sckt as new IMDB		  sckt.Yield = True		  Dim MovieName as String = FindMovieName( MovieAttr.FolderParent )		  		  If ID = "" then		    MsgBox msgNoIDMovie		    Return		  End If		  		  //# If Scrape.Cancelled then Return		  		  //$ If NOT MassSearch then Progress( Localizable.kSearching + ":", "IMDb: " + MovieName, 1, 3 )		  XmlContent = sckt.Get( sckt.URL_IMDbApi( ID, Full ), Prefs.integerForKey( "TimeOut" ) / 2 )		  sckt.Close		  		  //# If Scrape.Cancelled then Return		  		  If XmlContent.Left(5) = "<?xml" then		    		    If Full then		      //$ If NOT MassSearch then Progress( Localizable.kProcessing + ":", "IMDb: " + MovieName, 2, 3 )		      sckt.IMDbFullInfo( XmlContent )		      IMDbApi( ID, False ) // Go for short info/outline.		    Else		      //$ If NOT MassSearch then Progress( Localizable.kProcessing + ":", "IMDb: " + MovieName, 3, 3 )		      sckt.IMDbShortInfo( XmlContent )		      MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieAttr.FolderParent ) )		      //$ If NOT MassSearch then Progress( "close" )		    End If		    		  Else		    If NOT MassSearch then MsgBox msgIMDBApi		    //$ If NOT MassSearch then Progress("close")		    If DebugBuild and  XmlContent <> "" then MsgBox "[DEBUG] Invalid Content found:" + chr(13) + chr(13) + XmlContent		  End If		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieFileInfo(MovieParent as FolderItem)		  //# If Scrape.Cancelled then Return		  		  Dim XmlContent as String		  Dim MovieFile as FolderItem = FindMovieItem( MovieParent )		  		  If MovieFile = Nil or NOT MovieFile.Exists then Return		  If MovieFile.Name = "VIDEO_TS" then Return		  		  // Get XML from MediaInfo		  XmlContent = MediaInfo( MovieFile, False )		  XmlContent = DefineEncoding( XmlContent, Encodings.SystemDefault ).ReplaceAll("Â©", "").ReplaceAll("@", "")		  		  // Process XML		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  		  Dim AudioCodec, AudioLanguage, AudioChannels as String		  Dim VideoCodec, VideoWidth, VideoHeight, VideoAspect as String		  		  Xml.PreserveWhitespace = False		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.FirstChild.FirstChild		  		  //$ If NOT MassSearch then Progress( Localizable.kProcessing + ":", MovieFile.Name, 5, 5 )		  		  For i as Integer = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    // AUDIO		    If xnode.GetAttribute( "type" ) = "Audio" then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil then		          		          Select Case xitem.Name		            		          Case "Codec_ID_Hint"		            AudioCodec = xitem.FirstChild.Value		          Case "Codec"		            AudioCodec = xitem.FirstChild.Value		            		          case "Channel_s_"		            AudioChannels = Trim( xitem.FirstChild.Value.ReplaceAll( "channels", "" ) )		            		          case "Language"		            If xitem.FirstChild.Value.Len > 3 then AudioLanguage = xitem.FirstChild.Value		            		          End Select		          		        End If		        		      Next		      		      If AudioCodec <> ""    then MovieAttr.InfoAudioCodec.Append    AudioCodec           else MovieAttr.InfoAudioCodec.Append    ""		      If AudioChannels <> "" then MovieAttr.InfoAudioChannels.Append Val( AudioChannels ) else MovieAttr.InfoAudioChannels.Append -1		      If AudioLanguage <> "" then MovieAttr.InfoAudioLanguage.Append AudioLanguage        else MovieAttr.InfoAudioLanguage.Append ""		      		      AudioCodec    = ""		      AudioChannels = ""		      AudioLanguage = ""		      		    End If		    		    // VIDEO		    If xnode.GetAttribute( "type" ) = "Video" then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil then		          		          Select Case xitem.Name		            		          Case "Codec_ID"		            VideoCodec = xitem.FirstChild.Value		            		          Case "Width"		            VideoWidth = Trim( xitem.FirstChild.Value.ReplaceAll( "pixels", "" ).ReplaceAll( " ", "" ) )		            		          Case "Height"		            VideoHeight = Trim( xitem.FirstChild.Value.ReplaceAll( "pixels", "" ).ReplaceAll( " ", "" ) )		            		          Case "Display_aspect_ratio"		            VideoAspect = Trim( xitem.FirstChild.Value )		            		          End Select		          		        End If		        		      Next		      		      If VideoCodec  <> "" then MovieAttr.InfoVideoCodec   = VideoCodec		      If VideoWidth  <> "" then MovieAttr.InfoVideoWidth   = Val( VideoWidth )		      If VideoHeight <> "" then MovieAttr.InfoVideoHeight  = Val( VideoHeight )		      If VideoWidth  <> "" and VideoHeight <> "" then MovieAttr.InfoVideoAspect = Floor( Val( VideoWidth ) / Val ( VideoHeight ) * 100 ) / 100		      //If VideoAspect <> "" then MovieAttr.InfoVideoAspect = VideoAspect		      		      VideoCodec  = ""		      VideoWidth  = ""		      VideoHeight = ""		      		    End If		    		    If xnode.GetAttribute( "type" ) = "Subtitle" then		      // xitem = xnode.Child(n)		      		      // Create empty 'Subs' folder to add the subtitles to the movielist view.		      Dim f as FolderItem = MovieAttr.FolderParent.Child("Subs")		      If f <> Nil and NOT f.Exists Then f.CreateAsFolder		      		      // TODO: MediaInfo Subtitles?		    End If		    		  Next		  		Exception err as XmlException		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApi(ID as String)		  Dim XmlContent as String		  Dim sckt as new TMDB		  sckt.Yield = True		  //# Cancelled = False		  		  If ID = "" then		    MsgBox msgNoIDMovie		    Return		  End If		  		  Dim MovieParent as FolderItem = MovieAttr.FolderParent		  Dim MovieName as String = FindMovieName( MovieParent )		  If NOT MassSearch then dlgProgress.Add( Localizable.kSearching + ":", MovieName ) // 1		  		  // Prior Art found		  If MassSearch = False and PriorArtFound( MovieAttr.FolderParent ) and _		    MsgDlg( Nil, 1, msgPriorArtFound, msgPriorArtDeletion, Localizable.kDelete, Localizable.btnContinue ) = 1 then		    		    Dim MoviePoster as FolderItem = FindImagePoster( MovieParent )		    Dim MovieFanart as FolderItem = FindImageFanart( MovieParent )		    If MoviePoster <> Nil and MoviePoster.Exists then MoviePoster.Delete		    If MovieFanart <> Nil and MovieFanart.Exists then MovieFanart.Delete		    		  End If		  		  //# If Cancelled then Return		  		  //$ If NOT MassSearch then Progress( Localizable.kSearching + ":", FindMovieName( MovieParent ), 1, 5 )		  If NOT MassSearch then dlgProgress.Add( Localizable.kSearching + ":", MovieName ) // 2		  XmlContent = sckt.Get( sckt.URL_Info( ID ), Prefs.integerForKey( "TimeOut" ) )		  sckt.Close		  		  //# If Cancelled then Return		  		  // Valid XML		  If XmlContent.InStr( 0, "503 Service Unavailable" ) > 0 then		    //# Cancelled = True		    //$ Progress( "close" )		    MsgBox Localizable.kError + " 503: " + kServiceUnavailable + chr(13) + chr(13) + Localizable.kPleaseTryAgainLater		    dlgProgress.Stop		    Return		    		  ElseIf XmlContent = "<h1>Not Found</h1>" then		    If NOT MassSearch then		      //$ Progress( "close" )		      MsgBox kNothingFound + chr(13) + chr(13) + kManualSearchMovie		      If MsgDlg( wndMain, 0, kNothingFound, kManualSearchMovie, Localizable.dlgOK, Localizable.dlgCancel ) = 1 Then		        wndSearchMovie.Show		        wndSearchMovie.edtSearch.Text = FindMovieName( MovieParent )		      End If		      dlgProgress.Stop		      Return		    End If		    		  ElseIf XmlContent.Left(5) = "<?xml" then		    //$ If NOT MassSearch then Progress( Localizable.kProcessing + ":", "TMDB: " + FindMovieName( MovieParent ), 2, 5 )		    If NOT MassSearch then dlgProgress.Add( Localizable.kProcessing + ":", "TMDB: " + MovieName ) // 3		    sckt.ScrapeResults( XmlContent )		    		    //# If Cancelled then Return		    MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieParent ) )		    If Prefs.boolForKey("IMDBUnofficialEnabled") and MovieAttr.ID_IMDB <> "" then		      If NOT MassSearch then dlgProgress.Add( Localizable.kSearching + ":", "IMDB: " + MovieName ) // 8		      IMDbApi( MovieAttr.ID_IMDB )		      MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieParent ) )		    End If		    		  Else		    If NOT MassSearch then		      MsgBox msgInvalidContent + chr(13) + chr(13) + XmlContent		      dlgProgress.Stop		    End If		    		  End If		  		  // ExtraThumbs		  //# If Cancelled then Return		  //If Prefs.boolForKey("AutoDownloadExtraThumbs") and MovieAttr.ART_FanartURLs.Ubound > -1 then Scrape.TMDBApiArt( MovieAttr.ID_TMDB, "ExtraThumbs" )		  		  // Movie File Information		  //# If Cancelled then Return		  If NOT MassSearch then dlgProgress.Add( Localizable.kSearching + ":", kFileInfo + ": " + MovieName ) // 8		  MovieFileInfo( MovieParent )		  		  // Write NFO		  //# If Cancelled then Return		  MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieParent ) )		  		  //# If NOT MassSearch then Progress( "close" )		  		  // Update list		  If NOT MassSearch then		    wndMain.lstMovies.UpdateRow		    wndMain.lstMovies.SortList		    MovieAttr.NFORead( MovieParent )		    MovieAttr.LoadImages( MovieParent )		    wndMain.cvsMovies.Invalidate( False )		  End If		  		  If Prefs.boolForKey("AutoDownloadExtraThumbs") and MovieAttr.ART_FanartURLs.Ubound > -1 then Scrape.TMDBApiArt( MovieAttr.ID_TMDB, "ExtraThumbs" )		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApiArt(ID as String, Mode as String)		  Dim XmlContent as String		  Dim sckt as new TMDB		  sckt.Yield = True		  //# Cancelled = False		  		  If ID = "" then		    MsgBox msgNoIDMovie		    Return		  End If		  		  //# If Scrape.Cancelled then Return		  		  //$ Progress( Localizable.kSearching + ":", kImageURLsFound.ReplaceAll( "%s", Mode ), 1, 2 )		  If NOT MassSearch then dlgProgress.Add( Localizable.kSearching + ":", kImageURLsFound.ReplaceAll( "%s", Mode ) )		  XmlContent = sckt.Get( sckt.URL_Images( ID ), prefs.integerForKey("TimeOut") )		  sckt.Close		  		  If XmlContent.InStr( 0, "503 Service Unavailable" ) > 0 then		    //$ Progress( "close" )		    MsgBox Localizable.kError + " 503:" + kServiceUnavailable + chr(13) + chr(13) + Localizable.kPleaseTryAgainLater		    		  ElseIf XmlContent.InStr( 0, "Database Error" ) > 0 then		    //$ Progress( "close" )		    MsgBox msgDatabaseError + chr(13) + chr(13) + kConnectionError		    		  ElseIf XmlContent.Left(5) = "<?xml" then		    //$ Progress( Localizable.kSearching + ":", kImageURLsFound.ReplaceAll( "%s", Mode ), 2, 2 )		    If NOT MassSearch then dlgProgress.Add( Localizable.kSearching + ":", kImageURLsFound.ReplaceAll( "%s", Mode ) )		    sckt.GetArt( XmlContent, Mode )		    //$ Progress( "close" )		    		  ElseIf XmlContent = "" then		    //$ Progress( "close" )		    MsgBox msgTMDBConnectionError + chr(13) + chr(13) + Localizable.kCheckInternetConnection		    		  Else		    //$ Progress( "close" )		    MsgBox msgInvalidContent + chr(13) + chr(13) + XmlContent		    		  End If		  		  //# Cancelled = False		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApiSearch(MovieName as String)		  Dim XmlContent as String		  Dim sckt as new TMDB		  sckt.Yield = True		  //# Cancelled = False		  		  //$ Progress( Localizable.kSearching + ":", MovieName, 2, 1 )		  //# If Cancelled then Return		  dlgProgress.Add( Localizable.kSearching + ":", MovieName ) // 1		  XmlContent = sckt.Get( sckt.URL_Search( MovieName ), Prefs.integerForKey("TimeOut") )		  sckt.Close		  		  //# If Cancelled then Return		  		  If XmlContent.InStr( 0, "503 Service Unavailable" ) > 0 then		    //$ Progress( "close" )		    MsgBox Localizable.kError + " 503:" + kServiceUnavailable + chr(13) + chr(13) + Localizable.kPleaseTryAgainLater		    		  ElseIf XmlContent.InStr( 0, "Database Error" ) > 0 then		    //$ Progress( "close" )		    MsgBox msgDatabaseError + chr(13) + chr(13) + kConnectionError		    		  ElseIf XmlContent.Left(5) = "<?xml" then		    //$ Progress( Localizable.kSearching + ":", MovieName, 2, 2 )		    dlgProgress.Add( Localizable.kSearching + ":", MovieName ) // 2		    sckt.SearchResults( XmlContent, MovieName )		    //$ Progress( "close" )		    		  ElseIf XmlContent = "" then		    //$ Progress( "close" )		    MsgBox msgTMDBConnectionError + chr(13) + chr(13) + Localizable.kCheckInternetConnection		    		  Else		    //$ Progress( "close" )		    MsgBox msgInvalidContent + chr(13) + chr(13) + XmlContent		    		  End If		  		  //# Cancelled = False		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub UpdateMovies()		  		End Sub	#tag EndMethod	#tag Property, Flags = &h0		ArtSize() As String	#tag EndProperty	#tag Property, Flags = &h0		ArtThumb() As Picture	#tag EndProperty	#tag Property, Flags = &h0		ArtThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h0		ArtURL() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Cancelled As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected ManualSearch As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected MassSearch As Boolean = False	#tag EndProperty	#tag Constant, Name = kConnectionError, Type = String, Dynamic = True, Default = \"Error establishing a database connection.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Error establishing a database connection."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Fout in een verbinding met de database."	#tag EndConstant	#tag Constant, Name = kFileInfo, Type = String, Dynamic = True, Default = \"File Information", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"File Information"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Bestands informatie"	#tag EndConstant	#tag Constant, Name = kImageURLsFound, Type = String, Dynamic = True, Default = \"%s image URLs...", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"%s image URLs..."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"%s plaatjes URLs..."	#tag EndConstant	#tag Constant, Name = kManualSearchMovie, Type = String, Dynamic = True, Default = \"Do you want to manually search for the movie\?", Scope = Protected		#Tag Instance, Platform = Any, Language = Default, Definition  = \"Do you want to manually search for the movie\?"		#Tag Instance, Platform = Any, Language = Default, Definition  = \"Wil je handmatig naar de film zoeken\?"	#tag EndConstant	#tag Constant, Name = kNoImagesFound, Type = String, Dynamic = True, Default = \"No %s images found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No %s images found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen %s plaatjes gevonden."	#tag EndConstant	#tag Constant, Name = kNoMoviesFoundTryAgain, Type = String, Dynamic = True, Default = \"No movies were found\x2C try again with less keywords or an alternative title.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No movies were found\x2C try again with less keywords or an alternative title."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen films gevonden\x2C probeer opnieuw met minder sleutel woorden of een alternatieve titel."	#tag EndConstant	#tag Constant, Name = kNothingFound, Type = String, Dynamic = True, Default = \"Nothing found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Nothing found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Niets gevonden."	#tag EndConstant	#tag Constant, Name = kServiceUnavailable, Type = String, Dynamic = True, Default = \"Service Unavailable", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Service Unavailable"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Dienst niet beschikbaar"	#tag EndConstant	#tag Constant, Name = msgDatabaseError, Type = String, Dynamic = True, Default = \"Database Error", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Database Error"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Database fout"	#tag EndConstant	#tag Constant, Name = msgIMDBApi, Type = String, Dynamic = True, Default = \"IMDb Api did not respond\x2C please try again later.\r\rWhile the IMDb Api did not work\x2C The MovieDB information has still been saved.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"IMDb Api did not respond\x2C please try again later.\r\rWhile the IMDb Api did not work\x2C The MovieDB information has still been saved."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"IMDb Api gaf geen antwoord\x2C probeer later opnieuw.\r\rAlhoewel de IMDb Api geen antwoord gaf\x2C de informatie van TMDB is wel opgeslagen."	#tag EndConstant	#tag Constant, Name = msgInvalidContent, Type = String, Dynamic = True, Default = \"Invalid content found", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Invalid content found"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ongeldige inhoud gevonden"	#tag EndConstant	#tag Constant, Name = msgNoIDMovie, Type = String, Dynamic = True, Default = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ik weet niet welke film dit is.\r\rDownload alstublieft eerst de metadata voor deze film."	#tag EndConstant	#tag Constant, Name = msgPriorArtDeletion, Type = String, Dynamic = True, Default = \"Deleting prior art allows for new art to be automatically downloaded if available\x2C note that this cannot be undone.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Deleting prior art allows for new art to be automatically downloaded if available\x2C note that this cannot be undone."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Het wissen van de bestaande plaatjes maakt het mogelijk om automatisch nieuwe plaatjes te downloaden als deze beschikbaar zijn\x2C maar weet dat dit niet ongedaan gemaakt kan worden."	#tag EndConstant	#tag Constant, Name = msgPriorArtFound, Type = String, Dynamic = True, Default = \"Prior art has been found\x2C do you wish to delete it before proceeding\?", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Prior art has been found\x2C do you wish to delete it before proceeding\?"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Bestaande plaatjes gevonden\x2C wilt u deze wissen voordat u verder gaat\?"	#tag EndConstant	#tag Constant, Name = msgTMDBConnectionError, Type = String, Dynamic = True, Default = \"Failed to connect to the movie database.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Failed to connect to the movie database."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Kon geen verbinding maken met de film database."	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule