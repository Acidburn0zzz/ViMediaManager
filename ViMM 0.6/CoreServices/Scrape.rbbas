#tag ModuleProtected Module Scrape	#tag Method, Flags = &h0		Sub ClearArts()		  ReDim ArtSize(-1)		  ReDim ArtThumb(-1)		  ReDim ArtThumbURL(-1)		  ReDim ArtURL(-1)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub IMDbApi(ID as String)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApi(ID as String)		  Dim XmlContent as String		  Dim sckt as new TMDB		  sckt.Yield = True		  Cancelled = False		  		  If ID = "" then		    MsgBox msgNoIDMovie		    Return		  End If		  		  Dim MovieParent as FolderItem		  If wndMain.ppMain.Value = 0 then		    MovieParent = MovieAttr.FolderParent		  ElseIf wndMain.ppMain.Value = 1 then		    // MovieParent = AnimeAttr.FolderParent		  End If		  		  // Prior Art found		  If MassSearch = False and PriorArtFound( MovieAttr.FolderParent ) and _		    dlgWindow( msgPriorArtFound, msgPriorArtDeletion, Localizable.kDelete, Localizable.btnContinue ) then		    		    Dim MoviePoster as FolderItem = FindImagePoster( MovieParent )		    Dim MovieFanart as FolderItem = FindImageFanart( MovieParent )		    If MoviePoster <> Nil and MoviePoster.Exists then MoviePoster.Delete		    If MovieFanart <> Nil and MovieFanart.Exists then MovieFanart.Delete		    		  End If		  		  If Cancelled then Return		  		  If NOT MassSearch then Progress( Localizable.kSearching + ":", FindMovieName( MovieParent ), 1, 4 )		  XmlContent = sckt.Get( sckt.URL_Info( ID ), Prefs.integerForKey( "TimeOut" ) )		  sckt.Close		  		  If Cancelled then Return		  		  // Valid XML		  If XmlContent.InStr( 0, "503 Service Unavailable" ) > 0 then		    Cancelled = True		    Progress( "close" )		    MsgBox Localizable.kError + " 503: " + kServiceUnavailable + chr(13) + chr(13) + Localizable.kPleaseTryAgainLater		    		  ElseIf XmlContent = "<h1>Not Found</h1>" then		    If NOT MassSearch then		      Progress( "close" )		      MsgBox kNothingFound + chr(13) + chr(13) + kManualSearchMovie		      If dlgWindow( kNothingFound, kManualSearchMovie ) then		        wndSearchMovie.Show		        wndSearchMovie.edtSearch.Text = FindMovieName( MovieParent )		        Return		      End If		      		    End If		    		  ElseIf XmlContent.Left(5) = "<?xml" then		    If NOT MassSearch then Progress( Localizable.kProcessing + ":", FindMovieName( MovieParent ), 2, 4 )		    sckt.ScrapeResults( XmlContent )		    		    If Cancelled then Return		    MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieParent ) )		    If Prefs.boolForKey("IMDBUnofficialEnabled") and MovieAttr.ID_IMDB <> "" then IMDbApi( MovieAttr.ID_IMDB )		    If NOT MassSearch then Progress( "close" )		    		  Else		    If NOT MassSearch then		      Progress( "close" )		      MsgBox msgInvalidContent + chr(13) + chr(13) + XmlContent		    End If		    		  End If		  		  // Update list		  If NOT Cancelled and NOT MassSearch and Prefs.boolForKey("IMDBUnofficialEnabled") = False then		    MovieAttr.NFORead( MovieParent )		    wndMain.lstMovies.UpdateRow		    MovieAttr.LoadImages( MovieParent )		    wndMain.cvsMovies.Invalidate( False )		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApiArt(ID as String, Mode as String)		  Dim XmlContent as String		  Dim sckt as new TMDB		  sckt.Yield = True		  Cancelled = False		  		  If ID = "" then		    MsgBox msgNoIDMovie		    Return		  End If		  		  If Scrape.Cancelled then Return		  		  Progress( Localizable.kSearching + ":", kImageURLsFound.ReplaceAll( "%s", Mode ), 1, 2 )		  XmlContent = sckt.Get( sckt.URL_Images( ID ), prefs.integerForKey("TimeOut") )		  sckt.Close		  		  If XmlContent.InStr( 0, "503 Service Unavailable" ) > 0 then		    Progress( "close" )		    MsgBox Localizable.kError + " 503:" + kServiceUnavailable + chr(13) + chr(13) + Localizable.kPleaseTryAgainLater		    		  ElseIf XmlContent.InStr( 0, "Database Error" ) > 0 then		    Progress( "close" )		    MsgBox msgDatabaseError + chr(13) + chr(13) + kConnectionError		    		  ElseIf XmlContent.Left(5) = "<?xml" then		    Progress( Localizable.kSearching + ":", kImageURLsFound.ReplaceAll( "%s", Mode ), 2, 2 )		    sckt.GetArt( XmlContent, Mode )		    Progress( "close" )		    		  ElseIf XmlContent = "" then		    Progress( "close" )		    MsgBox msgTMDBConnectionError + chr(13) + chr(13) + Localizable.kCheckInternetConnection		    		  Else		    Progress( "close" )		    MsgBox msgInvalidContent + chr(13) + chr(13) + XmlContent		    		  End If		  		  Cancelled = False		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub TMDBApiSearch(MovieName as String)		  Dim XmlContent as String		  Dim sckt as new TMDB		  sckt.Yield = True		  Cancelled = False		  		  Progress( Localizable.kSearching + ":", MovieName, 2, 1 )		  If Cancelled then Return		  XmlContent = sckt.Get( sckt.URL_Search( MovieName ), Prefs.integerForKey("TimeOut") )		  sckt.Close		  		  If Cancelled then Return		  		  If XmlContent.InStr( 0, "503 Service Unavailable" ) > 0 then		    Progress( "close" )		    MsgBox Localizable.kError + " 503:" + kServiceUnavailable + chr(13) + chr(13) + Localizable.kPleaseTryAgainLater		    		  ElseIf XmlContent.InStr( 0, "Database Error" ) > 0 then		    Progress( "close" )		    MsgBox msgDatabaseError + chr(13) + chr(13) + kConnectionError		    		  ElseIf XmlContent.Left(5) = "<?xml" then		    Progress( Localizable.kSearching + ":", MovieName, 2, 2 )		    sckt.SearchResults( XmlContent, MovieName )		    Progress( "close" )		    		  ElseIf XmlContent = "" then		    Progress( "close" )		    MsgBox msgTMDBConnectionError + chr(13) + chr(13) + Localizable.kCheckInternetConnection		    		  Else		    Progress( "close" )		    MsgBox msgInvalidContent + chr(13) + chr(13) + XmlContent		    		  End If		  		  Cancelled = False		End Sub	#tag EndMethod	#tag Property, Flags = &h0		ArtSize() As String	#tag EndProperty	#tag Property, Flags = &h0		ArtThumb() As Picture	#tag EndProperty	#tag Property, Flags = &h0		ArtThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h0		ArtURL() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Cancelled As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected ManualSearch As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected MassSearch As Boolean = False	#tag EndProperty	#tag Constant, Name = kConnectionError, Type = String, Dynamic = True, Default = \"Error establishing a database connection.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Error establishing a database connection."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Fout in een verbinding met de database."	#tag EndConstant	#tag Constant, Name = kImageURLsFound, Type = String, Dynamic = True, Default = \"%s image URLs...", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"%s image URLs..."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"%s plaatjes URLs..."	#tag EndConstant	#tag Constant, Name = kManualSearchMovie, Type = String, Dynamic = True, Default = \"Do you want to manually search for the movie\?", Scope = Protected		#Tag Instance, Platform = Any, Language = Default, Definition  = \"Do you want to manually search for the movie\?"		#Tag Instance, Platform = Any, Language = Default, Definition  = \"Wil je handmatig naar de film zoeken\?"	#tag EndConstant	#tag Constant, Name = kNoImagesFound, Type = String, Dynamic = True, Default = \"No %s images found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No %s images found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen %s plaatjes gevonden."	#tag EndConstant	#tag Constant, Name = kNoMoviesFoundTryAgain, Type = String, Dynamic = True, Default = \"No movies were found\x2C try again with less keywords or an alternative title.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No movies were found\x2C try again with less keywords or an alternative title."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen films gevonden\x2C probeer opnieuw met minder sleutel woorden of een alternatieve titel."	#tag EndConstant	#tag Constant, Name = kNothingFound, Type = String, Dynamic = True, Default = \"Nothing found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Nothing found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Niets gevonden."	#tag EndConstant	#tag Constant, Name = kServiceUnavailable, Type = String, Dynamic = True, Default = \"Service Unavailable", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Service Unavailable"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Dienst niet beschikbaar"	#tag EndConstant	#tag Constant, Name = msgDatabaseError, Type = String, Dynamic = True, Default = \"Database Error", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Database Error"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Database fout"	#tag EndConstant	#tag Constant, Name = msgInvalidContent, Type = String, Dynamic = True, Default = \"Invalid content found", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Invalid content found"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ongeldige inhoud gevonden"	#tag EndConstant	#tag Constant, Name = msgNoIDMovie, Type = String, Dynamic = True, Default = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ik weet niet welke film dit is.\r\rDownload alstublieft eerst de metadata voor deze film."	#tag EndConstant	#tag Constant, Name = msgPriorArtDeletion, Type = String, Dynamic = True, Default = \"Deleting prior art allows for new art to be automatically downloaded if available\x2C note that this cannot be undone.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Deleting prior art allows for new art to be automatically downloaded if available\x2C note that this cannot be undone."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Het wissen van de bestaande plaatjes maakt het mogelijk om automatisch nieuwe plaatjes te downloaden als deze beschikbaar zijn\x2C maar weet dat dit niet ongedaan gemaakt kan worden."	#tag EndConstant	#tag Constant, Name = msgPriorArtFound, Type = String, Dynamic = True, Default = \"Prior art has been found\x2C do you wish to delete it before proceeding\?", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Prior art has been found\x2C do you wish to delete it before proceeding\?"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Bestaande plaatjes gevonden\x2C wilt u deze wissen voordat u verder gaat\?"	#tag EndConstant	#tag Constant, Name = msgTMDBConnectionError, Type = String, Dynamic = True, Default = \"Failed to connect to the movie database.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Failed to connect to the movie database."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Kon geen verbinding maken met de film database."	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule