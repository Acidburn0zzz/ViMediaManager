#tag ClassProtected Class TVDBScktInherits HTTPSocket	#tag Event		Sub Error(code as integer)		  SocketError( code, Me )		  		Exception err as NilObjectException		  Me.Close		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub GetArt(TVDBArt as JSONItem, FanartTVJSON as JSONItem)		  		  Dim Sckt as New TVDBSckt		  Sckt.Yield = True		  		  Dim TimeOut as Integer = Prefs.integerForKey("TimeOut") / 2		  Dim Lang as String = Prefs.textStringForKey("DBLanguage")		  If Lang = "gb" Then Lang = "en"		  		  // ## TVDB Art		  // :9		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kProcessing + ":", "TVDB " + Loc.kImages + " " + Loc.mTabInfo + "..." ) Else dlgProgress.debug( "TVDB " + Loc.kImages + " " + Loc.mTabInfo + "..." )		  		  Dim FirstPoster, FirstFanart, FirstBanner, SeasonLanguage(), SeasonPosterURLs(), SeasonPosterNrs(), SeasonBannerURLs(), SeasonBannerNrs(), SeasonFanartURLs(), SeasonFanartNrs() as String		  If TVDBArt.IsArray Then 'TVDBArt.HasName("Banners") And TVDBArt.Child("Banners").HasName("Banner") Then		    For i as Integer = 0 to TVDBArt.Count - 1		      Dim jItem as New JSONItem		      jItem = TVDBArt.Child(i)		      		      Select Case jItem.Value("BannerType")		        		      case "poster" // Posters		        TVAttr.ART_PosterURLs.Append TVCore.GraphicsPath + jItem.Value("BannerPath")		        		        If FirstPoster = "" And jItem.HasName("Language") And ( jItem.Value("Language") = Lang Or jItem.Value("Language") = "" ) Then		          FirstPoster = TVCore.GraphicsPath + jItem.Value("BannerPath")		        End If		        		        		      case "fanart" // Backdrops		        TVAttr.ART_FanartURLs.Append       TVCore.GraphicsPath + jItem.Value("BannerPath")		        TVAttr.ART_FanartThumbURLs.Append  TVCore.GraphicsPath + jItem.Value("ThumbnailPath")		        TVAttr.ART_FanartDimensions.Append jItem.Value("BannerType2")		        		        If FirstFanart = "" And jItem.HasName("Language") And ( jItem.Value("Language") = Lang OR jItem.Value("Language") = "" ) Then		          FirstFanart = TVCore.GraphicsPath + jItem.Value("BannerPath")		        End If		        		        		      case "season" // Posters OR Banners (season OR seasonwide)		        'If jItem.HasName("Language") And ( jItem.Value("Language") = Lang or jItem.Value("Language") = "" ) Then		        TVAttr.ART_SeasonURLs.Append    TVCore.GraphicsPath + jItem.Value("BannerPath")		        TVAttr.ART_SeasonNumbers.Append jItem.Value("Season")		        SeasonLanguage.Append           jItem.Value("Language")		        'End If		        If jItem.Value("BannerType2") = "season" Then		          SeasonPosterURLs.Append TVCore.GraphicsPath + jItem.Value("BannerPath")		          SeasonPosterNrs.Append  jItem.Value("Season")		        ElseIf jItem.Value("BannerType2") = "seasonwide" Then		          SeasonBannerURLs.Append TVCore.GraphicsPath + jItem.Value("BannerPath")		          SeasonBannerNrs.Append  jItem.Value("Season")		        End If		        		      case "series" // Banners		        TVAttr.ART_BannerURLs.Append TVCore.GraphicsPath + jItem.Value("BannerPath")		        		        If FirstBanner = "" And jItem.HasName("Language") And ( jItem.Value("Language") = Lang OR jItem.Value("Language") = "" ) Then		          FirstBanner = TVCore.GraphicsPath + jItem.Value("BannerPath")		        End If		        		      End Select		      		    Next		  End If		  		  // Fanart.TV		  // :10		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kProcessing + ":", "Fanart.tv " + Loc.kImages + " " + Loc.mTabInfo + "..." ) Else dlgProgress.debug( "Fanart.tv " + Loc.kImages + " " + Loc.mTabInfo + "..." )		  		  // -- Banner		  If FanartTVJSON.HasName("tvbanner") And FanartTVJSON.Child("tvbanner").IsArray Then		    For i as Integer = 0 to FanartTVJSON.Child("tvbanner").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("tvbanner").Child(i)		      TVAttr.ART_BannerURLs.Append jItem.Value("url")		    Next		  End If		  		  // -- Fanart		  If FanartTVJSON.HasName("showbackground") And FanartTVJSON.Child("showbackground").IsArray Then		    For i as Integer = 0 to FanartTVJSON.Child("showbackground").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("showbackground").Child(i)		      		      TVAttr.ART_FanartURLs.Append       jItem.Value("url")		      TVAttr.ART_FanartDimensions.Append "1920x1080"		      TVAttr.ART_FanartThumbURLs.Append  jItem.Value("url") + "/preview"		      		      		      // Season fanart		      If jItem.Value("season") <> "" Then		        SeasonFanartURLs.Append jItem.Value("url")		        SeasonFanartNrs.Append  jItem.Value("season")		      End If		      		    Next		  End If		  		  		  // -- HD ClearArt		  Dim ClearArtHDURLs() as String		  If FanartTVJSON.HasName("hdclearart") And FanartTVJSON.Child("hdclearart").IsArray Then		    For i as Integer = 0 to FanartTVJSON.Child("hdclearart").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("hdclearart").Child(i)		      If jItem.Value("lang") = Lang OR jItem.Value("lang") = "" Then ClearArtHDURLs.Append jItem.Value("url")		    Next		  End If		  		  // -- ClearArt		  Dim ClearArtURLs() as String		  If FanartTVJSON.HasName("clearart") Then		    For i as Integer = 0 to FanartTVJSON.Child("clearart").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("clearart").Child(i)		      If jItem.Value("lang") = Lang OR jItem.Value("lang") = ""  Then ClearArtURLs.Append jItem.Value("url")		    Next		  End If		  		  		  // -- HD Logo		  Dim LogoHDURLs() as String		  If FanartTVJSON.HasName("hdtvlogo") And FanartTVJSON.Child("hdtvlogo").IsArray Then		    For i as Integer = 0 to FanartTVJSON.Child("hdtvlogo").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("hdtvlogo").Child(i)		      If jItem.Value("lang") = Lang OR jItem.Value("lang") = "" Then LogoHDURLs.Append jItem.Value("url")		    Next		  End If		  		  // -- Logo		  Dim LogoURLs() as String		  If FanartTVJSON.HasName("clearlogo") Then		    For i as Integer = 0 to FanartTVJSON.Child("clearlogo").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("clearlogo").Child(i)		      If jItem.Value("lang") = Lang OR jItem.Value("lang") = ""  Then LogoURLs.Append jItem.Value("url")		    Next		  End If		  		  		  // -- Thumb		  Dim TVThumbURLs() as String		  If FanartTVJSON.HasName("tvthumb") Then		    For i as Integer = 0 to FanartTVJSON.Child("tvthumb").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("tvthumb").Child(i)		      TVThumbURLs.Append jItem.Value("url")		    Next		  End If		  		  		  // -- CharacterArt		  Dim CharacterArtURLs() as String		  If FanartTVJSON.HasName("characterart") Then		    For i as Integer = 0 to FanartTVJSON.Child("characterart").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("characterart").Child(i)		      CharacterArtURLs.Append jItem.Value("url")		    Next		  End If		  		  		  		  // -- SeasonThumb		  Dim SeasonThumbURLs(), SeasonThumbNrs() as String		  If FanartTVJSON.HasName("seasonthumb") Then		    For i as Integer = 0 to FanartTVJSON.Child("seasonthumb").Count -1		      Dim jItem as New JSONItem		      jItem = FanartTVJSON.Child("seasonthumb").Child(i)		      		      'TVAttr.ART_SeasonURLs.Append    jItem.Value("url")		      'TVAttr.ART_SeasonNumbers.Append jItem.Value("season")		      'SeasonLanguage.Append           jItem.Value("lang")		      		      If jItem.Value("lang") = Lang OR jItem.Value("lang") = ""  Then		        SeasonThumbURLs.Append   jItem.Value("url")		        SeasonThumbNrs.Append    jItem.Value("season")		      End If		    Next		  End If		  		  // --		  		  		  // Set download list		  If FirstPoster = "" And TVAttr.ART_PosterURLs.Ubound > -1 Then FirstPoster = TVAttr.ART_PosterURLs(0)		  If FirstFanart = "" And TVAttr.ART_FanartURLs.Ubound > -1 Then FirstFanart = TVAttr.ART_FanartURLs(0)		  If FirstBanner = "" And TVAttr.ART_BannerURLs.Ubound > -1 Then FirstBanner = TVAttr.ART_BannerURLs(0)		  		  Dim HighestSeason as Integer = -1		  For i as Integer = 0 to TVAttr.ART_SeasonNumbers.Ubound		    If Val( TVAttr.ART_SeasonNumbers(i) ) > HighestSeason Then HighestSeason = Val( TVAttr.ART_SeasonNumbers(i) )		  Next		  		  Dim tmpSeasonPosterURLs(), tmpSeasonPosterNrs() as String		  Dim tmpSeasonFanartURLs(), tmpSeasonFanartNrs() as String		  Dim tmpSeasonBannerURLs(), tmpSeasonBannerNrs() as String		  Dim tmpSeasonThumbsURLs(), tmpSeasonThumbsNrs() as String		  For i as Integer = -1 to HighestSeason		    		    // Order Season Posters		    For n as Integer = 0 to SeasonPosterNrs.Ubound		      If Val( SeasonPosterNrs(n) ) = i Then		        tmpSeasonPosterURLs.Append SeasonPosterURLs(n)		        tmpSeasonPosterNrs.Append  SeasonPosterNrs(n)		        Exit		      End If		    Next		    		    // Order Season Fanart		    For n as Integer = 0 to SeasonFanartNrs.Ubound		      If Val( SeasonFanartNrs(n) ) = i And SeasonFanartNrs(n) <> "all" Then		        tmpSeasonFanartURLs.Append SeasonFanartURLs(n)		        tmpSeasonFanartNrs.Append  SeasonFanartNrs(n)		        Exit		      ElseIf i = -1 And SeasonFanartNrs(n) = "All" Then		        tmpSeasonFanartURLs.Append SeasonFanartURLs(n)		        tmpSeasonFanartNrs.Append  SeasonFanartNrs(n)		        Exit		      End If		    Next		    		    // Order Season Banners		    For n as Integer = 0 to SeasonBannerNrs.Ubound		      If Val( SeasonBannerNrs(n) ) = i Then		        tmpSeasonBannerURLs.Append SeasonBannerURLs(n)		        tmpSeasonBannerNrs.Append  SeasonBannerNrs(n)		        Exit		      End If		    Next		    		    // Order Season Thumbs		    For n as Integer = 0 to SeasonThumbNrs.Ubound		      If Val( SeasonThumbNrs(n) ) = i And SeasonThumbNrs(n) <> "all" Then		        tmpSeasonThumbsURLs.Append SeasonThumbURLs(n)		        tmpSeasonThumbsNrs.Append  SeasonThumbNrs(n)		        Exit		      ElseIf i = -1 And SeasonThumbNrs(n) = "All" Then		        tmpSeasonThumbsURLs.Append SeasonThumbURLs(n)		        tmpSeasonThumbsNrs.Append  SeasonThumbNrs(n)		        Exit		      End If		    Next		    		  Next		  SeasonPosterURLs = tmpSeasonPosterURLs		  SeasonPosterNrs  = tmpSeasonPosterNrs		  		  SeasonFanartURLs = tmpSeasonFanartURLs		  SeasonFanartNrs  = tmpSeasonFanartNrs		  		  SeasonBannerURLs = tmpSeasonBannerURLs		  SeasonBannerNrs  = tmpSeasonBannerNrs		  		  SeasonThumbURLs = tmpSeasonThumbsURLs		  SeasonThumbNrs  = tmpSeasonThumbsNrs		  		  		  // :11 Downloading Poster		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kPoster + " " + Loc.kImages.Lowercase + "..." ) Else dlgProgress.debug( Loc.kDownloading + " " + Loc.kPoster.Lowercase + " " + Loc.kImages.Lowercase + "..." )		  If Prefs.boolForKey("AutoDownloadPoster") And FirstPoster <> "" And NOT TVAttr.FolderParent.Child("poster.jpg").Exists Then		    If SizePoster = "original" Then		      TVAttr.ART_Poster = URL2Picture( FirstPoster, "poster", "jpg", TVAttr.FolderParent )		    Else		      TVAttr.ART_Poster = Nil		      TVAttr.ART_Poster = Picture.FromData( sckt.Get( FirstPoster, TimeOut ) )		      		      Dim Width as Integer = Val( SizePoster.ReplaceAll("w","") )		      Dim Height as Integer = TVAttr.ART_Poster.Height * ( Width / TVAttr.ART_Poster.Width )		      		      SaveImage( ScaleImage( TVAttr.ART_Poster, Width, Height ), TVAttr.FolderParent.Child("poster.jpg"), FileTypes.ImageJpeg )		    End If		  End If		  CacheImageSet( TVAttr.ART_Poster, TVAttr.ID_IMDb + ".television.poster.jpg" )		  		  		  // :12 Downloading Fanart		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kFanart + " " + Loc.kImages.Lowercase + "..." ) Else dlgProgress.debug( Loc.kDownloading + " " + Loc.kFanart.Lowercase + " " + Loc.kImages.Lowercase + "..." )		  If Prefs.boolForKey("AutoDownloadFanart") And FirstFanart <> "" And NOT TVAttr.FolderParent.Child("Fanart.jpg").Exists Then		    If SizeFanart = "original" Then		      TVAttr.ART_Fanart = URL2Picture( FirstFanart, "fanart", "jpg", TVAttr.FolderParent )		    Else		      TVAttr.ART_Fanart = Nil		      TVAttr.ART_Fanart = Picture.FromData( sckt.Get( FirstFanart, TimeOut ) )		      		      Dim Width as Integer = Val( SizeFanart.ReplaceAll("w","") )		      Dim Height as Integer = TVAttr.ART_Fanart.Height * ( Width / TVAttr.ART_Fanart.Width )		      		      SaveImage( ScaleImage( TVAttr.ART_Fanart, Width, Height ), TVAttr.FolderParent.Child("fanart.jpg"), FileTypes.ImageJpeg )		    End If		  End If		  CacheImageSet( TVAttr.ART_Fanart, TVAttr.ID_IMDb + ".television.fanart.jpg" )		  		  		  // :13 Downloading Banner		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kBanner + " " + Loc.kImages.Lowercase + "..." ) Else dlgProgress.debug( Loc.kDownloading + " " + Loc.kBanner.Lowercase + " " + Loc.kImages.Lowercase + "..." )		  If Prefs.boolForKey("AutoDownloadBanner") And FirstBanner <> "" And NOT TVAttr.FolderParent.Child("banner.jpg").Exists Then TVAttr.ART_Banner = URL2Picture( FirstBanner, "banner", "jpg", TVAttr.FolderParent )		  		  		  // :14 Downloading Logo		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kLogo + " " + Loc.kImages.Lowercase + "..." ) Else dlgProgress.debug( Loc.kDownloading + " " + Loc.kLogo.Lowercase + " " + Loc.kImages.Lowercase + "..." )		  If Prefs.boolForKey("AutoDownloadLogo") And NOT TVAttr.FolderParent.Child("logo.png").Exists Then		    If LogoHDURLs.Ubound > -1 Then		      TVAttr.ART_Logo = URL2Picture( LogoHDURLs(0), "logo", "png", TVAttr.FolderParent )		    ElseIf LogoURLs.Ubound > -1 Then		      TVAttr.ART_Logo = URL2Picture( LogoURLs(0),   "logo", "png", TVAttr.FolderParent )		    End If		  End If		  		  		  // :15 Downloading ClearArt		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kClearArt + " " + Loc.kImages.Lowercase + "..." ) Else dlgProgress.debug( Loc.kDownloading + " " + Loc.kClearArt.Lowercase + " " + Loc.kImages.Lowercase + "..." )		  If Prefs.boolForKey("AutoDownloadClearArt") And NOT TVAttr.FolderParent.Child("clearart.png").Exists Then		    If ClearArtHDURLs.Ubound > -1 Then		      TVAttr.ART_ClearArt = URL2Picture( ClearArtHDURLs(0), "clearart", "png", TVAttr.FolderParent )		    ElseIf ClearArtURLs.Ubound > -1 Then		      TVAttr.ART_ClearArt = URL2Picture( ClearArtURLs(0),   "clearart", "png", TVAttr.FolderParent )		    End If		  End If		  		  		  // :16 Downloading Landscape		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kTVThumb + " " + Loc.kImages.Lowercase + "..." ) Else dlgProgress.debug( Loc.kDownloading + " " + Loc.kTVThumb.Lowercase + " " + Loc.kImages.Lowercase + "..." )		  If Prefs.boolForKey("AutoDownloadThumb") And NOT TVAttr.FolderParent.Child("landscape.jpg").Exists Then		    If TVThumbURLs.Ubound > -1 Then TVAttr.ART_TVThumb = URL2Picture( TVThumbURLs(0), "landscape", "jpg", TVAttr.FolderParent )		  End If		  		  		  // :17 Downloading CharacterArt		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kCharacterArt + " " + Loc.kImages.Lowercase + "..." ) Else dlgProgress.debug( Loc.kDownloading + " " + Loc.kCharacterArt.Lowercase + " " + Loc.kImages.Lowercase + "..." )		  If Prefs.boolForKey("AutoDownloadCharacterArt") And NOT TVAttr.FolderParent.Child("character.png").Exists Then		    If CharacterArtURLs.Ubound > -1 Then TVAttr.ART_CharacterArt = URL2Picture( CharacterArtURLs(0), "character", "png", TVAttr.FolderParent )		  End If		  		  		  // :18 Downloading Season Posters		  If Prefs.boolForKey("AutoDownloadSeasonArt") Then		    Dim Pic as Picture		    		    If NOT CommonCore.MassSearch Then dlgProgress.Reset		    For i as Integer = 0 to SeasonPosterURLs.Ubound		      If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kSeason + " " + Loc.kPoster.Lowercase + " " + Loc.kImages.Lowercase + "...", 1, SeasonPosterURLs.Ubound )		      dlgProgress.debug( Str(i+1) + Loc.k1of2 + Str( SeasonPosterURLs.Ubound + 1 ) + " " + Loc.kSeason + " " + Loc.kPoster + " " + Loc.kImages.Lowercase )		      If SeasonPosterNrs(i) = "0" Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "Specials" ).Exists Then Parent = Parent.Child( "Specials" )		        		        If NOT Parent.Child("specials.jpg").Exists Then Pic = URL2Picture( SeasonPosterURLs(i), "specials", "jpg", Parent )		      ElseIf SeasonPosterNrs(i) = "-1" Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        		        If NOT Parent.Child("season-all.jpg").Exists Then Pic = URL2Picture( SeasonPosterURLs(i), "season-all", "jpg", Parent )		      Else		        Dim SeasonDisplay as String = SeasonPosterNrs(i)		        If SeasonDisplay.Len = 1 Then SeasonDisplay = " 0" + SeasonDisplay Else SeasonDisplay = " " + SeasonDisplay		        		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "season" + SeasonDisplay ).Exists Then Parent = Parent.Child( "season" + SeasonDisplay )		        		        If NOT Parent.Child("season" + SeasonDisplay + ".jpg").Exists Then Pic = URL2Picture( SeasonPosterURLs(i), "season" + SeasonDisplay, "jpg", Parent )		      End If		    Next		    		  End If		  		  		  // :18 Downloading Season Banners		  If Prefs.boolForKey("AutoDownloadSeasonArt") Then		    Dim Pic as Picture		    		    If NOT CommonCore.MassSearch Then dlgProgress.Reset		    For i as Integer = 0 to SeasonBannerURLs.Ubound		      If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kSeason + " " + Loc.kBanner.Lowercase + " " + Loc.kImages.Lowercase + "...", 1, SeasonBannerURLs.Ubound )		      dlgProgress.debug( Str(i+1) + Loc.k1of2 + Str( SeasonBannerURLs.Ubound + 1 ) + " " + Loc.kSeason + " " + Loc.kBanner.Lowercase + " " + Loc.kImages.Lowercase )		      If SeasonBannerNrs(i) = "0" Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "specials" ).Exists Then Parent = Parent.Child( "specials" )		        		        If NOT Parent.Child("specialsbanner.jpg").Exists Then Pic = URL2Picture( SeasonBannerURLs(i), "specials-banner", "jpg", Parent )		      ElseIf SeasonPosterNrs(i) = "-1" OR SeasonPosterNrs(i) = "All"Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        		        If NOT Parent.Child("seasonbanner-all.jpg").Exists Then Pic = URL2Picture( SeasonPosterURLs(i), "seasonbanner-all", "jpg", Parent )		      Else		        Dim SeasonDisplay as String = SeasonBannerNrs(i)		        If SeasonDisplay.Len = 1 Then SeasonDisplay = " 0" + SeasonDisplay Else SeasonDisplay = " " + SeasonDisplay		        		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "season" + SeasonDisplay ).Exists Then Parent = Parent.Child( "season" + SeasonDisplay )		        		        If NOT Parent.Child("seasonbanner" + SeasonDisplay + ".jpg").Exists Then Pic = URL2Picture( SeasonBannerURLs(i), "seasonbanner" + SeasonDisplay, "jpg", Parent )		      End If		    Next		    		  End If		  		  		  // :20 Downloading Season Thumbs		  If Prefs.boolForKey("AutoDownloadSeasonArt") Then		    		    If NOT CommonCore.MassSearch Then dlgProgress.Reset		    For i as Integer = 0 to SeasonThumbURLs.Ubound		      If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kSeason + " " + Loc.kThumb.Lowercase + " " + Loc.kImages.Lowercase + "...", 1, SeasonThumbURLs.Ubound )		      dlgProgress.debug( Str(i+1) + Loc.k1of2 + Str( SeasonThumbURLs.Ubound + 1 ) + " " + Loc.kSeason + " " + Loc.kImages.Lowercase )		      If SeasonThumbNrs(i) = "0" Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "specials" ).Exists Then Parent = Parent.Child( "specials" )		        		        If NOT Parent.Child("specials-landscape.jpg").Exists Then TVAttr.ART_TVThumb = URL2Picture( SeasonThumbURLs(i), "specials-landscape", "jpg", Parent )		      ElseIf SeasonThumbNrs(i) = "-1" OR SeasonThumbNrs(i) = "All" Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        		        If NOT Parent.Child("seasonall-landscape.jpg").Exists Then TVAttr.ART_TVThumb = URL2Picture( SeasonThumbURLs(i), "seasonall-landscape", "jpg", Parent )		        		      Else		        Dim SeasonDisplay as String = SeasonThumbNrs(i)		        If SeasonDisplay.Len = 1 Then SeasonDisplay = " 0" + SeasonDisplay Else SeasonDisplay = " " + SeasonDisplay		        		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "season" + SeasonDisplay ).Exists Then Parent = Parent.Child( "season" + SeasonDisplay )		        		        'If Parent.Name.InStr( 0, "Season" ) = 0 Then SeasonDisplay = SeasonFanartNrs(i) Else SeasonDisplay = " " + SeasonDisplay		        If NOT Parent.Child("season" + SeasonDisplay + "-landscape.jpg").Exists Then TVAttr.ART_TVThumb = URL2Picture( SeasonThumbURLs(i), "season" + SeasonDisplay + "-landscape", "jpg", Parent )		      End If		    Next		    		  End If		  		  		  // :21 Downloading Season Fanarts		  If Prefs.boolForKey("AutoDownloadSeasonArt") Then		    		    If NOT CommonCore.MassSearch Then dlgProgress.Reset		    For i as Integer = 0 to SeasonFanartURLs.Ubound		      If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kSeason + " " + Loc.kFanart.Lowercase + " " + Loc.kImages.Lowercase + "...", 1, SeasonFanartURLs.Ubound )		      dlgProgress.debug( Str(i+1) + Loc.k1of2 + Str( SeasonFanartURLs.Ubound + 1 ) + " " + Loc.kSeason + " " + Loc.kFanart + " " + Loc.kImages.Lowercase )		      If SeasonFanartNrs(i) = "0" Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "specials" ).Exists Then Parent = Parent.Child( "specials" )		        		        If NOT Parent.Child("specials-fanart.jpg").Exists Then TVAttr.ART_TVThumb = URL2Picture( SeasonFanartURLs(i), "specials-fanart", "jpg", Parent )		      ElseIf SeasonFanartNrs(i) = "-1" OR SeasonFanartNrs(i) = "All" Then		        Dim Parent as FolderItem = TVAttr.FolderParent		        		        If NOT Parent.Child("seasonall-fanart.jpg").Exists Then TVAttr.ART_TVThumb = URL2Picture( SeasonFanartURLs(i), "seasonall-fanart", "jpg", Parent )		      Else		        Dim SeasonDisplay as String = SeasonFanartNrs(i)		        If SeasonDisplay.Len = 1 Then SeasonDisplay = " 0" + SeasonDisplay Else SeasonDisplay = " " + SeasonDisplay		        		        Dim Parent as FolderItem = TVAttr.FolderParent		        If Parent.Child( "season" + SeasonDisplay ).Exists Then Parent = Parent.Child( "season" + SeasonDisplay )		        		        If NOT Parent.Child("season" + SeasonDisplay + "-fanart.jpg").Exists Then TVAttr.ART_TVThumb = URL2Picture( SeasonFanartURLs(i), "season" + SeasonDisplay + "-fanart", "jpg", Parent )		      End If		    Next		    		  End If		  		  		  // :22 Downloading extra fanart		  If Prefs.boolForKey("AutoDownloadExtraFanart") Then		    		    If NOT CommonCore.MassSearch Then dlgProgress.Reset		    For i as Integer = 0 to TVAttr.ART_FanartURLs.Ubound		      If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", Loc.kExtraFanarts + " " + Loc.kImages.Lowercase + "...", 1, TVAttr.ART_FanartURLs.Ubound )		      dlgProgress.Debug( Str( i+1 ) + Loc.k1of2 + Str( TVAttr.ART_FanartURLs.Ubound + 1 ) + " " + Loc.kExtraFanarts + " " + Loc.kImages.Lowercase )		      		      		      Dim Destination as FolderItem = TVAttr.FolderParent.Child("extrafanart")		      If Destination <> Nil And NOT Destination.Exists Then Destination.CreateAsFolder		      		      Dim Width as Integer = Val( SizeFanart.ReplaceAll( "w", "" ) )		      If Width = 0 Then		        URL2Picture( TVAttr.ART_FanartURLs(i), Destination )		      Else		        Dim Name() as String = Split( TVAttr.ART_FanartURLs(i), "/" )		        Dim FileName as String = Name( Name.Ubound )		        If Destination.Child( FileName ).Exists Then Continue		        		        Dim CurFanart as Picture = Picture.FromData( sckt.Get( TVAttr.ART_FanartURLs(i), TimeOut ) )		        Dim Factor as Double = CurFanart.Height / CurFanart.Width		        		        Dim ScaledImage as Picture = ScaleImage( CurFanart, Width, Width * Factor )		        SaveImage( ScaledImage, Destination.Child( FileName ), FileTypes.ImageJpeg )		      End If		      		    Next		    		  End If		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetShowNFO(ID as String, Update as Boolean = False)		  Dim JSONString, TVInfo as String		  Dim sckt as New TVDBSckt		  sckt.Yield = True		  		  TVInfo = " " + TVAttr.FolderParent.Name + " " + Loc.mTabInfo.Lowercase + "..."		  		  // Play undercover spy.		  Dim rand as New Random		  Dim IP as String = Str( rand.InRange(0,255) ) + "." + Str( rand.InRange(0,255) ) + "." + Str( rand.InRange(0,255) ) + "." + Str( rand.InRange(0,255) )		  Sckt.SetRequestHeader( "httpheader", "REMOTE_ADDR: " + IP )		  Sckt.SetRequestHeader( "User-agent", "Mozilla/" + Str( rand.InRange(3,5) ) + "." + Str( rand.InRange(0,3) ) + " (Windows NT " + Str( rand.InRange(3,5) ) + "." + Str( rand.InRange(0,2) ) + "; rv:2.0.1) Gecko/20100101 Firefox/" + Str( rand.InRange(3,5) ) + ".0.1" )		  		  // ## Temporary Save		  Dim PrevTitle, PrevTitleSort, PrevTitleOriginal, PrevGenres(), PrevTagline as String		  If Update Then		    PrevTitle = TVAttr.Title		    PrevTitleSort = TVAttr.TitleSort		    PrevTitleOriginal = TVAttr.TitleOriginal		    		    PrevTagline = TVAttr.DescriptionTagline		    PrevGenres = TVAttr.Genres		  End If		  		  // ## Reset properties		  TVAttr.ClearProperties		  		  // ## Reload (some) properties		  If Update Then		    TVAttr.Title = PrevTitle		    TVAttr.TitleSort = PrevTitleSort		    TVAttr.TitleOriginal = PrevTitleOriginal		    		    TVAttr.DescriptionTagline = PrevTagline		    TVAttr.Genres = PrevGenres		  End If		  		  // ## Reset progress		  If NOT CommonCore.MassSearch Then dlgProgress.Reset		  		  // ## Gather information		  Dim Lang as String = Prefs.textStringForKey("DBLanguage")		  Dim TimeOut as Integer = Prefs.integerForKey("TimeOut") / 2		  If Lang = "gb" Then Lang = "en"		  		  // -- Try to get TVDB ID if only IMDb ID is available.		  // :1		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "[TVDB Alias]" + TVInfo, 1, 23 ) Else dlgProgress.debug( "[TVDB Alias]" + TVInfo )		  If ID.Left(2) = "tt" Then ID = IMDb2TVDB( ID )		  		  		  // -- Get general TVDB Info		  // :2		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "[TVDB Info]" + TVInfo ) Else dlgProgress.debug( "[TVDB Info]" + TVInfo )		  Dim TVDB as New JSONItem		  If ID.Left(2) <> "tt" Then		    Dim XMLString as String = DefineEncoding( sckt.Get( TVCore.URL( "Info", ID ), TimeOut ), Encodings.UTF8 )		    XMLString = DecodingFromHTMLMBS( XMLString )		    sckt.Close		    		    		    JSONString = XMLString.XML2JSON		    If JSONString.ValidJSON("TVDB Local") Then TVDB.Load JSONString		    If TVDB.HasName("Data") And TVDB.ToString.InStr( 0, "Series" ) > 0 And TVDB.Child("Data").HasName("Series") Then TVDB = TVDB.Child("Data").Child("Series")		    		    ProcessEpisodes XMLString		    		    XMLString = ""		    JSONString = ""		  End If		  		  		  // -- Get Actors info		  // :3		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "[TVDB Actors]" + TVInfo ) Else dlgProgress.debug( "[TVDB Actors]" + TVInfo )		  Dim TVDBActors as New JSONItem		  If ID.Left(2) <> "tt" Then		    JSONString = DefineEncoding( sckt.Get( TVCore.URL( "Actors", ID ), TimeOut ), Encodings.UTF8 )		    sckt.Close		    		    JSONString = JSONString.XML2JSON		    If JSONString.ValidJSON("TVDB Actors") Then TVDBActors.Load JSONString		    If TVDBActors.HasName("Actors") And TVDBActors.ToString.InStr( 0, """Actor""") > 0 Then TVDBActors = TVDBActors.Child("Actors") 'and TVDBActors.Child("Actors").HasName("Actor") And TVDBActors.Child("Actors").Child("Actor").IsArray Then TVDBActors = TVDBActors.Child("Actors")		    JSONString = ""		  End If		  		  		  // -- Get TVDB Art		  // :4		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "[TVDB Art]" + TVInfo ) Else dlgProgress.debug( "[TVDB Art]" + TVInfo )		  Dim TVDBArt as New JSONItem		  If ID.Left(2) <> "tt" Then		    JSONString = DefineEncoding( sckt.Get( TVCore.URL( "Art", ID ), TimeOut ), Encodings.UTF8 )		    sckt.Close		    		    JSONString = JSONString.XML2JSON		    If JSONString.ValidJSON( "TVDB Art" ) Then TVDBArt.Load JSONString		    'If TVDBArt.HasName("Banners") And TVDBArt.ToString.InStr("\""Banner\""") > 0 Then TVDBArt = TVDBArt.Child("Banners") 'And TVDBArt.Child("Banners").HasName("Banner") And TVDBArt.Child("Banners").Child("Banner").IsArray Then TVDBArt = TVDBArt.Child("Banners")		    If TVDBArt.HasName("Banners") And TVDBArt.ToString.InStr("""Banner""") > 0 And TVDBArt.Child("Banners").HasName("Banner") Then TVDBArt = TVDBArt.Child("Banners").Child("Banner")		    JSONString = ""		  End If		  		  		  // -- Get IMDb Info		  // :5		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "[IMDb]" + TVInfo ) Else dlgProgress.debug( "[IMDb]" + TVInfo )		  Dim IMDbID as String = ID		  If IMDbID.Left(2) <> "tt" Then		    If TVDB.HasName("IMDB_ID") And TVDB.Value("IMDB_ID") <> "" Then IMDbID = TVDB.Value("IMDB_ID")		  End If		  		  Dim IMDb as New JSONItem		  If IMDbID.Left(2) = "tt" Then IMDb = GetIMDbJSON( IMDbID )		  		  		  // -- Get FanartTV Info		  // :6		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "[Fanart.TV Art]" + TVInfo ) Else dlgProgress.debug( "[Fanart.TV]" + TVInfo )		  JSONString = Trim( DefineEncoding( sckt.Get( URLCore.FanartTV( ID ), TimeOut ), Encodings.UTF8 ) )		  		  Dim FirstBracketLoc as Integer = JSONString.InStr(2, "{" )		  JSONString = Trim( JSONString.Right( JSONString.Len - FirstBracketLoc + 1) )		  		  Dim FanartTVJSON as New JSONItem		  If JSONString.ValidJSON("Fanart.TV") Then FanartTVJSON.Load JSONString		  JSONString = ""		  		  		  // -- TVRage		  // :7		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", "[TVRage]" + TVInfo ) Else dlgProgress.debug( "[TVRage]" + TVInfo )		  Dim Title as String		  If TVDB.HasName("SeriesName") Then Title = TVDB.Value("SeriesName")		  If Title = "" And IMDb.HasName("TITLE") Then Title = IMDb.Value("TITLE")		  		  'Dim TVRage as New JSONItem		  If Title <> "" Then ShowStatus( Title )		  		  		  		  // ## ---------- Process Information ---------- ##		  // :8		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kProcessing + ":", Trim( TVInfo ) ) Else dlgProgress.debug( Loc.kProcessing + TVInfo )		  		  // ## IDs		  TVAttr.ID_TVDB   = ID		  TVAttr.ID_IMDb   = IMDbID		  'TVAttr.ID_TVRage = TVRageID		  		  If TVDB.HasName("IMDB_ID") And TVDB.Value("IMDB_ID") <> "" Then		    TVAttr.ID_IMDb = TVDB.Value("IMDB_ID")		  ElseIf IMDb.HasName("TITLE_ID") And IMDb.Value("TITLE_ID") <> "" Then		    TVAttr.ID_IMDb = IMDb.Value("TITLE_ID")		  End If		  		  If TVDB.HasName("id") And TVDB.Value("id") <> "" Then TVAttr.ID_TVDB = TVDB.Value("id")		  'If TVRage <> Nil And TVRage.HasName("showid") And TVRage.Value("showid") <> "" Then TVAttr.ID_TVRage = TVRage.Value("showid")		  		  		  // ## Title		  If Update Then TVAttr.Title = PrevTitle		  'If TVAttr.Title = "" And IMDb.HasName("USA_TITLE") And Lang = "en" Then TVAttr.Title = IMDb.Value("USA_TITLE")		  If TVAttr.Title = "" And IMDb.HasName("TITLE") And Lang <> "en" Then TVAttr.Title = IMDb.Value("TITLE")		  If TVAttr.Title = "" And TVDB.HasName("SeriesName") Then TVAttr.Title = TVDB.Value("SeriesName")		  		  // ## Title Original		  If Update Then TVAttr.TitleOriginal = PrevTitleOriginal		  If TVAttr.TitleOriginal = "" And IMDb.HasName("ORIGINAL_TITLE") And IMDb.Value("ORIGINAL_TITLE") <> "" Then TVAttr.TitleOriginal = IMDb.Value("ORIGINAL_TITLE")		  If TVAttr.TitleOriginal = "" And IMDb.HasName("TITLE")          And IMDb.Value("TITLE")          <> "" Then TVAttr.TitleOriginal = IMDb.Value("TITLE")		  If TVAttr.TitleOriginal = "" And TVAttr.Title <> "" Then TVAttr.TitleOriginal = TVAttr.Title		  If TVAttr.TitleOriginal <> "" And TVAttr.Title = "" Then TVAttr.Title = TVAttr.TitleOriginal		  		  // ## Sort Title		  If PrevTitleSort = "" Then TVAttr.TitleSort = Articulator( TVAttr.Title ) Else TVAttr.TitleSort = PrevTitleSort		  		  // ## Tagline		  If IMDb.HasName("TAGLINE") And IMDb.Value("TAGLINE") <> "" Then TVAttr.DescriptionTagline = IMDb.Value("TAGLINE")		  TVAttr.DescriptionTagline = Trim( RegExThis( TVAttr.DescriptionTagline, "\(Season.*\)", "" ) )		  If TVAttr.DescriptionTagline <> "" Then TVAttr.DescriptionTaglines.Append TVAttr.DescriptionTagline		  		  // Extra Taglines		  If IMDb.HasName("TAGLINES") Then		    For i as Integer = 0 to IMDb.Child("TAGLINES").Count - 1		      TVAttr.DescriptionTaglines.Append Trim( RegExThis( IMDb.Child("TAGLINES").Value(i), "\(Season.*\)", "" ) )		    Next		    TVAttr.DescriptionTaglines = RemoveDuplicatesFromArray( TVAttr.DescriptionTaglines )		    If TVAttr.DescriptionTagline = "" And TVAttr.DescriptionTaglines.Ubound > -1 Then TVAttr.DescriptionTagline = TVAttr.DescriptionTaglines(0)		  End If		  		  		  		  // ## Plot		  If TVDB.HasName("Overview") And TVDB.Value("Overview") <> "" Then TVAttr.DescriptionPlot = TVDB.Value("Overview")		  // Partial storyline		  If ( Lang = "en" OR Lang = "gb" OR TVAttr.DescriptionPlot = "" ) And IMDb.HasName("STORYLINE")  And IMDb.Value("STORYLINE") <> "" And IMDb.Value("STORYLINE").Len > TVAttr.DescriptionPlot.Len Then		    TVAttr.DescriptionPlot = IMDb.Value("STORYLINE")		  End If		  		  // Full Storyline		  If ( Lang = "en" OR Lang = "gb" OR TVAttr.DescriptionPlot = "" ) And IMDb.HasName("STORYLINES") And IMDb.Child("STORYLINES").Count > 0 Then		    Dim Plot as String = IMDb.Child("STORYLINES").Value( IMDb.Child("STORYLINES").Count -1 )		    		    If Plot.InStr( 0, EndOfLine.UNIX + EndOfLine.UNIX + EndOfLine.UNIX + EndOfLine.UNIX + EndOfLine.UNIX ) > 0 Then		      		      Dim sx1 as Integer = Plot.InStr( 0, EndOfLine.UNIX + EndOfLine.UNIX + EndOfLine.UNIX + EndOfLine.UNIX + EndOfLine.UNIX )		      Plot = Plot.Left( sx1 )		      'If Len( Plot )  > Len( TVAttr.DescriptionPlot ) Then		      TVAttr.DescriptionPlot = TVAttr.DescriptionPlot.Left( sx1 )		    End If		    		  End If		  		  		  // ## Outline		  If IMDb.HasName("PLOT") And IMDb.Value("PLOT") <> "" Then TVAttr.DescriptionOutline = IMDb.Value("PLOT")		  		  If ( TVAttr.DescriptionPlot = "" And TVAttr.DescriptionPlot <> "" ) OR ( Lang <> "en" And Lang <> "gb" And TVAttr.DescriptionPlot <> "" ) Then		    Dim sx1 as Integer = TVAttr.DescriptionPlot.InStr( 0, "." ) + 1		    If sx1 > 0 Then TVAttr.DescriptionOutline = TVAttr.DescriptionPlot.Left( sx1 )		  End If		  		  		  // ## Premieré		  If TVDB.HasName("FirstAired") And TVDB.Value("FirstAired") <> "" And Len( TVDB.Value("FirstAired") ) > Len( TVAttr.DatePremiered ) Then TVAttr.DatePremiered = TVDB.Value("FirstAired") // Date		  If Val( TVAttr.DatePremiered.left(4) ) > 1000 Then TVAttr.DateYear = Val( TVAttr.DatePremiered.Left(4) ) // Year		  		  		  // ## MPAA		  'If TVDB.HasName("ContentRating") And TVDB.Value("ContentRating") <> "" Then TVAttr.RatingMPAA = TVDB.Value("ContentRating")		  'If IMDb.HasName("MPAA_RATING") And Trim( IMDb.Value("MPAA_RATING") ) <> "" Then TVAttr.RatingMPAA = IMDb.Value("MPAA_RATING")		  		  If IMDb.HasName("CERTIFICATIONS") Then		    For i as Integer = 0 to IMDb.Child("CERTIFICATIONS").Count -1		      TVAttr.RatingCertification.Append IMDb.Child("CERTIFICATIONS").Value(i)		    Next		  End If		  TVAttr.RatingCertification = RemoveDuplicatesFromArray( TVAttr.RatingCertification )		  		  		  Dim USAMPAA as String		  For i as Integer = 0 to TVAttr.RatingCertification.Ubound		    If USAMPAA = "" And FlagCountry( TVAttr.RatingCertification(i).NthField(":", 1) ) = "en" Then USAMPAA = TVAttr.RatingCertification(i).NthField( ":", 2 )		    If FlagCountry( TVAttr.RatingCertification(i).NthField(":", 1) )  = Prefs.textStringForKey("DBLanguage") Then		      TVAttr.RatingMPAA = TVAttr.RatingCertification(i).NthField(":", 2)		      'If TVAttr.ART_MPAARating <> Nil Then Exit		    End If		  Next		  If TVAttr.RatingMPAA = "" Then TVAttr.RatingMPAA = USAMPAA		  		  		  // ## Rating		  If TVDB.HasName("Rating") And TVDB.Value("Rating") <> "" Then TVAttr.Rating = Val( TVDB.Value("Rating") )		  If TVDB.HasName("RatingCount") And TVDB.Value("RatingCount") <> "" Then TVAttr.RatingVotes = Val( TVDB.Value("RatingCount") )		  		  If IMDb.HasName("RATING") And IMDb.Value("RATING") <> "" Then TVAttr.Rating = Val( IMDb.Value("RATING") )		  If IMDb.HasName("VOTES")  And IMDb.Value("VOTES")  <> "" Then TVAttr.RatingVotes = Val( IMDb.Value("VOTES").ReplaceAll(",","") )		  		  		  // ## Genres		  ReDim TVAttr.Genres(-1)		  TVAttr.Genres = PrevGenres		  Dim tmpArray() as String		  		  // TVDB		  If TVDB.HasName("Genre") Then tmpArray = Split( TVDB.Value("Genre").ReplaceAll("Science-Fiction","Science Fiction").ReplaceAll(" and ", " & "), "|" )		  		  // IMDB		  If ( Lang = "en" or Lang = "gb" ) And IMDb.HasName("GENRES") Then		    Dim Arry() as String = JSONArray( IMDb.Child("GENRES") )		    For i as Integer = 0 to Arry.Ubound		      tmpArray.Append Arry(i).ReplaceAll("Sci-Fi", "Science Fiction").ReplaceAll(" and ", " & ")		    Next		  End If		  		  // TVRage		  'If ( Lang = "en" OR Lang = "gb" ) And TVRage.HasName("genres") Then		  ''Dim Arry() as String = JSONArray( TVRage.Child("genres"), "genre" )		  'For i as Integer = 0 to TVRage.Child("genres").Count - 1		  'tmpArray.Append TVRage.Child("genres").Value(i).ReplaceAll("Sci-Fi", "Science Fiction").ReplaceAll(" and ", " & ")		  'Next		  'End If		  		  // Remove empties, and add to genres		  For i as Integer = 0 to tmpArray.Ubound		    If Trim( tmpArray(i) ) <> "" Then TVAttr.Genres.Append tmpArray(i)		  Next		  		  TVAttr.Genres = RemoveDuplicatesFromArray( TVAttr.Genres )		  		  // Apparantly, boxee only supports uppercase genres?		  If Prefs.textStringForKey("MediaPlayer") = "Boxee" Then		    For i as Integer = 0 to TVAttr.Genres.Ubound		      TVAttr.Genres(i) = TVAttr.Genres(i).Uppercase		    Next		  End If		  		  		  // ## Studios		  If TVDB.HasName("Network") And TVDB.Value("Network") <> "" Then TVAttr.TVNetwork = TVDB.Value("Network")		  If IMDb.HasName("STUDIOS") Then		    For i as Integer = 0 to IMDb.Child("STUDIOS").Count - 1		      TVAttr.Studios.Append IMDb.Child("STUDIOS").Value(i)		    Next		  End If		  		  // ## Country		  If IMDb.HasName("COUNTRY") Then		    For i as Integer = 0 to IMDb.Child("COUNTRY").Count - 1		      TVAttr.Countries.Append IMDb.Child("COUNTRY").Value(i)		    Next		  End If		  		  TVAttr.Countries = RemoveDuplicatesFromArray( TVAttr.Countries )		  		  // ## Language		  If IMDb.HasName("LANGUAGE") Then		    For i as Integer = 0 to IMDb.Child("LANGUAGE").Count - 1		      TVAttr.Languages.Append IMDb.Child("LANGUAGE").Value(i)		    Next		  End If		  		  // ## Recommendations		  If Prefs.textStringForKey("MediaPlayer") <> "YAMJ" Then		    If IMDb.HasName("RECOMMENDATIONS") And IMDb.Child("RECOMMENDATIONS").IsArray And IMDb.Child("RECOMMENDATIONS").Count > 0 Then		      For i as Integer = 0 to IMDb.Child("RECOMMENDATIONS").Count - 1		        Dim RecTitle as String = Trim( RegExThis( IMDb.Child("RECOMMENDATIONS").Value(i), "\[.*\]", "" ) )		        Dim RecID as String    = Trim( RegExThis( IMDb.Child("RECOMMENDATIONS").Value(i), ".*\[", "" ) ).ReplaceAll("]","")		        If RecTitle = "" Then RecTitle = Loc.kNotAvailable		        		        TVAttr.RecShows.Append    RecTitle		        TVAttr.RecShow_IDs.Append RecID		      Next		    End If		  End If		  		  // ## Director(s)		  If IMDb.HasName("DIRECTORS") Then		    For i as Integer = 0 to IMDb.Child("DIRECTORS").Count - 1		      If TVAttr.CreditDirector = "" Then		        TVAttr.CreditDirector = IMDb.Child("DIRECTORS").Value(i)		      Else		        TVAttr.CreditDirector = TVAttr.CreditDirector + ", " + IMDb.Child("DIRECTORS").Value(i)		      End If		    Next		  End If		  		  // ## Writer(s)		  If IMDb.HasName("WRITERS") Then		    For i as Integer = 0 to IMDb.Child("WRITERS").Count - 1		      If TVAttr.CreditWriter = "" Then		        TVAttr.CreditWriter = IMDb.Child("WRITERS").Value(i)		      Else		        TVAttr.CreditWriter = TVAttr.CreditWriter + ", " + IMDb.Child("WRITERS").Value(i)		      End If		    Next		  End If		  		  // ## Actors Starring		  If IMDb.HasName("STARS") Then		    For i as Integer = 0 to IMDb.Child("STARS").Count - 1		      TVAttr.ActorStars.Append IMDb.Child("STARS").Value(i)		    Next		  End If		  		  // ## Actors		  // -- Prefer IMDb over TVDB		  If IMDb.HasName("CAST") And IMDb.HasName("ROLES") ANd IMDb.HasName("CASTTHUMBS") Then		    		    For i as Integer = 0 to IMDb.Child("CAST").Count -1		      		      // If only one item, arrayify it.		      If TVDBActors.HasName("Actor") And NOT TVDBActors.Child("Actor").IsArray Then		        Dim jItem as New JSONItem		        jItem = TVDBActors.Child("Actor")		        TVDBActors.Value("Actor") = New JSONItem		        TVDBActors.Child("Actor").Value(0) = jItem		      End If		      		      // Match names with TVDB ID's		      If TVDBActors.HasName("Actor") Then		        Dim b as Boolean = False		        For n as Integer = 0 to TVDBActors.Child("Actor").Count -1		          If TVDBActors.Child("Actor").Child(n).Value("Name") = IMDb.Child("CAST").Value(i) Then		            TVAttr.Actor_ID.Append TVDBActors.Child("Actor").Child(n).Value("id")		            b = True		            Exit		          End If		        Next		        If NOT b Then TVAttr.Actor_ID.Append ""		      Else		        TVAttr.Actor_ID.Append ""		      End If		      		      TVAttr.Actor_Name.Append      IMDb.Child("CAST").Value(i)		      TVAttr.Actor_Role.Append      IMDb.Child("ROLES").Value(i)		      TVAttr.Actor_ThumbURL.Append  IMDb.Child("CASTTHUMBS").Value(i)		    Next		    		  ElseIf TVDBActors.HasName("Actor") And TVDBActors.Child("Actor").IsArray Then		    For i as Integer = 0 To TVDBActors.Child("Actor").Count - 1		      Dim jItem as New JSONItem		      jItem = TVDBActors.Child("Actor").Child(i)		      		      If jItem.HasName("id")    Then TVAttr.Actor_ID.Append       jItem.Value("id")   Else TVAttr.Actor_ID.Append   ""		      If jItem.HasName("Name")  Then TVAttr.Actor_Name.Append     jItem.Value("Name") Else TVAttr.Actor_Name.Append ""		      If jItem.HasName("Role")  Then TVAttr.Actor_Role.Append     jItem.Value("Role") Else TVAttr.Actor_Role.Append ""		      If jItem.HasName("Image") Then TVAttr.Actor_ThumbURL.Append TVCore.GraphicsPath + jItem.Value("Image") Else TVAttr.Actor_ThumbURL.Append ""		    Next		  End If		  		  		  // ## Download ExtraArt		  GetArt( TVDBArt, FanartTVJSON )		  		  // Copy file to "folder.jpg".		  Dim FolderIMG as FolderItem		  Select Case Prefs.textStringForKey( "FolderJPGForFileTV" )		    		  Case Loc.kPoster		    FolderIMG = TVAttr.FolderParent.Child("poster.jpg")		  Case Loc.kBanner		    FolderIMG = TVAttr.FolderParent.Child("banner.jpg")		  Case Loc.kLogo		    FolderIMG = TVAttr.FolderParent.Child("logo.png")		  Case Loc.kClearArt		    FolderIMG = TVAttr.FolderParent.Child("clearart.png")		  Case Loc.kCharacterArt		    FolderIMG = TVAttr.FolderParent.Child("character.png")		  Case Loc.kThumb		    FolderIMG = TVAttr.FolderParent.Child("landscape.jpg")		    		  End Select		  		  If FolderIMG <> Nil And FolderIMG.Exists Then FolderIMG.CopyFileTo( TVAttr.FolderParent.Child( "folder" + "." + FolderIMG.NameExtension ) )		  		  		  // 20: Write NFO file.		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kMetadata + ":", Loc.kWritingNFO ) Else dlgProgress.debug( Loc.kWritingNFO )		  TVAttr.NFOWrite( TVAttr.FolderParent )		  		  // 21: Auto Manage TV Shows Folder		  If NOT CommonCore.MassSearch And Prefs.boolForKey("AutoManageMedia") Then SingleRenamer( TVAttr.FolderParent, -1, True )		  		  		  // Download actor images.		  If Prefs.boolForKey("CacheActor") Then		    If NOT TVAttr.FolderParent.Child("actors").Exists Then TVAttr.FolderParent.Child("actors").CreateAsFolder		    For i as Integer = 0 to TVAttr.Actor_ThumbURL.Ubound		      If TVAttr.Actor_ThumbURL(i) <> "" And TVAttr.Actor_Name(i) <> "" Then		        Dim tmpPic as Picture = URL2Picture( TVAttr.Actor_ThumbURL(i), TVAttr.Actor_Name(i), "jpg", TVAttr.FolderParent.Child("actors") )		        If tmpPic <> Nil Then TVAttr.Actor_ThumbURL(i) = TVAttr.FolderParent.ShellPath.ReplaceAll("\","") + "/actors/" + TVAttr.Actor_Name(i) + ".jpg"		        dlgProgress.Debug( "Downloading " + Str( i + 1 ) + Loc.k1of2 + Str( TVAttr.Actor_ThumbURL.Ubound + 1 )  + " " + TVAttr.Actor_Name(i) + " " + Loc.kThumb + "..." )		      End If		    Next		    dlgProgress.Debug ""		  End If		  TVAttr.NFOWrite( TVAttr.FolderParent )		  		  dlgProgress.Debug( "" )		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IMDb2TVDB(IMDbID as String) As String		  Dim Sckt as New TVDBSckt		  		  If IMDbID.Left(2) = "tt" Then		    Dim JSONString as String = DefineEncoding( sckt.Get( TVCore.URL( "InfoAlias", IMDbID ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		    sckt.Close		    		    JSONString = JSONString.XML2JSON		    		    Dim TVDBAlias as New JSONItem		    If JSONString.ValidJSON("TVDB Alias") Then TVDBAlias.Load JSONString		    		    If TVDBAlias.HasName("Data") And TVDBAlias.ToString.InStr( 0, "Series" ) > 0 And TVDBAlias.Child("Data").HasName("Series") And TVDBAlias.Child("Data").Child("Series").HasName("id") Then		      Return TVDBAlias.Child("Data").Child("Series").Value("id")		    Else		      Return IMDbID		    End If		    		    		  Else		    Return IMDbID		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ProcessEpGuide(XMLString as String, SeriesID as String) As JSONItem		  		  XMLString = XMLString.ReplaceAll( XMLString.MyMid( "<series>", "</series>" ), "" ).ReplaceAll( "<Series></Series>", "" )		  Dim Destination as FolderItem = Preferences.fAppSupport.Child( "EpisodeGuides" )		  If Destination <> Nil And NOT Destination.Exists Then Destination.CreateAsFolder		  'Dim JSONString as String = XMLString.XML2JSON		  		  		  // ## Load the old guide.		  Dim OldGuide as New JSONItem		  Dim JSONString as String = ReadTextFile( Destination.Child( SeriesID + ".json" ) )		  If JSONString <> "" Then OldGuide.Load( JSONString )		  If OldGuide.HasName("episodes") Then OldGuide = OldGuide.Child("episodes")		  		  If NOT OldGuide.IsArray Then		    Dim Daddy as New JSONItem		    Daddy.Child(0) = OldGuide		    OldGuide = Daddy		  End If		  		  		  // ## Set the New Guide.		  Dim NewGuide as New JSONItem		  NewGuide.Load( XMLString.XML2JSON )		  If NewGuide.HasName("Data") And NewGuide.ToString.InStr( 0, """Episode""" ) > 0 And NewGuide.Child("Data").HasName("Episode") Then NewGuide = NewGuide.Child("Data").Child("Episode")		  		  // If only a single episode was available, re-convert guide to Array.		  If NOT NewGuide.IsArray Then		    Dim Daddy as New JSONItem		    Daddy.Child(0) = NewGuide		    NewGuide = Daddy		  End If		  		  		  		  		  Dim UpdatedGuide as New JSONItem		  UpdatedGuide.Value( "episodes" ) = New JSONItem		  		  		  For i as Integer = 0 to NewGuide.Count -1		    Dim OldEpisodeData as New JSONItem, NewEpisodeData as New JSONItem, UpdateEpisodeData as New JSONItem		    NewEpisodeData = NewGuide.Child(i)		    		    // Match OldEpisde to New Episode		    If NewEpisodeData.HasName("SeasonNumber") And NewEpisodeData.HasName("EpisodeNumber") Then		      For n as Integer = 0 to OldGuide.Count -1		        OldEpisodeData = OldGuide.Child(n)		        		        If OldEpisodeData.HasName("SeasonNumber") And OldEpisodeData.Value("SeasonNumber") = NewEpisodeData.Value("SeasonNumber") And _		          OldEpisodeData.HasName("EpisodeNumber") And OldEpisodeData.Value("EpisodeNumber") = NewEpisodeData.Value("EpisodeNumber") Then		          Exit		        End If		        OldEpisodeData = Nil		      Next		      'If OldEpisodeData = Nil Then OldEpisodeData.Load( "" )		    End If		    		    Dim dSeason, dEpisode as String = NewEpisodeData.Value("SeasonNumber")		    dEpisode = NewEpisodeData.Value("EpisodeNumber")		    		    If dSeason.len  = 1 Then dSeason = "0" + dSeason		    If dEpisode.len = 1 Then dEpisode = "0" + dEpisode		    		    dlgProgress.Debug( Loc.kEpisodeGuide + ": " + "S" + dSeason + "E" + dEpisode + " - " + NewEpisodeData.Value("EpisodeName") )		    		    UpdateEpisodeData.Value("id")          = NewEpisodeData.Value("id")		    UpdateEpisodeData.Value("IMDB_ID")     = NewEpisodeData.Value("IMDB_ID")		    UpdateEpisodeData.Value("EpisodeName") = NewEpisodeData.Value("EpisodeName")		    UpdateEpisodeData.Value("SeasonNumber") = NewEpisodeData.Value("SeasonNumber")		    UpdateEpisodeData.Value("EpisodeNumber") = NewEpisodeData.Value("EpisodeNumber")		    		    // Get episode IMDB data if possible, and episode hasn't been watched yet.		    Dim IMDbEpisode as New JSONItem		    If UpdateEpisodeData.Value("IMDB_ID") <> "" Then		      If OldEpisodeData <> Nil And OldEpisodeData.HasName("IMDB_ID") And OldEpisodeData.Value("IMDB_ID") = "" Then		        IMDbEpisode = GetIMDbJSON( UpdateEpisodeData.Value("IMDB_ID"), True )		      ElseIf OldEpisodeData = Nil Then		        IMDbEpisode = GetIMDbJSON( UpdateEpisodeData.Value("IMDB_ID"), True )		      End If		    End If		    		    		    // Special deliveries		    If NewEpisodeData.HasName("airsbefore_season") Then		      UpdateEpisodeData.Value("airsafter_season") = NewEpisodeData.Value("airsafter_season")		      'If NewEpisodeData.Value("airsafter_season") = "" And NewEpisodeData.Value("airsbefore_season") > 0 Then UpdateEpisodeData.Value("airsafter_season") = NewEpisodeData.Value("airsbefore_season") - 1		      UpdateEpisodeData.Value("airsbefore_season") = NewEpisodeData.Value("airsbefore_season")		      'If NewEpisodeData.Value("airsbefore_season") = "" And NewEpisodeData.Value("airsafter_season") > 0 Then UpdateEpisodeData.Value("airsbefore_season") = NewEpisodeData.Value("airsafter_season") + 1		      If NewEpisodeData.HasName("airsbefore_episode") And NewEpisodeData.Value("airsbefore_episode") <> "" Then		        UpdateEpisodeData.Value("airsbefore_episode") = NewEpisodeData.Value("airsbefore_episode")		      Else		        UpdateEpisodeData.Value("airsbefore_episode") = "4096"		      End If		    End If		    		    If OldEpisodeData <> Nil And OldEpisodeData.HasName("airsafterseason") Then		      UpdateEpisodeData.Value("airsafterseason")   = OldEpisodeData.Value("airsafterseason")		      UpdateEpisodeData.Value("airsbeforeseason")  = OldEpisodeData.Value("airsbeforeseason")		      UpdateEpisodeData.Value("airsbeforeepisode") = OldEpisodeData.Value("airsbeforeepisode")		    End If		    		    // AirDate		    UpdateEpisodeData.Value("FirstAired") = NewEpisodeData.Value("FirstAired")		    		    // Runtime		    If OldEpisodeData <> Nil ANd OldEpisodeData.HasName("Runtime") Then UpdateEpisodeData.Value("Runtime") = OldEpisodeData.HasName("Runtime")		    If IMDbEpisode <> Nil And IMDbEpisode.HasName("RUNTIME") Then UpdateEpisodeData.Value("Runtime") = IMDbEpisode.Value("RUNTIME")		    		    // Rating		    UpdateEpisodeData.Value("Rating") = NewEpisodeData.Value("Rating")		    If IMDbEpisode <> Nil And IMDbEpisode.HasName("RATING") Then UpdateEpisodeData.Value("Rating") = IMDbEpisode.Value("RATING")		    		    UpdateEpisodeData.Value("Votes") = NewEpisodeData.Value("RatingCount")		    If IMDbEpisode <> Nil And IMDbEpisode.HasName("VOTES") Then UpdateEpisodeData.Value("Votes") = IMDbEpisode.Value("VOTES")		    		    		    		    // Watched status		    If OldEpisodeData <> Nil And OldEpisodeData.HasName("watched") And OldEpisodeData.Value("watched") <> "" Then		      UpdateEpisodeData.Value("watched") = OldEpisodeData.Value("watched")		    Else		      UpdateEpisodeData.Value("watched") = False		    End If		    		    // Description		    // -- Outline		    'UpdateEpisodeData.Value("outline") = ""		    'If IMDbEpisode <> Nil And IMDbEpisode.HasName("PLOT") Then UpdateEpisodeData.Value("outline") = IMDbEpisode.Value("PLOT")		    // -- Plot		    UpdateEpisodeData.Value("plot") = NewEpisodeData.Value("Overview")		    If IMDbEpisode <> Nil And IMDbEpisode.HasName("STORYLINE") And _ ' IMDbEpisode.Value("STORYLINE").InStr( 0, "»" ) = 0 And _		      ( NOT UpdateEpisodeData.HasName("Plot") OR UpdateEpisodeData.Value("Plot") = "" ) Then		      UpdateEpisodeData.Value("plot") = Trim( IMDbEpisode.Value("STORYLINE").ReplaceAll("»", "") )		    End If		    		    // Thumb		    UpdateEpisodeData.Value("filename") = ""		    If NewEpisodeData.HasName("filename") And NewEpisodeData.Value("filename") <> "" Then UpdateEpisodeData.Value("filename") = TVCore.GraphicsPath + NewEpisodeData.Value("filename")		    // Doesn't give good results:		    'If IMDbEpisode <> Nil And IMDbEpisode.HasName("POSTER_FULL") And IMDbEpisode.Value("POSTER_FULL") <> "" Then		    'UpdateEpisodeData.Value("filename") = IMDbEpisode.Value("POSTER_FULL").ReplaceAll("_V1._SY0.", "_V1._SY750.")		    'End If		    		    // #Credits		    // - Directors		    Dim Directors as String = NewEpisodeData.Value("Director")		    If Directors.Left(1)  = "|" Then Directors = Directors.Right( Directors.Len - 1 )		    If Directors.Right(1) = "|" Then Directors = Directors.Left(  Directors.Len - 1 )		    Directors = Directors.ReplaceAll("|", ", ")		    UpdateEpisodeData.Value( "director" ) = Trim( Directors )		    		    // - Writers		    Dim Writers as String = NewEpisodeData.Value("Writer")		    If Writers.Left(1)  = "|" Then Writers = Writers.Right( Writers.Len - 1 )		    If Writers.Right(1) = "|" Then Writers = Writers.Left(  Writers.Len - 1 )		    Writers = Writers.ReplaceAll("|", ", ")		    UpdateEpisodeData.Value( "credits" ) = Trim( Writers )		    		    // - Guest Stars		    Dim GuestStars as String = NewEpisodeData.Value("GuestStars")		    If GuestStars.Left(1)  = "|" Then GuestStars = GuestStars.Right( GuestStars.Len - 1 )		    If GuestStars.Right(1) = "|" Then GuestStars = GuestStars.Left(  GuestStars.Len - 1 )		    GuestStars = GuestStars.ReplaceAll("|", ", ")		    UpdateEpisodeData.Value( "guests" ) = Trim( GuestStars )		    		    // - Actors		    UpdateEpisodeData.Value("Cast")       = New JSONItem		    UpdateEpisodeData.Value("Roles")      = New JSONItem		    UpdateEpisodeData.Value("CastThumbs") = New JSONItem		    		    If IMDbEpisode <> Nil And IMDbEpisode.HasName("CAST") Then		      For n as Integer = 0 to IMDbEpisode.Child("CAST").Count -1		        UpdateEpisodeData.Child("Cast").Value(n) = IMDbEpisode.Child("CAST").Value(n)		        UpdateEpisodeData.Child("Roles").Value(n) = IMDbEpisode.Child("ROLES").Value(n)		        UpdateEpisodeData.Child("CastThumbs").Value(n) = IMDbEpisode.Child("CASTTHUMBS").Value(n)		      Next		      		    ElseIf OldEpisodeData <> Nil And OldEpisodeData.HasName("Cast") Then		      UpdateEpisodeData.Child("Cast") = OldEpisodeData.Child("Cast")		      UpdateEpisodeData.Child("Roles") = OldEpisodeData.Child("Roles")		      UpdateEpisodeData.Child("CastThumbs") = OldEpisodeData.Child("CastThumbs")		    End If		    		    		    UpdatedGuide.Child("episodes").Append UpdateEpisodeData		    UpdatedGuide.Compact = False		  Next		  		  		  // ## Write EpGuide to Disk.		  WriteTextFile( UpdatedGuide.ToString, Destination.Child( SeriesID + ".json" ) )		  		  If UpdatedGuide.HasName("episodes") Then		    Return UpdatedGuide.Child("episodes")		  Else		    Return UpdatedGuide		  End If		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ProcessEpisodes(XMLString as String)		  If XMLString = "" Then Return		  		  		  Dim ID as String = XMLString.MyMid( "<series>", "</series>" )		  ID = ID.MyMid( "<id>","</id>" )		  Dim SeriesName as String = XMLString.MyMid( "<SeriesName>", "</SeriesName>" )		  		  Dim EpisodeGuide as New JSONItem		  EpisodeGuide = ProcessEpGuide( XMLString, ID )		  XMLString = ""		  		  		  Dim EpisodeFiles() as FolderItem = FindEpisodeFiles( TVAttr.FolderParent )		  		  For i as Integer = 0 to EpisodeFiles.Ubound		    		    		    // Read previous NFO file.		    Dim NFOFile as FolderItem = EpisodeFiles(i).Parent.Child( EpisodeFiles(i).NameWithoutExtension + ".nfo" )		    		    Dim ExistingNFO as New JSONItem		    If NFOFile <> Nil And NFOFile.Exists Then		      ExistingNFO.Load ReadTextFile( NFOFile ).XML2JSON		      If ExistingNFO.HasName("episodedetails") Then ExistingNFO = ExistingNFO.Child("episodedetails")		    End If		    		    		    // Check the EpisodeGuide and match it with the current episode.		    Dim OOxOO as String = RegExEpisode( EpisodeFiles(i) )		    Dim SeasonNr, Season as Integer = Val( OOxOO.NthField( "x", 1 ) )		    Dim EpisodeNr as Integer = Val( OOxOO.NthField( "x", 2 ) )		    If SeasonNr = -1 Then SeasonNr = 1		    		    If ExistingNFO.HasName("season") And ExistingNFO.Value("season") <> "" Then SeasonNr = ExistingNFO.Value("season")		    If ExistingNFO.HasName("episode") And ExistingNFO.Value("episode") <> "" Then EpisodeNr = ExistingNFO.Value("episode")		    		    		    // Match episode to episodeguide NFO.		    Dim ThisEpisode as New JSONItem		    For n as Integer = 0 to EpisodeGuide.Count -1		      ThisEpisode = EpisodeGuide.Child(n)		      		      If ThisEpisode.HasName("SeasonNumber") And Val( ThisEpisode.Value("SeasonNumber") ) = SeasonNr And _		        ThisEpisode.HasName("EpisodeNumber") And Val( ThisEpisode.Value("EpisodeNumber") ) = EpisodeNr Then Exit		        ThisEpisode = Nil		    Next		    If ThisEpisode = Nil Then Continue		    		    		    // Display progress information.		    Dim SeasonDisplay as String = Str( SeasonNr )		    If SeasonDisplay.Len = 1 Then SeasonDisplay = "0" + SeasonDisplay		    		    Dim EpisodeDisplay as String = Str( EpisodeNr )		    If EpisodeDisplay.Len = 1 Then EpisodeDisplay = "0" + EpisodeDisplay		    		    dlgProgress.Debug( "S" + SeasonDisplay + "E" + EpisodeDisplay + " - " + ThisEpisode.Value("EpisodeName") )		    		    		    // Process Episode NFO.		    Dim Xml as New XmlDocument		    Dim xRoot, xNode, xItem as XmlNode		    Xml.PreserveWhitespace = True		    		    xRoot = Xml.AppendChild( Xml.CreateElement( "episodedetails" ) )		    		    // TVDB Episode ID		    If ThisEpisode.HasName("id") Then		      If Prefs.textStringForKey("MediaPlayer") <> "Boxee" Then		        xNode = xRoot.AppendNewChild( "id" )		        xNode.SetValue( ThisEpisode.Value("id") )		        xNode.SetAttribute("moviedb", "TVDB")		      Else		        xRoot.AppendSimpleChild( "boxeeTVDB", ThisEpisode.Value("id") )		      End If		    End If		    		    // IMDb Episode ID		    If ThisEpisode.HasName("IMDB_ID") And ThisEpisode.Value("IMDB_ID") <> "" Then		      If Prefs.textStringForKey("MediaPlayer") <> "Boxee" Then		        xNode = xRoot.AppendNewChild( "id" )		        xNode.SetValue( ThisEpisode.Value("IMDB_ID") )		        xNode.SetAttribute("moviedb", "IMDb")		      Else		        xRoot.AppendSimpleChild( "boxeeIMDb", ThisEpisode.Value("IMDB_ID") )		      End If		    End If		    		    // About episode		    If ThisEpisode.Value("EpisodeName") <> "" Then xRoot.AppendSimpleChild( "title", ThisEpisode.Value("EpisodeName") )		    		    // Season x Episode		    If ThisEpisode.Value("SeasonNumber")  <> "" Then xRoot.AppendSimpleChild( "season", ThisEpisode.Value( "SeasonNumber" ) )		    If ThisEpisode.Value("EpisodeNumber") <> "" Then xRoot.AppendSimpleChild( "episode", ThisEpisode.Value( "EpisodeNumber" ) )		    		    // Air Date		    If ThisEpisode.Value("FirstAired") <> "" Then xRoot.AppendSimpleChild( "aired", ThisEpisode.Value( "FirstAired" ) )		    		    // Special episode airs before:		    If SeasonNr = 0 And ThisEpisode.HasName("airsbefore_season") And ThisEpisode.Value("airsbefore_season") <> "" Then		      xRoot.AppendSimpleChild( "displayseason", ThisEpisode.Value("airsbefore_season") )		      		      If ThisEpisode.HasName("airsbefore_episode") And ThisEpisode.Value("airsbefore_episode") <> "" Then		        xRoot.AppendSimpleChild( "displayepisode", ThisEpisode.Value("airsbefore_episode") )		      Else		        xRoot.AppendSimpleChild( "displayepisode", "4096" )		      End If		      		      xRoot.AppendSimpleChild( "airsafterseason",   ThisEpisode.Value("airsafter_season") )		      xRoot.AppendSimpleChild( "airsbeforeseason",  ThisEpisode.Value("airsbefore_season") )		      xRoot.AppendSimpleChild( "airsbeforeepisode", ThisEpisode.Value("airsbefore_episode") )		    End If		    		    // Runtime		    If ThisEpisode.HasName("Runtime") Then xRoot.AppendSimpleChild( "runtime", ThisEpisode.Value("Runtime") )		    		    // Rating		    xRoot.AppendSimpleChild( "rating", ThisEpisode.Value("Rating") )		    xRoot.AppendSimpleChild( "votes",  ThisEpisode.Value("Votes") )		    		    // Watched / Unwatched		    If ThisEpisode.HasName("watched") And ThisEpisode.Value("watched") = True Then		      xRoot.AppendSimpleChild( "playcount", "1" ) // Because XBMC actually doesn't read the 'watched' tag.		      xRoot.AppendSimpleChild( "watched", ThisEpisode.Value("watched" ) ) // Maybe someone else still uses this?		    Else		      'xRoot.AppendSimpleChild( "watched", False )		    End If		    		    // Outline		    'If ThisEpisode.Value("outline") <> "" Then xRoot.AppendSimpleChild( "outline", ThisEpisode.Value("outline") )		    		    // Plot		    If ThisEpisode.Value("plot") <> "" Then xRoot.AppendSimpleChild( "plot", ThisEpisode.Value("plot") )		    		    // Thumb		    If ThisEpisode.Value( "filename" ) <> "" Then xRoot.AppendSimpleChild( "thumb", ThisEpisode.Value("filename") )		    		    // Credits		    If ThisEpisode.Value("director") <> "" Then xRoot.AppendSimpleChild( "director", ThisEpisode.Value("director") )		    If ThisEpisode.Value("credits") <> ""  Then xRoot.AppendSimpleChild( "credits",  ThisEpisode.Value("credits")  )		    If ThisEpisode.Value("guests") <> ""   Then xRoot.AppendSimpleChild( "guests",   ThisEpisode.Value("guests")   )		    		    For n as Integer = 0 to ThisEpisode.Child("Cast").Count -1		      xNode = xRoot.AppendNewChild( "actor" )		      		      // Download actor images.		      If Prefs.boolForKey("CacheActor") Then		        If NOT TVAttr.FolderParent.Child("actors").Exists Then TVAttr.FolderParent.Child("actors").CreateAsFolder		        If ThisEpisode.Child("CastThumbs").Value(n) <> "" And ThisEpisode.Child("Cast").Value(n) <> "" Then		          Dim tmpPic as Picture = URL2Picture( ThisEpisode.Child("CastThumbs").Value(n), ThisEpisode.Child("Cast").Value(n), "jpg", TVAttr.FolderParent.Child("actors") )		          If tmpPic <> Nil Then ThisEpisode.Child("CastThumbs").Value(n) = TVAttr.FolderParent.ShellPath.ReplaceAll("\","") + "/actors/" + ThisEpisode.Child("Cast").Value(n) + ".jpg"		        End If		        		      End If		      		      xNode.AppendSimpleChild( "name",  ThisEpisode.Child("Cast").Value(n) )		      xNode.AppendSimpleChild( "role",  ThisEpisode.Child("Roles").Value(n) )		      xNode.AppendSimpleChild( "thumb", ThisEpisode.Child("CastThumbs").Value(n) )		    Next		    		    'TVCore.EpisodeFileInfo( EpisodeFiles(i), xRoot )		    FileInfo( xRoot, EpisodeFiles(i) )		    		    		    // Auto manage media.		    If Prefs.boolForKey("AutoManageMedia") And _		      TVAttr.FolderParent <> Nil And TVAttr.FolderParent.Exists And _		      EpisodeFiles(i)     <> Nil And EpisodeFiles(i).Exists Then		      		      Dim Parent as FolderItem = EpisodeFiles(i).Parent		      		      // Get old files		      Dim MediaFiles() as FolderItem		      For n as Integer = 1 to Parent.Count		        Dim Item as FolderItem = Parent.Item(n)		        If Item.Name.InStr( 0, EpisodeFiles(i).NameWithoutExtension ) > 0 And Item.Type <> "video/any" Then MediaFiles.Append Item		      Next		      		      		      Dim Destination as FolderItem		      If EpisodeFiles(i).Parent.Name <> "Season " + SeasonDisplay And EpisodeFiles(i).Parent.Name <> "Specials" Then		        // Create appropriate season folder		        Destination = TVAttr.FolderParent.Child( "Season " + SeasonDisplay )		        If SeasonNr = 0 Then Destination = TVAttr.FolderParent.Child( "Specials" )		        If SeasonNr < 0 Then Destination = TVAttr.FolderParent.Child( TVAttr.FolderParent.Name )		        If Destination <> Nil And NOT Destination.Exists Then Destination.CreateAsFolder		      Else		        Destination = EpisodeFiles(i).Parent		      End If		      		      Dim OldName as String = EpisodeFiles(i).Name		      Dim NewName as String = EpisodeFiles(i).Name		      		      		      If Prefs.integerForKey("BatchRename") = 0 Then		        // Move episode files.		        // Don't rename file.		        		      ElseIf Prefs.integerForKey("BatchRename") = 1 Then		        // Rename episode files		        NewName = Prefs.textStringForKey("RenameStringEpisodes")		        		        Dim b as Boolean = NewName.InStr( 0, "." ) > 0		        NewName = NewName.ReplaceAll( "$S", Str( SeasonNr ) )		        NewName = NewName.ReplaceAll( "$0S", SeasonDisplay )		        NewName = NewName.ReplaceAll( "$E", Str( EpisodeNr ) )		        NewName = NewName.ReplaceAll( "$0E", EpisodeDisplay )		        NewName = NewName.ReplaceAll( "$#", ThisEpisode.Value("Rating") )		        NewName = NewName.ReplaceAll( "$R", Xml.ToString.MyMid( "<height>", "</height>" ) + "p" )		        NewName = NewName.ReplaceAll( "$N", SeriesName )		        NewName = NewName.ReplaceAll( "$T", ThisEpisode.Value("EpisodeName") )		        		        // Clean leftovers		        NewName = Trim( NewName.ReplaceAll( ",.", "."  ) )		        NewName = Trim( NewName.ReplaceAll( ":" , " - " ) )		        NewName = Trim( NewName.ReplaceAll( "()", ""   ) )		        NewName = Trim( NewName.ReplaceAll( "[]", ""   ) )		        NewName = Trim( NewName.ReplaceAll( "{}", ""   ) )		        NewName = Trim( NewName.ReplaceAll( "||", ""   ) )		        If Trim( NewName ).Right(1) = "-" OR _		          Trim( NewName ).Right(1) = "/" Then		          NewName = Trim( NewName.Left( NewName.Len - 1 ) )		        End If		        		        While NewName.InStr( 0, "  " ) > 0		          NewName = NewName.ReplaceAll( "  ", " " )		        Wend		        		        // Not supported on Windows		        If NOT TargetMacOS Or Prefs.boolForKey("TargetNOTMacOS") Then		          NewName = NewName.ReplaceAll( "\", " - " )		          NewName = NewName.ReplaceAll( "/", " - " )		          NewName = NewName.ReplaceAll( "*", "x"   )		          NewName = NewName.ReplaceAll( "?", ""    )		          NewName = NewName.ReplaceAll( """", "'"  )		          NewName = NewName.ReplaceAll( "<", "{"   )		          NewName = NewName.ReplaceAll( ">", "}"   )		          NewName = NewName.ReplaceAll( "|", " "   )		          		          // Unsupported on 'ext4'. (Linux Filesystem Format)		          NewName = NewName.ReplaceAll( "½", " 1-2" )		          NewName = NewName.ReplaceAll( "⅓", " 1-3" )		          NewName = NewName.ReplaceAll( "⅔", " 2-3" )		          NewName = NewName.ReplaceAll( "¼", " 1-4" )		          		          // Dunno.		          NewName = NewName.ReplaceAll( "²", "^2" )		        End If		        		        If b Then NewName = NewName.ReplaceAll( " ", "." )		        While NewName.Right(1) = "."		          NewName = NewName.Left( NewName.Len - 1 )		        Wend		        		        While NewName.Left(1) = "."		          NewName = NewName.Right( NewName.Len - 1 )		        Wend		        		        If Trim( NewName ) <> "" Then		          NewName = Trim( NewName ) + "." + EpisodeFiles(i).NameExtension		        Else		          NewName = EpisodeFiles(i).Name		        End If		        		      End If		      		      If NOT Destination.Child( NewName ).Exists Then		        EpisodeFiles(i).MoveFileTo( Destination.Child( NewName ) )		        EpisodeFiles(i) = Destination.Child( NewName )		        		        // Move old files		        For n as Integer = 0 to MediaFiles.Ubound		          MediaFiles(n).MoveFileTo( EpisodeFiles(i).Parent.Child( EpisodeFiles(i).NameWithoutExtension + "." + MediaFiles(n).NameExtension ) )		        Next		      End If		      		      		    End If		    //------		    		    // Save Thumb image		    URL2Picture( ThisEpisode.Value("filename"), EpisodeFiles(i).Parent, EpisodeFiles(i).NameWithoutExtension + ".jpg" )		    		    xRoot.Indent(0)		    // Save NFO file		    Xml.SaveXml( EpisodeFiles(i).Parent.Child( EpisodeFiles(i).NameWithoutExtension + ".nfo" ) )		    		  Next		  		  		  dlgProgress.Debug ""		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub zProcessEpisodes(XMLString as String, ID as String)		  'XMLString = DecodingFromHTMLMBS( XMLString.ReplaceAll("&", "\&") )		  		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kProcessing + ":", TVAttr.FolderParent.Name + " Episodes..." )		  		  // Filter the 'Series' tag.		  Dim sx1, sx2 as Integer = 0		  sx1 = XMLString.InStr( 0, "<Series>" ) -1' + 9		  sx2 = XMLString.InStr( 0, "</Series>" ) + 9		  		  XMLString = XMLString.Left( sx1 ) + XMLString.Right( XMLString.Len - sx2 )		  		  Dim JSONString as String = XMLString.XML2JSON		  		  Dim Episodes as New JSONItem		  If JSONString.ValidJSON("Episodes") Then Episodes.Load JSONString		  If Episodes.HasName("Data") And Episodes.ToString.InStr( 0, """Episode""" ) > 0 And Episodes.Child("Data").HasName("Episode") Then Episodes = Episodes.Child("Data").Child("Episode")		  		  		  Dim XML as New XmlDocument		  Dim xRoot, xSeason, xEpisode as XmlNode		  		  		  Dim EpisodeGuide as FolderItem = Preferences.fAppSupport.Child("EpisodeGuides")		  If EpisodeGuide = Nil OR NOT EpisodeGuide.Exists Then EpisodeGuide.CreateAsFolder		  EpisodeGuide = EpisodeGuide.Child( ID + ".xml" )		  		  If EpisodeGuide <> Nil And EpisodeGuide.Exists Then		    XMLString = ""		    Dim TextIn as TextInputStream		    TextIn = TextIn.Open( EpisodeGuide )		    XMLString = TextIn.ReadAll		    If XMLString <> "" Then XML.LoadXml XMLString		  End If		  		  XML.PreserveWhitespace = True		  If XML.FirstChild <> Nil And XML.FirstChild.Name = "guide" Then		    xRoot = XML.FirstChild		  Else		    xRoot = Xml.AppendChild( Xml.CreateElement( "guide" ) )		  End If		  		  // If only one episode is available, episodes is not an array, so convert it into one.		  If NOT Episodes.IsArray Then		    Dim Daddy as New JSONItem		    Daddy.Child(0) = Episodes		    Episodes = Daddy		  End If		  		  		  For i as Integer = 0 to Episodes.Count -1		    Dim ThisEpisode as New JSONItem		    ThisEpisode = Episodes.Child(i)		    		    Dim S, E as String = ThisEpisode.Value("SeasonNumber")		    E = ThisEpisode.Value("EpisodeNumber")		    		    		    // Season		    xSeason = Nil		    For n as Integer = 0 to xRoot.ChildCount - 1		      If xRoot.Child(n) <> Nil And xRoot.Child(n).Name = "Season_" + S Then		        xSeason = xRoot.Child(n)		        Exit		      End If		    Next		    		    // If no season, manual search, if manual search no season, add new season.		    If xSeason = Nil Then		      If xRoot.ToString.InStr( 0, "<Season_" + ThisEpisode.Value("SeasonNumber") + ">" ) = 0 Then		        xSeason = xRoot.AppendNewChild( "Season_" + ThisEpisode.Value("SeasonNumber") )		      Else		        For n as Integer = 0 to xRoot.ChildCount -1		          If xRoot.Child(n).Name = "Season_" + ThisEpisode.Value("SeasonNumber") Then xSeason = xRoot.Child(n)		        Next		      End If		    End If		    		    		    		    // Episode		    xEpisode = Nil		    For n as Integer = 0 to xSeason.ChildCount - 1		      If xSeason.Child(n) <> Nil And xSeason.Child(n).Name = "Episode" Then		        xEpisode = xSeason.Child(n)		        		        Dim CurEpisode as String		        		        For t as Integer = 0 to xEpisode.ChildCount - 1		          If xEpisode.Child(t) <> Nil And xEpisode.Child(t).Name = "EpisodeNumber" And xEpisode.Child(t).FirstChild.Value = E Then		            'MessageBox "s" + S + "e" + E + " - " + ThisEpisode.Value("EpisodeName")		            CurEpisode = E		            Exit		          End If		        Next		        		        If CurEpisode <> "" Then Exit		        xEpisode = Nil		      End If		    Next		    		    'MessageBox xSeason.Name + " " + xEpisode.Name + " " + E		    		    // If no episode, manual search		    If xEpisode = Nil Then		      If xSeason.ToString.InStr( 0, "<EpisodeNumber>" + Str( Val( E ) ) + "</EpisodeNumber>" ) = 0 Then		        xEpisode = xSeason.AppendNewChild( "Episode" )		      Else		        For n as Integer = 0 to xSeason.ChildCount -1		          If xSeason.Child(n).Name = "EpisodeNumber" Then 'and xSeason.Child(n).FirstChild.Value = Str( Val( E) ) Then		            'MessageBox xSeason.Child(n).FirstChild.Value		            xEpisode = xSeason.Child(n)		            Exit		          End If		        Next		      End If		    End If		    		    		    		    If S.Len = 1 Then s = "0" + S		    If E.Len = 1 Then E = "0" + E		    		    dlgProgress.Debug( "S" + S + "E" + E + " - " + ThisEpisode.Value("EpisodeName") )		    		    		    If xEpisode.ChildCount = 0 Then		      // Add new episode		      		      // ID		      xEpisode.AppendSimpleChild "TVDB_ID", ThisEpisode.Value("id")		      If ThisEpisode.Value("IMDB_ID") <> "" Then xEpisode.AppendSimpleChild "IMDB_ID", ThisEpisode.Value("IMDB_ID")		      		      // Episode Info		      If ThisEpisode.Value("absolute_number") <> "" Then xEpisode.AppendSimpleChild "absolute_number", ThisEpisode.Value("absolute_number")		      xEpisode.AppendSimpleChild "SeasonNumber",  ThisEpisode.Value("SeasonNumber")		      xEpisode.AppendSimpleChild "EpisodeNumber", ThisEpisode.Value("EpisodeNumber")		      xEpisode.AppendSimpleChild "FirstAired",    ThisEpisode.Value("FirstAired")		      		      xEpisode.AppendSimpleChild "EpisodeName", ThisEpisode.Value("EpisodeName")		      xEpisode.AppendSimpleChild( "Watched", False )		      		      // Plot		      xEpisode.AppendSimpleChild "Plot",        ThisEpisode.Value("Overview")		      		      // Rating		      xEpisode.AppendSimpleChild "Rating",      ThisEpisode.Value("Rating")		      xEpisode.AppendSimpleChild "Votes",       ThisEpisode.Value("RatingCount")		      		      // Thumb URL		      If ThisEpisode.Value("filename") <> "" Then		        xEpisode.AppendSimpleChild "ThumbURL",    TVCore.GraphicsPath + ThisEpisode.Value("filename")		      Else		        xEpisode.AppendSimpleChild "ThumbURL", ""		      End If		      		      		      // Credits		      // -- Director(s)		      Dim Directors as String = ThisEpisode.Value("Director")		      If Directors.Left(1) = "|"  Then Directors = Directors.Right( Directors.Len - 1 )		      If Directors.Right(1) = "|" Then Directors = Directors.Left( Directors.Len - 1 )		      xEpisode.AppendSimpleChild "Director",      Directors.ReplaceAll("|", ", ")		      		      // -- Writer(s)		      Dim Writers as String = ThisEpisode.Value("Writer")		      If Writers.Left(1) = "|"  Then Writers = Writers.Right( Writers.Len - 1 )		      If Writers.Right(1) = "|" Then Writers = Writers.Left( Writers.Len - 1 )		      xEpisode.AppendSimpleChild "Writer",      Writers.ReplaceAll("|", ", ")		      		      // -- Guest Star(s)		      Dim Guests as String = ThisEpisode.Value("GuestStars")		      If Guests.Left(1) = "|" Then Guests = Guests.Right( Guests.Len - 1 )		      If Guests.Right(1) = "|" Then Guests = Guests.Left( Guests.Len - 1 )		      xEpisode.AppendSimpleChild "GuestStars",  Guests.ReplaceAll("|", ", ")		      		      		    Else		      // Update existing episode		      		      // Update system to see if one of the following is missing.		      Dim TVDBID, IMDBID, AbsoluteNumber, SeasonNR, EpisodeNR, FirstAired, EpisodeName, Plot, Rating, Votes, ThumbURL, uDirector, uWriter, uGuestStars as Boolean = False		      		      For n as Integer = 0 to xEpisode.ChildCount -1		        		        Select Case xEpisode.Child(n).Name		          		        Case "TVDB_ID"		          TVDBID = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("id")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("id")		          End If		        Case "IMDB_ID"		          IMDBID = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("IMDB_ID")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("IMDB_ID")		          End If		          		        Case "absolute_number"		          AbsoluteNumber = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("absolute_number")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("absolute_number")		          End If		        Case "SeasonNumber"		          SeasonNR = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("SeasonNumber")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("SeasonNumber")		          End If		        Case "EpisodeNumber"		          EpisodeNR = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("EpisodeNumber")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("EpisodeNumber")		          End If		        Case "FirstAired"		          FirstAired = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("FirstAired")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("FirstAired")		          End If		          		        Case "EpisodeName"		          EpisodeName = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("EpisodeName")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("EpisodeName")		          End If		        Case "Watched"		          // Don't update watched status		          		        Case "Plot"		          Plot = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("Overview")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("Overview")		          End If		          		        Case "Rating"		          Rating = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("Rating")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("Rating")		          End If		          		        Case "Votes"		          Votes = True		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = ThisEpisode.Value("RatingCount")		          Else		            xEpisode.Child(n).SetValue ThisEpisode.Value("RatingCount")		          End If		          		        Case "ThumbURL"		          ThumbURL = True		          		          If xEpisode.Child(n).FirstChild <> Nil Then		            If ThisEpisode.Value("filename") <> "" Then		              xEpisode.Child(n).FirstChild.Value = TVCore.GraphicsPath + ThisEpisode.Value("filename")		            Else		              xEpisode.Child(n).FirstChild.Value = ""		            End If		          Else		            If ThisEpisode.Value("filename") <> "" Then		              xEpisode.Child(n).SetValue TVCore.GraphicsPath + ThisEpisode.Value("filename")		            Else		              xEpisode.Child(n).SetValue ""		            End If		          End If		          		        Case "Director"		          uDirector = True		          Dim Directors as String = ThisEpisode.Value("Director")		          If Directors.Left(1) = "|"  Then Directors = Directors.Right( Directors.Len - 1 )		          If Directors.Right(1) = "|" Then Directors = Directors.Left( Directors.Len - 1 )		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = Directors.ReplaceAll( "|", ", " )		          Else		            xEpisode.Child(n).SetValue Directors.ReplaceAll( "|", ", " )		          End If		          		        Case "Writer"		          uWriter = True		          Dim Writers as String = ThisEpisode.Value("Writer")		          If Writers.Left(1) = "|"  Then Writers = Writers.Right( Writers.Len - 1 )		          If Writers.Right(1) = "|" Then Writers = Writers.Left( Writers.Len - 1 )		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = Writers.ReplaceAll("|", ", ")		          Else		            xEpisode.Child(n).SetValue Writers.ReplaceAll("|", ", ")		          End If		          		        Case "GuestStars"		          uGuestStars = True		          Dim Guests as String = ThisEpisode.Value("GuestStars")		          If Guests.Left(1) = "|" Then Guests = Guests.Right( Guests.Len - 1 )		          If Guests.Right(1) = "|" Then Guests = Guests.Left( Guests.Len - 1 )		          If xEpisode.Child(n).FirstChild <> Nil Then		            xEpisode.Child(n).FirstChild.Value = Guests.ReplaceAll("|", ", ")		          Else		            xEpisode.Child(n).SetValue Guests.ReplaceAll("|", ", ")		          End If		          		        End Select // @END xEpisode.Name		        		      Next // @END xEpisode.ChildCount		      		      If NOT TVDBID Then xEpisode.AppendSimpleChild "TVDB_ID", ThisEpisode.Value("id")		      If NOT IMDBID And ThisEpisode.Value("IMDB_ID") <> "" Then xEpisode.AppendSimpleChild "IMDB_ID", ThisEpisode.Value("IMDB_ID")		      		      // Episode Info		      If NOT AbsoluteNumber And ThisEpisode.Value("absolute_number") <> "" Then xEpisode.AppendSimpleChild "absolute_number", ThisEpisode.Value("absolute_number")		      If NOT SeasonNR       Then xEpisode.AppendSimpleChild "SeasonNumber",  ThisEpisode.Value("SeasonNumber")		      If NOT EpisodeNR      Then xEpisode.AppendSimpleChild "EpisodeNumber", ThisEpisode.Value("EpisodeNumber")		      If NOT FirstAired     Then xEpisode.AppendSimpleChild "FirstAired",    ThisEpisode.Value("FirstAired")		      		      If NOT EpisodeName Then xEpisode.AppendSimpleChild "EpisodeName", ThisEpisode.Value("EpisodeName")		      		      // Plot		      If NOT Plot Then xEpisode.AppendSimpleChild "Plot",        ThisEpisode.Value("Overview")		      		      // Rating		      If NOT Rating Then xEpisode.AppendSimpleChild "Rating",      ThisEpisode.Value("Rating")		      If NOT Votes  Then xEpisode.AppendSimpleChild "Votes",       ThisEpisode.Value("RatingCount")		      		      // Thumb URL		      If NOT ThumbURL Then		        If ThisEpisode.Value("filename") <> "" Then		          xEpisode.AppendSimpleChild "ThumbURL",    TVCore.GraphicsPath + ThisEpisode.Value("filename")		        Else		          xEpisode.AppendSimpleChild "ThumbURL", ""		        End If		      End If		      		      		      // Credits		      // -- Director(s)		      If NOT uDirector Then		        Dim Directors as String = ThisEpisode.Value("Director")		        If Directors.Left(1) = "|"  Then Directors = Directors.Right( Directors.Len - 1 )		        If Directors.Right(1) = "|" Then Directors = Directors.Left( Directors.Len - 1 )		        xEpisode.AppendSimpleChild "Director",      Directors.ReplaceAll("|", ", ")		      End If		      		      // -- Writer(s)		      If NOT uWriter Then		        Dim Writers as String = ThisEpisode.Value("Writer")		        If Writers.Left(1) = "|"  Then Writers = Writers.Right( Writers.Len - 1 )		        If Writers.Right(1) = "|" Then Writers = Writers.Left( Writers.Len - 1 )		        xEpisode.AppendSimpleChild "Writer",      Writers.ReplaceAll("|", ", ")		      End If		      		      // -- Guest Star(s)		      If NOT uGuestStars Then		        Dim Guests as String = ThisEpisode.Value("GuestStars")		        If Guests.Left(1) = "|" Then Guests = Guests.Right( Guests.Len - 1 )		        If Guests.Right(1) = "|" Then Guests = Guests.Left( Guests.Len - 1 )		        xEpisode.AppendSimpleChild "GuestStars",  Guests.ReplaceAll("|", ", ")		      End If		      		    End If // @END Add/Update episode		    		    		  Next		  		  Dim EpisodeFiles() as FolderItem = FindEpisodeFiles( TVAttr.FolderParent )		  Dim RegExed() as String		  		  For i as Integer = 0 to EpisodeFiles.Ubound		    		    Dim OOxOO as String = RegExEpisode( EpisodeFiles(i) )		    Dim Destination as FolderItem		    		    Dim SeasonNr  as Integer = Val( OOxOO.NthField( "x", 1 ) )		    Dim EpisodeNr as Integer = Val( OOxOO.NthField( "x", 2 ) )		    		    // Move episodes		    If Prefs.boolForKey("AutoManageMedia") Then 'And Prefs.integerForKey("BatchRename") = 1 Then		      If TVAttr.FolderParent = Nil OR NOT TVAttr.FolderParent.Exists Then Continue // If no root available, then continue		      If EpisodeFiles(i) = Nil OR NOT EpisodeFiles(i).Exists Then Continue // If episode doesn't exist, continue.		      		      If EpisodeFiles(i).Parent.Name.InStr( 0, "Season" ) = 0 And EpisodeFiles(i).Parent.Name.Instr( 0, "Special" ) = 0 Then		        Destination = TVAttr.FolderParent.Child( "Season " + Str( SeasonNr ) )		        If SeasonNr = 0 Then Destination = TVAttr.FolderParent.Child( "Specials" )		        If SeasonNr < 0 Then Destination = TVAttr.FolderParent.Child( TVAttr.FolderParent.Name )		        		        If Destination <> Nil And NOT Destination.Exists Then Destination.CreateAsFolder		        		      ElseIf SeasonNr > 0 And EpisodeFiles(i).Parent.Name.InStr( 0, "Season" ) > 0 And EpisodeFiles(i).Parent.Name.InStr( 0, Str( SeasonNr ) ) = 0 Then		        Destination = TVAttr.FolderParent.Child( "Season " + Str( SeasonNr ) )		        If Destination <> Nil And NOT Destination.Exists Then Destination.CreateAsFolder		        		      Else		        Destination = EpisodeFiles(i).Parent		      End If // @END Season OR Specials folder exists		      		      // Failed to create a folder, or locate a destination point.		      If Destination = Nil OR NOT Destination.Exists Then Continue		      Dim Name as String = EpisodeFiles(i).Name		      		      If Prefs.integerForKey("BatchRename") = 0 Then		        // Move episode files.		        // Don't rename file.		        		      ElseIf Prefs.integerForKey("BatchRename") = 1 Then		        // Rename episode files		        Name = EpisodeFiles(i).NameWithoutExtension		        Dim Extension as String = EpisodeFiles(i).NameExtension		        		        Dim ReName as String = "S$sxE$e - $T"		        		        Name = Trim( ReName )		      End If		      		      // Do the actual moving, but only if there's nothing there yet.		      If NOT Destination.Child( Name ).Exists Then		        EpisodeFiles(i).MoveFileTo( Destination.Child( Name ) )		        EpisodeFiles(i) = Destination.Child( Name )		      End If		      		      		    End If // @END AutoManageMedia		    		    		    // TODO: Write episode NFO file.		    Dim eXML as New XmlDocument		    Dim eRoot, eNode, eItem as XmlNode		    		    eRoot = eXML.AppendChild( eXML.CreateElement( "episodedetails" ) )		    		    		    Dim ThisEpisode as New JSONItem		    For t as Integer = 0 to Episodes.Count -1		      ThisEpisode = Episodes.Child(t)		      		      If ThisEpisode.HasName("SeasonNumber") And Val( ThisEpisode.Value("SeasonNumber") ) = SeasonNr And _		        ThisEpisode.HasName("EpisodeNumber") And Val( ThisEpisode.Value("EpisodeNumber") ) = EpisodeNr Then		        Dim s as String = ThisEpisode.Value("SeasonNumber") + " " + ThisEpisode.Value("EpisodeNumber") + " - " + ThisEpisode.Value("EpisodeName")		        		        If SeasonNr = 0 Then		          Dim special as Integer		        End If		        		        Dim TheseActors as New JSONItem		        Dim sckt as New HTTPSocket		        If ThisEpisode.Value("id") <> "" Then		          JSONString = DefineEncoding( sckt.Get( TVCore.URL( "Episode", ThisEpisode.Value("id") ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		          JSONString = JSONString.XML2JSON		        End If		        		        		        Dim NFODestination as FolderItem = EpisodeFiles(i)		        		        If ThisEpisode.HasName("seriesid")  And ThisEpisode.Value("seriesid")  <> "" Then xRoot.AppendSimpleChild( "tvdbID",  ThisEpisode.Value("seriesid") )		        If ThisEpisode.HasName("IMDB_ID")   And ThisEpisode.Value("IMDB_ID")   <> "" Then xRoot.AppendSimpleChild( "imdbID",  ThisEpisode.Value("IMDB_ID") )		        		        If ThisEpisode.HasName("EpisodeName")   And ThisEpisode.Value("EpisodeName")   <> "" Then xRoot.AppendSimpleChild( "title",  ThisEpisode.Value("EpisodeName") )		        If ThisEpisode.HasName("Rating")        And ThisEpisode.Value("Rating")        <> "" Then xRoot.AppendSimpleChild( "rating", ThisEpisode.Value("Rating") )		        If ThisEpisode.HasName("RatingCount")   And ThisEpisode.Value("RatingCount")   <> "" Then xRoot.AppendSimpleChild( "votes", ThisEpisode.Value("RatingCount") )		        		        If ThisEpisode.HasName("SeasonNumber")  And ThisEpisode.Value("SeasonNumber")  <> "" Then xRoot.AppendSimpleChild( "season", ThisEpisode.Value("SeasonNumber") )		        If ThisEpisode.HasName("EpisodeNumber") And ThisEpisode.Value("EpisodeNumber") <> "" Then xRoot.AppendSimpleChild( "episode", ThisEpisode.Value("EpisodeNumber") )		        		        // Treat 'specials' specially.		        If SeasonNr = 0 And ThisEpisode.HasName("airsbefore_season") And ThisEpisode.Value("airsbefore_season") <> "" Then		          xRoot.AppendSimpleChild( "displayseason", ThisEpisode.Value("airsbefore_season") )		          'If ThisEpisode.HasName("airsbefore_episode") And ThisEpisode.Value("airsbefore_episode") <> "" Then xRoot.AppendSimpleChild( "displayepisode", Val( ThisEpisode.Value("airsbefore_episode") ) - 0.5 )		          xRoot.AppendSimpleChild( "displayepisode", 4096 )		        End If		        		        If ThisEpisode.HasName("Overview") And ThisEpisode.Value("Overview") <> "" Then xRoot.AppendSimpleChild( "plot", ThisEpisode.Value("Overview") )		        		        If ThisEpisode.HasName("filename") And ThisEpisode.Value("filename") <> "" Then		          xRoot.AppendSimpleChild( "thumb", TVCore.GraphicsPath + ThisEpisode.Value("filename") )		          'URL2Picture( TVCore.GraphicsPath + ThisEpisode.Value("filename"), EpisodeFiles(i).Parent, EpisodeFiles(i).NameWithoutExtension + ".jpg" )		        End If		        		        If ThisEpisode.HasName("Writer") And ThisEpisode.Value("Writer") <> "" Then xRoot.AppendSimpleChild( "credits", ThisEpisode.Value("Writer") )		        If ThisEpisode.HasName("Director") And ThisEpisode.Value("Director") <> "" Then xRoot.AppendSimpleChild( "director", ThisEpisode.Value("Director") )		        		        If ThisEpisode.HasName("FirstAired") And ThisEpisode.Value("FirstAired") <> "" Then xRoot.AppendSimpleChild( "aired", ThisEpisode.Value("FirstAired") )		        		      End If		      		    Next		    		  Next		  		  dlgProgress.Debug( "" )		  xRoot.Indent(0)		  		  Xml.SaveXml( EpisodeGuide )		End Sub	#tag EndMethod	#tag Note, Name = TVDB Api Docs				http://thetvdb.com/wiki/index.php?title=Programmers_API	#tag EndNote	#tag Constant, Name = MirrorPath, Type = String, Dynamic = False, Default = \"http://thetvdb.com", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Address"			Visible=true			Group="Behavior"			Type="String"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="defaultPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyAddress"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Port"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="yield"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="HTTPSocket"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass