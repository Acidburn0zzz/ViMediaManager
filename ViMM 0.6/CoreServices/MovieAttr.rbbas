#tag ModuleProtected Module MovieAttr	#tag Method, Flags = &h1		Protected Sub ClearProperties()		  ReDim ActorID(-1)		  ReDim ActorName(-1)		  ReDim ActorRole(-1)		  ReDim ActorThumbURL(-1)		  		  ART_Poster     = Nil		  ART_Fanart     = Nil		  ART_Studio     = Nil		  ART_MPAARating = Nil		  		  ReDim ART_FanartDimensions(-1)		  ReDim ART_PosterDimensions(-1)		  		  ART_ClearArt   = Nil		  ART_Logo       = Nil		  ART_Disc       = Nil		  ART_Banner     = Nil		  ART_Thumb      = Nil		  		  ReDim ART_PosterURLs(-1)		  ReDim ART_FanartURLs(-1)		  ReDim ART_FanartThumbURLs(-1)		  		  ReDim InfoAudioChannels(-1)		  ReDim InfoAudioCodec(-1)		  ReDim InfoAudioLanguage(-1)		  ReDim InfoAudioBitRate(-1)		  ReDim InfoAudioBitRateMode(-1)		  		  InfoVideoAspect   = ""		  InfoVideoCodec    = ""		  InfoVideoScantype = ""		  InfoVideoHeight   = -1		  InfoVideoWidth    = -1		  InfoVideoRuntime  = ""		  		  ReDim InfoSubtitleFormat(-1)		  ReDim InfoSubtitleLanguage(-1)		  		  ReDim Genres(-1)		  ReDim Studios(-1)		  ReDim Countries(-1)		  ReDim LanguagesSpoken(-1)		  ReDim LanguagesSpokenCode(-1)		  ReDim InfoSubtitleLanguage(-1)		  		  ID_TMDB        = ""		  ID_IMDB        = ""		  ID_RottenTomatoes = ""		  		  CreditDirector = ""		  CreditDirectorID = ""		  CreditWriter   = ""		  CreditWriterID = ""		  CreditSound    = ""		  CreditSoundID  = ""		  		  DatePremiered     = ""		  DateYear          = -1		  DateReleasedOnDVD = ""		  		  DescriptionTagline = ""		  DescriptionOutline = ""		  DescriptionPlot    = ""		  		  Title          = ""		  TitleSort      = ""		  TitleOriginal  = ""		  		  RatingTop250        = -1		  Rating              = -1		  RatingVotes         = -1		  RatingMPAA          = ""		  ReDim RatingCertification(-1)		  		  Set            = ""		  SetOrder       = -1		  SetPosterURL   = ""		  SetFanartURL   = ""		  StatusWatched  = False		  		  ReDim TrailerURLs(-1)		  ReDim TrailerNames(-1)		  ReDim TrailerQuality(-1)		  		  TomatoConcensus = ""		  TomatoCriticsRating = ""		  TomatoCriticsScore = -1		  TomatoAudienceRating = ""		  TomatoAudienceScore = -1		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function DestinationFanart(MovieParent as FolderItem) As FolderItem		  Dim MovieFile as FolderItem = FindMovieItem( MovieParent )		  Dim FanartDestination as FolderItem = FindImageFanart( MovieParent )		  		  Dim FanartName as String = Prefs.textStringForKey( "FileNameFanart" )		  		  If MovieFile <> Nil and MovieFile.Exists and ( MovieFile.Name <> "VIDEO_TS" And MovieFile.Name <> "BDMV" ) Then		    If FanartDestination = Nil or NOT FanartDestination.Exists then FanartDestination = MovieParent.Child( FanartName.ReplaceAll( "<movie>", MovieFile.NameWithoutExtension ) )		  ElseIf MovieFile <> Nil And MovieFile.Exists And MovieFile.Name = "BDMV" Then		    If FanartDestination = Nil Or NOT FanartDestination.Exists Then FanartDestination = MovieParent.Child( "index-fanart.jpg" )		  Else		    If FanartDestination = Nil or NOT FanartDestination.Exists Then FanartDestination = MovieParent.Child( "fanart.jpg" )		  End If		  		  Return FanartDestination		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function DestinationNFO(MovieParent as FolderItem) As FolderItem		  // Save NFO		  Dim MovieFile      as FolderItem = FindMovieItem( MovieParent )		  Dim NfoDestination as FolderItem = FindNFOFile(   MovieParent )		  		  If MovieFile <> Nil and MovieFile.Exists and ( MovieFile.Name <> "VIDEO_TS" And MovieFile.Name <> "BDMV" ) Then		    'If MovieFile.Name = "VIDEO_TS" then		    'NfoDestination = MovieParent.Child( "VIDEO_TS" ).Child( "movie.nfo" )		    'Else		    If NfoDestination = Nil or NOT NfoDestination.Exists then NfoDestination = MovieParent.Child( Prefs.textStringForKey("FileNameNFO").ReplaceAll( "<movie>", MovieFile.NameWithoutExtension ) )		    'End If		  ElseIf MovieFile <> Nil and MovieFile.Exists And MovieFile.Name = "VIDEO_TS" Then		    If NfoDestination = Nil or NOT NfoDestination.Exists then NfoDestination = MovieFile.Child( "VIDEO_TS.nfo" )		  ElseIf MovieFile <> Nil and MovieFile.Exists And MovieFile.Name = "BDMV" Then		    If NfoDestination = Nil or NOT NfoDestination.Exists then NfoDestination = MovieParent.Child( "index.nfo" )		  End If		  		  Return NfoDestination		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function DestinationPoster(MovieParent as FolderItem) As FolderItem		  Dim MovieFile as FolderItem = FindMovieItem( MovieParent )		  Dim PosterDestination as FolderItem = FindImagePoster( MovieParent )		  		  Dim PosterName as String = Prefs.textStringForKey( "FileNamePoster" )		  Dim PosterExtension() as String = PosterName.Split(".")		  Dim Ext as String = PosterExtension( PosterExtension.Ubound )		  		  If MovieFile <> Nil and MovieFile.Exists and ( MovieFile.Name <> "VIDEO_TS" And MovieFile.Name <> "BDMV" ) Then		    If PosterDestination = Nil Or NOT PosterDestination.Exists Then PosterDestination = MovieParent.Child( PosterName.ReplaceAll( "<movie>", MovieFile.NameWithoutExtension ) )		  ElseIf MovieFile.Name = "BDMV" Then		    If PosterDestination = Nil Or NOT PosterDestination.Exists Then PosterDestination = MovieParent.Child("index." + Ext )		  Else		    If PosterDestination = Nil Or NOT PosterDestination.Exists Then PosterDestination = MovieParent.Child( "poster." + Ext )		  End If		  		  Return PosterDestination		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub LoadImages(MovieParent as FolderItem)		  // MovieParent exists		  If app.DebugMode Then Return		  If MovieParent = Nil or NOT MovieParent.Exists Then Return		  Dim ArtFile as FolderItem		  MovieAttr.ART_Poster = Nil		  MovieAttr.ART_Fanart = Nil		  MovieAttr.ART_MPAARating = Nil		  		  Dim MoviePoster as String = MovieAttr.ID_IMDB + ".movie.poster.jpg"		  Dim MovieFanart as String = MovieAttr.ID_IMDB + ".movie.fanart.jpg"		  		  		  MovieAttr.ART_Poster = CacheImageLoad( MoviePoster )		  If MovieAttr.ART_Poster = Nil Then		    ArtFile = FindImagePoster( MovieParent )		    If ArtFile <> Nil and ArtFile.Exists Then		      CacheImageSet( Picture.Open( ArtFile ), MoviePoster )		      MovieAttr.ART_Poster = CacheImageLoad( MoviePoster )		      If MovieAttr.ART_Poster = Nil Then MovieAttr.ART_Poster = Picture.Open( ArtFile ) // Last resort		    End If		  End If		  		  MovieAttr.ART_Fanart = CacheImageLoad( MovieFanart )		  If MovieAttr.ART_Fanart = Nil Then		    ArtFile = FindImageFanart( MovieParent )		    If ArtFile <> Nil and ArtFile.Exists Then		      CacheImageSet( Picture.Open( ArtFile ), MovieFanart )		      MovieAttr.ART_Fanart = CacheImageLoad( MovieFanart )		      If MovieAttr.ART_Fanart = Nil Then MovieAttr.ART_Fanart = Picture.Open( ArtFile ) // Last resort		    End If		  End If		  		  'ArtFile = FindImagePoster( MovieParent )		  'If ArtFile <> Nil and ArtFile.Exists then MovieAttr.ART_Poster = ScaleImage( Picture.Open( ArtFile ), 480, 480 * 1.5 )		  'ArtFile = Nil		  		  'ArtFile = FindImageFanart( MovieParent )		  'If ArtFile <> Nil and ArtFile.Exists then MovieAttr.ART_Fanart = ScaleImage( Picture.Open( ArtFile ), 480 * 1.5, 480 )		  'ArtFile = Nil		  		  ArtFile = MovieParent.Child("clearart.png")		  If ArtFile.Exists Then MovieAttr.ART_ClearArt = Picture.Open( ArtFile )		  ArtFile = MovieParent.Child("logo.png")		  If ArtFile.Exists Then MovieAttr.ART_Logo     = Picture.Open( ArtFile )		  'ArtFile = MovieParent.Child("disc.png")		  'If ArtFile.Exists Then MovieAttr.ART_Disc     = Picture.Open( ArtFile )		  ArtFile = FindImageBanner( MovieParent ) 'MovieParent.Child("banner.jpg")		  If ArtFile <> Nil And ArtFile.Exists Then MovieAttr.ART_Banner   = Picture.Open( ArtFile )		  		  // Disc (Unused)		  'MovieAttr.ART_Disc = CacheImageLoad( MovieAttr.ID_IMDB + ".movie.disc.png" )		  'If MovieAttr.ART_Disc = Nil Then		  'ArtFile = MovieParent.Child("disc.png")		  'If ArtFile <> Nil And ArtFile.Exists Then		  'CacheImageSet( Picture.Open( ArtFile ), MovieAttr.ID_IMDB + ".movie.disc.png" )		  'MovieAttr.ART_Disc = CacheImageLoad( MovieAttr.ID_IMDB + ".movie.disc.png" )		  'If MovieAttr.ART_Disc = Nil Then MovieAttr.ART_Disc = Picture.Open( ArtFile )		  'End If		  'End If		  		  // Thumb		  'MovieAttr.ART_Thumb = CacheImageLoad( MovieAttr.ID_IMDB + ".movie.thumb.jpg" )		  'If MovieAttr.ART_Thumb = Nil Then		  'ArtFile = MovieParent.Child("landscape.jpg")		  'If ArtFile <> Nil and ArtFile.Exists Then		  'CacheImageSet( Picture.Open( ArtFile ), MovieAttr.ID_IMDB + ".movie.thumb.jpg" )		  'MovieAttr.ART_Thumb = CacheImageLoad( MovieAttr.ID_IMDB + ".movie.thumb.jpg" )		  'If MovieAttr.ART_Thumb = Nil Then MovieAttr.ART_Thumb = Picture.Open( ArtFile )		  'End If		  'End If		  		  // ----		  		  // MPAA Art		  For i as Integer = 0 to MovieAttr.RatingCertification.Ubound		    If FlagCountry( MovieAttr.RatingCertification(i).NthField(":", 1) )  = Prefs.textStringForKey("DBLanguage") Then		      MovieAttr.ART_MPAARating = MPAA2Logo( MovieAttr.RatingCertification(i).NthField(":", 2) )		    End If		  Next		  If MovieAttr.ART_MPAARating = Nil And MovieAttr.RatingMPAA <> "" Then MovieAttr.ART_MPAARating = MPAA2Logo( MovieAttr.RatingMPAA )		  		  Dim Studio as String = ""		  If MovieAttr.Studios.Ubound >= 0 then Studio = MovieAttr.Studios(0)		  		  Dim AppSupport as FolderItem = SpecialFolder.ApplicationData.Child("ViMediaManager").Child("Studios")		  If AppSupport <> Nil then ArtFile = AppSupport.Child( Studio + ".png" )		  		  If ArtFile =  Nil or  NOT ArtFile.Exists then ArtFile    = GetFolderItem("Studios").Child( Studio + ".png" )		  If ArtFile <> Nil and     ArtFile.Exists then MovieAttr.ART_Studio = Picture.Open( ArtFile )		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NFORead(NFOParent as FolderItem)		  Dim Xml as New XmlDocument		  Dim xRoot, xNode, xItem, xAudio, xVideo, xSubtitle as XmlNode		  		  If NFOParent = Nil Or NOT NFOParent.Exists Then Return		  Dim NFOLocation as FolderItem = FindNFOFile( NFOParent )		  		  Dim Content as String		  		  ClearProperties		  Xml.PreserveWhitespace = False		  		  // Is there an NFO File?		  If NFOLocation <> Nil and NFOLocation.Exists then		    Dim TextIn as TextInputStream  = TextInputStream.Open( NFOLocation )		    Content = TextIn.ReadAll		    TextIn.Close		  Else		    Return		  End If		  		  Content = RemoveLinks( Content )		  If Content.Left(10).InStr( 0, "<?xml" ) > 0 Then ' = "<?xml" Then		    Xml.LoadXml(content)		  ElseIf Content.Left(5) = "http:" And Content.InStr( 0, "imdb.com" ) > 0 Then		    Dim s() as String = Content.Split("/")		    For i as Integer = 0 to s.Ubound		      If s(i).Left(2) = "tt" Then MovieAttr.ID_IMDB = s(i)		    Next		    Return		  Else		    Return		  End If		  		  For i as Integer = 0 to Xml.ChildCount - 1		    If Xml.Child(i).Name = "movie" Then xRoot = Xml.Child(i)		  Next		  		  For i as Integer = 0 to xRoot.ChildCount - 1		    xNode = xRoot.Child(i)		    		    If xNode.FirstChild <> Nil then		      		      Select case xNode.Name		        		      case "id"		        If xNode.FirstChild.Value.Left(2) = "tt" then		          MovieAttr.ID_IMDB = xNode.FirstChild.Value		        Else		          If MovieAttr.ID_TMDB = "" Then MovieAttr.ID_TMDB = xNode.FirstChild.Value		        End If		        		        'MsgBox xNode.GetAttribute("moviedb")		        		        If xNode.GetAttribute("moviedb") = "TMDB" then		          MovieAttr.ID_TMDB = xNode.FirstChild.Value		        ElseIf xNode.GetAttribute("moviedb") = "IMDb" then		          MovieAttr.ID_IMDB = xNode.FirstChild.Value		        ElseIf xNode.GetAttribute("moviedb") = "RottenTomatoes" Then		          MovieAttr.ID_RottenTomatoes = xNode.FirstChild.Value		        End If		        		        'If xNode.FirstChild.GetAttribute("movieDB") = "TMDB" Then		        'MovieAttr.ID_TMDB = xNode.FirstChild.Value		        'ElseIf xNode.FirstChild.GetAttribute("movieDB") = "IMDb" Then		        'MovieAttr.ID_IMDB = xNode.FirstChild.Value		        'ElseIf xNode.FirstChild.GetAttribute("movieDB") = "RottenTomatoes" Then		        'MovieAttr.ID_RottenTomatoes = xNode.FirstChild.Value		        'End If		        		      case "title"		        MovieAttr.Title = xNode.FirstChild.Value		      case "sorttitle"		        MovieAttr.TitleSort = xNode.FirstChild.Value		      case "originaltitle"		        MovieAttr.TitleOriginal = xNode.FirstChild.Value		        		      case "year"		        MovieAttr.DateYear = val( xNode.FirstChild.Value )		      case "releasedate"		        MovieAttr.DatePremiered = xNode.FirstChild.Value		        If MovieAttr.DatePremiered.InStr(0,"/") > 0 Then		          Dim s() as String = MovieAttr.DatePremiered.Split("/")		          MovieAttr.DatePremiered = s(2) + "-" + s(0) + "-" + s(1)		        End If		      case "dvddate"		        MovieAttr.DateReleasedOnDVD = xNode.FirstChild.Value		        		      case "rating"		        MovieAttr.Rating = val( xNode.FirstChild.Value )		      case "votes"		        MovieAttr.RatingVotes = val( xNode.FirstChild.Value )		      case "top250"		        MovieAttr.RatingTop250 = val( xNode.FirstChild.Value )		        		      case "watched"		        If xNode.FirstChild.Value = "True" then		          MovieAttr.StatusWatched = True		        ElseIf xNode.FirstChild.Value = "False" then		          MovieAttr.StatusWatched = False		        End If		        		      case "certification"		        RatingCertification.Append xNode.FirstChild.Value		        		      case "mpaa"		        MovieAttr.RatingMPAA = xNode.FirstChild.Value		        		      case "rottentomatoes"		        For n as Integer = 0 to xNode.ChildCount - 1		          xItem = xNode.Child(n)		          If xItem.FirstChild <> Nil Then		            If xItem.Name = "tomatoconcensus" Then MovieAttr.TomatoConcensus = xItem.FirstChild.Value		            		            If xItem.Name = "tomatocriticsrating" Then MovieAttr.TomatoCriticsRating = xItem.FirstChild.Value		            If xItem.Name = "tomatocriticsscore"  Then MovieAttr.TomatoCriticsScore  = Val( xItem.FirstChild.Value )		            		            If xItem.Name = "tomatoaudiencerating" Then MovieAttr.TomatoAudienceRating = xItem.FirstChild.Value		            If xItem.Name = "tomatoaudiencescore"  Then MovieAttr.TomatoAudienceScore  = Val( xItem.FirstChild.Value )		          End If		          		        Next		        		        		      case "tomatoconcensus"		        MovieAttr.TomatoConcensus = xNode.FirstChild.Value		      case "tomatocriticsrating"		        MovieAttr.TomatoCriticsRating = xNode.FirstChild.Value		      case "tomatocriticsscore"		        MovieAttr.TomatoCriticsScore = Val( xNode.FirstChild.Value )		        		      case "studios"		        For n as Integer = 0 to xNode.ChildCount - 1		          xItem = xNode.Child(n)		          If xItem.FirstChild <> Nil Then MovieAttr.Studios.Append xItem.FirstChild.Value		        Next		        		        // Sort out double genres		        MovieAttr.Studios.Sort		        For t as Integer = MovieAttr.Studios.Ubound To 1 Step -1		          If MovieAttr.Studios(t) = MovieAttr.Studios(t-1) Then MovieAttr.Studios.Remove(t)		        Next t		        		      case "studio"		        MovieAttr.Studios.Append xNode.FirstChild.Value		        		      case "company"		        MovieAttr.Studios.Append xNode.FirstChild.Value		        		      case "country"		        MovieAttr.Countries.Append xNode.FirstChild.Value		        		      case "genre"		        If xNode.FirstChild.Value.InStr(0, "/") > 0 Then		          // Ember support.		          MovieAttr.Genres = xNode.FirstChild.Value.Split(" / ")		        Else		          MovieAttr.Genres.Append xNode.FirstChild.Value		        End If		        		      case "language"		        If xNode.FirstChild.Value.InStr(0, "/") > 0 Then		          MovieAttr.LanguagesSpoken = xNode.FirstChild.Value.Split(" / ")		        Else		          MovieAttr.LanguagesSpoken.Append xNode.FirstChild.Value		          If xNode.GetAttribute("code") <> "" Then MovieAttr.LanguagesSpokenCode.Append xNode.GetAttribute("code") Else MovieAttr.LanguagesSpokenCode.Append ""		        End If		        		      case "director"		        MovieAttr.CreditDirector = xNode.FirstChild.Value		        If xNode.AttributeCount > -1 Then MovieAttr.CreditDirectorID = xNode.GetAttribute("id")		        		      case "credits"		        If xNode.FirstChild.FirstChild <> Nil Then		          // Ember support.		          MovieAttr.CreditWriter = xNode.FirstChild.FirstChild.Value		        Else		          MovieAttr.CreditWriter = xNode.FirstChild.Value		        End If		        If xNode.AttributeCount > -1 Then MovieAttr.CreditWriterID = xNode.GetAttribute("id")		        		      case "sound"		        MovieAttr.CreditSound = xNode.FirstChild.Value		        If xNode.AttributeCount > -1 Then MovieAttr.CreditSoundID = xNode.GetAttribute("id")		        		      case "tagline"		        MovieAttr.DescriptionTagline = xNode.FirstChild.Value		      case "outline"		        MovieAttr.DescriptionOutline = xNode.FirstChild.Value		      case "plot"		        MovieAttr.DescriptionPlot = xNode.FirstChild.Value		        		      case "set"		        MovieAttr.Set = xNode.FirstChild.Value		        If xNode.FirstChild.AttributeCount > -1 Then		          MovieAttr.SetOrder = val( xNode.GetAttribute("order") )		          MovieAttr.SetPosterURL = xNode.GetAttribute("PosterURL")		          MovieAttr.SetFanartURL = xNode.GetAttribute("FanartURL")		        End If		        		      case "runtime"		        MovieAttr.InfoVideoRuntime = xNode.FirstChild.Value		        MovieAttr.InfoVideoRuntime = Trim( MovieAttr.InfoVideoRuntime.ReplaceAll( "mins", "" ).ReplaceAll( "min", "" ).ReplaceAll( "minutes", "" ) )		        		      case "trailer"		        MovieAttr.TrailerURLs.Append xNode.FirstChild.Value		        If xNode.AttributeCount > -1 Then		          MovieAttr.TrailerNames.Append   xNode.GetAttribute("name")		          MovieAttr.TrailerQuality.Append xNode.GetAttribute("quality")		        End If		        		      case "trailers"		        For n as Integer = 0 to xNode.ChildCount - 1		          xItem = xNode.Child(n)		          		          If xItem.FirstChild <> Nil Then		            MovieAttr.TrailerURLs.Append xItem.FirstChild.Value		            If xItem.AttributeCount > -1 Then		              MovieAttr.TrailerNames.Append   xItem.GetAttribute("name")		              MovieAttr.TrailerQuality.Append xItem.GetAttribute("quality")		            End If		          End If		        Next		        		      case "thumb"		        If xNode.FirstChild.Value.left(4) = "http" Then		          MovieAttr.ART_PosterURLs.Append xNode.FirstChild.Value		          		          // Dimensions		          If xNode.GetAttribute("dim") <> "" Then		            MovieAttr.ART_PosterDimensions.Append xNode.GetAttribute("dim")		          Else		            MovieAttr.ART_PosterDimensions.Append ""		          End If		          		          // Thumbs		          If xNode.GetAttribute("preview") <> "" Then		            MovieAttr.ART_PosterThumbURLs.Append xNode.GetAttribute("preview")		          Else		            MovieAttr.ART_PosterThumbURLs.Append ""		          End If		        End If		        		        		      case "fanart"		        For n as Integer = 0 to xNode.ChildCount - 1		          xItem = xNode.Child(n)		          MovieAttr.ART_FanartURLs.Append      xItem.FirstChild.Value		          		          // Dimensions		          If xItem.GetAttribute("dim") <> "" Then		            MovieAttr.ART_FanartDimensions.Append xItem.GetAttribute("dim")		          Else		            MovieAttr.ART_FanartDimensions.Append ""		          End If		          		          // Thumbs		          If xItem.GetAttribute("preview") <> "" Then		            MovieAttr.Art_FanartThumbURLs.Append xItem.GetAttribute("preview")		          Else		            MovieAttr.ART_FanartThumbURLs.Append ""		          End If		        Next		        		      case "actor"		        		        If xNode.AttributeCount > -1 Then		          ActorID.Append xNode.GetAttribute("id")		        Else		          ActorID.Append ""		        End If		        		        For n as Integer = 0 to xNode.ChildCount - 1		          xItem = xNode.Child(n)		          		          If xNode.ChildCount > 2 then		            		            Select case xItem.Name		            case "name"		              If xItem.FirstChild <> Nil then MovieAttr.ActorName.Append xItem.FirstChild.Value else MovieAttr.ActorName.Append ""		            case "role"		              If xItem.FirstChild <> Nil then MovieAttr.ActorRole.Append xItem.FirstChild.Value else MovieAttr.ActorRole.Append ""		            case "thumb"		              If xItem.FirstChild <> Nil then MovieAttr.ActorThumbURL.Append xItem.FirstChild.Value else MovieAttr.ActorThumbURL.Append ""		            End Select		            		          ElseIf xNode.ChildCount = 2 then		            		            Select case xItem.Name		            case "name"		              If xItem.FirstChild <> Nil then MovieAttr.ActorName.Append xItem.FirstChild.Value else MovieAttr.ActorName.Append ""		            case "role"		              If xItem.FirstChild <> Nil then MovieAttr.ActorRole.Append xItem.FirstChild.Value else MovieAttr.ActorRole.Append ""		            End Select		            		            MovieAttr.ActorThumbURL.Append ""		            		          ElseIf xNode.ChildCount = 1 then		            		            Select case xItem.Name		            case "name"		              If xItem.FirstChild <> Nil then MovieAttr.ActorName.Append xItem.FirstChild.Value else MovieAttr.ActorName.Append ""		            End Select		            		            MovieAttr.ActorRole.Append     ""		            MovieAttr.ActorThumbURL.Append ""		            		          End If // @END xNode.ChildCount		        Next		        		      case "fileinfo"		        xItem = xNode.FirstChild		        		        For n as Integer = 0 to xItem.ChildCount - 1		          		          Select case xItem.Child(n).Name		            		          case "audio"		            xAudio = xItem.Child(n)		            		            For t as Integer = 0 to xAudio.ChildCount - 1		              If xAudio.Child(t).FirstChild <> Nil then		                		                Select case xAudio.Child(t).Name		                case "channels"		                  MovieAttr.InfoAudioChannels.Append Val( xAudio.Child(t).FirstChild.Value )		                case "codec"		                  MovieAttr.InfoAudioCodec.Append xAudio.Child(t).FirstChild.Value		                case "language"		                  MovieAttr.InfoAudioLanguage.Append xAudio.Child(t).FirstChild.Value		                case "bitrate"		                  MovieAttr.InfoAudioBitRate.Append xAudio.Child(t).FirstChild.Value		                case "bitratemode"		                  MovieAttr.InfoAudioBitRateMode.Append xAudio.Child(t).FirstChild.Value		                  		                End Select		                		              End If		            Next		            		          case "video"		            xVideo = xItem.Child(n)		            		            For t as Integer = 0 to xVideo.ChildCount - 1		              If xVideo.Child(t).FirstChild <> Nil then		                		                Select case xVideo.Child(t).Name		                case "aspect"		                  MovieAttr.InfoVideoAspect   = xVideo.Child(t).FirstChild.Value		                case "codec"		                  MovieAttr.InfoVideoCodec    = xVideo.Child(t).FirstChild.Value		                case "duration"		                  MovieAttr.InfoVideoRuntime  = xVideo.Child(t).FirstChild.Value		                  MovieAttr.InfoVideoRuntime = Trim( MovieAttr.InfoVideoRuntime.ReplaceAll( "mins", "" ).ReplaceAll( "min", "" ) )		                case "scantype"		                  MovieAttr.InfoVideoScantype = xVideo.Child(t).FirstChild.Value		                case "width"		                  MovieAttr.InfoVideoWidth    = val( xVideo.Child(t).FirstChild.Value )		                case "height"		                  MovieAttr.InfoVideoHeight   = val( xVideo.Child(t).FirstChild.Value )		                End Select		                		              End If		            Next		            		          case "subtitle"		            xSubtitle = xItem.Child(n)		            For t as Integer = 0 to xSubtitle.ChildCount - 1		              If xSubtitle.Child(t).FirstChild <> Nil and xSubtitle.Child(t).Name = "language" then MovieAttr.InfoSubtitleLanguage.Append xSubtitle.Child(t).Value		              If xSubtitle.Child(t).AttributeCount > 0 and xSubtitle.Child(t).GetAttribute("format") <> "" Then MovieAttr.InfoSubtitleFormat.Append xSubtitle.Child(t).GetAttribute("format") Else MovieAttr.InfoSubtitleFormat.Append ""		            Next		            		          End Select		          		        Next		        		      End Select		      		    Else		      // xNode.FirstChild = NIL		    End If		    		  Next		  		Exception err as NilObjectException		  MsgBox "File not found or invalid XML item found." + chr(13) + chr(13) + "Please let the author know about this as soon as possible."		  Return		  		Exception err as OutOfBoundsException		  MsgBox "Something went wrong while reading the movie " + MovieAttr.FolderParent.Name + "'s NFO file..." + chr(13) + chr(13) + "Please let the author know about this as soon as possible."		  Return		  		Exception err as XmlException		  MsgBox "Invalid or not well-formed XML NFO file found for movie " + MovieAttr.FolderParent.Name + chr(13) + chr(13) + "You should consider removing the NFO file for said movie item before continuing."		  Return		  		Exception err as IOException		  MsgBox "IOException error Number: " + str(err.ErrorNumber) + chr(13) + chr(13) + _		  err.Message + chr(13) + _		  "Something might have gone wrong while reading: " + MovieAttr.FolderParent.Name + chr(13) + _		  "Please contact the author."		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NFOWrite(NFOFileLocation as FolderItem)		  Dim Xml as new XmlDocument		  Dim xRoot, xNode, xItem as XmlNode		  Xml.PreserveWhitespace = True		  		  xroot = Xml.AppendChild( Xml.CreateElement( "movie" ) )		  		  If MovieAttr.ID_IMDB <> "" then		    xNode = xRoot.AppendNewChild("id")		    xNode.SetAttribute("moviedb", "IMDb")		    xNode.SetValue( MovieAttr.ID_IMDB )		  End If		  		  If MovieAttr.ID_TMDB <> "" then		    xNode = xRoot.AppendNewChild("id")		    xNode.SetAttribute("moviedb", "TMDB")		    xNode.SetValue( MovieAttr.ID_TMDB )		  End If		  		  If MovieAttr.ID_RottenTomatoes <> "" Then		    xNode = xRoot.AppendNewChild("id")		    xNode.SetAttribute("moviedb", "RottenTomatoes")		    xNode.SetValue( MovieAttr.ID_RottenTomatoes )		  End If		  		  If MovieAttr.Title <> ""         then xRoot.AppendSimpleChild( "title",         Trim( MovieAttr.Title ) )		  If MovieAttr.TitleSort <> ""     then xRoot.AppendSimpleChild( "sorttitle",     Trim( MovieAttr.TitleSort ) )		  If MovieAttr.TitleOriginal <> "" then xRoot.AppendSimpleChild( "originaltitle", Trim( MovieAttr.TitleOriginal ) )		  		  If MovieAttr.DateYear > -1           then xRoot.AppendSimpleChild( "year",          MovieAttr.DateYear )		  If MovieAttr.DatePremiered <> ""     then xRoot.AppendSimpleChild( "releasedate",   Trim( MovieAttr.DatePremiered ) )		  If MovieAttr.DateReleasedOnDVD <> "" then xRoot.AppendSimpleChild( "dvddate",       Trim( MovieAttr.DateReleasedOnDVD ) )		  		  If MovieAttr.set <> "" then		    xNode = xRoot.AppendNewChild("set")		    xNode.SetValue( MovieAttr.Set )		    If MovieAttr.SetOrder <> -1 then xNode.SetAttribute( "order", str( MovieAttr.SetOrder ) )		    If MovieAttr.SetPosterURL <> "" Then xNode.SetAttribute("PosterURL", Trim( MovieAttr.SetPosterURL ) )		    If MovieAttr.SetFanartURL <> "" Then xNode.SetAttribute("FanartURL", Trim( MovieAttr.SetFanartURL ) )		  End If		  		  If MovieAttr.RatingTop250 > -1               then xRoot.AppendSimpleChild( "top250",        str( RatingTop250 ) )		  If MovieAttr.Rating > -1                     then xRoot.AppendSimpleChild( "rating",        str( Floor( MovieAttr.Rating * 10 ) / 10 ) )		  If MovieAttr.RatingVotes > -1                then xRoot.AppendSimpleChild( "votes",         MovieAttr.RatingVotes )		  If MovieAttr.RatingMPAA <> ""                then xRoot.AppendSimpleChild( "mpaa",          Trim( MovieAttr.RatingMPAA ) )		  		  If MovieAttr.TomatoConcensus <> "" OR _		    MovieAttr.TomatoCriticsRating <> "" OR _		    MovieAttr.TomatoCriticsScore > -1 OR _		    MovieAttr.TomatoAudienceRating <>  "" OR _		    MovieAttr.TomatoAudienceScore > -1 Then		    		    xNode = xRoot.AppendNewChild("rottentomatoes")		    		    If MovieAttr.TomatoConcensus <> ""     then xNode.AppendSimpleChild( "tomatoconcensus", Trim( MovieAttr.TomatoConcensus ) )		    		    If MovieAttr.TomatoCriticsRating <> "" then xNode.AppendSimpleChild( "tomatocriticsrating", Trim( MovieAttr.TomatoCriticsRating ) )		    If MovieAttr.TomatoCriticsScore > -1   then xNode.AppendSimpleChild( "tomatocriticsscore",   Str( MovieAttr.TomatoCriticsScore ) )		    		    If MovieAttr.TomatoAudienceRating <> "" then xNode.AppendSimpleChild( "tomatoaudiencerating", Trim( MovieAttr.TomatoAudienceRating ) )		    If MovieAttr.TomatoAudienceScore > -1   then xNode.AppendSimpleChild( "tomatoaudiencescore",   Str( MovieAttr.TomatoAudienceScore ) )		    		  End If		  		  For i as Integer = 0 to MovieAttr.RatingCertification.Ubound		    If MovieAttr.RatingCertification(i) <> "" Then xRoot.AppendSimpleChild( "certification", Trim( MovieAttr.RatingCertification(i) ) )		  Next		  		  If MovieAttr.DescriptionTagline <> "" then xRoot.AppendSimpleChild( "tagline", Trim( MovieAttr.DescriptionTagline ) )		  If MovieAttr.DescriptionOutline <> "" then xRoot.AppendSimpleChild( "outline", Trim( MovieAttr.DescriptionOutline ) )		  If MovieAttr.DescriptionPlot    <> "" then xRoot.AppendSimpleChild( "plot",    Trim( MovieAttr.DescriptionPlot    ) )		  		  If MovieAttr.InfoVideoRuntime <> "" then xRoot.AppendSimpleChild( "runtime", Trim( MovieAttr.InfoVideoRuntime ) )		  If MovieAttr.StatusWatched          then xRoot.AppendSimpleChild( "watched", MovieAttr.StatusWatched )		  		  If MovieAttr.Genres.Ubound > -1 then		    For i as Integer = 0 to MovieAttr.Genres.Ubound		      xRoot.AppendSimpleChild( "genre", Trim( MovieAttr.Genres(i) ) )		    Next		  End If		  		  If MovieAttr.LanguagesSpoken.Ubound > -1 Then		    'xNode = xRoot.AppendNewChild("languages_spoken")		    For i as Integer = 0 to MovieAttr.LanguagesSpoken.Ubound		      xNode = xRoot.AppendNewChild("language")		      xNode.SetValue( Trim( MovieAttr.LanguagesSpoken(i) ) )		      If MovieAttr.LanguagesSpokenCode.Ubound = MovieAttr.LanguagesSpoken.Ubound Then xNode.SetAttribute("code", Trim( MovieAttr.LanguagesSpokenCode(i) ) )		    Next		  End If		  		  // Write the first studio into the root.		  If MovieAttr.Studios.Ubound > -1 Then		    xRoot.AppendSimpleChild( "studio", Trim( MovieAttr.Studios(0) ) )		    		    // Write the other studios into an array.		    xNode = xRoot.AppendNewChild("studios")		    If MovieAttr.Studios.Ubound > -1 then		      For n as Integer = 0 to MovieAttr.Studios.Ubound		        xNode.AppendSimpleChild( "studio", Trim( MovieAttr.Studios(n) ) )		      Next		    End If		    		  End If		  		  If MovieAttr.Countries.Ubound > -1 then		    For t as Integer = 0 to MovieAttr.Countries.Ubound		      xRoot.AppendSimpleChild( "country", Trim( MovieAttr.Countries(t) ) )		    Next		  End If		  		  If MovieAttr.CreditDirector <> "" Then		    xNode = xRoot.AppendNewChild( "director" )		    xNode.SetValue( Trim( MovieAttr.CreditDirector ) )		    If MovieAttr.CreditDirectorID <> "" Then xNode.SetAttribute("id", MovieAttr.CreditDirectorID )		  End If		  		  If MovieAttr.CreditWriter   <> "" then		    xNode = xRoot.AppendNewChild( "credits" )		    xNode.SetValue( Trim( MovieAttr.CreditWriter ) )		    If MovieAttr.CreditWriterID <> "" Then xNode.SetAttribute("id", MovieAttr.CreditWriterID )		  End If		  		  If MovieAttr.CreditSound    <> "" then		    xNode = xRoot.AppendNewChild( "sound" )		    xNode.SetValue( Trim( MovieAttr.CreditSound ) )		    If MovieAttr.CreditSoundID <> "" Then xNode.SetAttribute("id", MovieAttr.CreditSoundID )		  End If		  		  If MovieAttr.ActorName.Ubound > -1 then		    For e as Integer = 0 to MovieAttr.ActorName.Ubound		      xNode = xRoot.AppendNewChild( "actor" )		      xNode.SetAttribute("id", MovieAttr.ActorID(e) )		      xNode.AppendSimpleChild( "name",  Trim( MovieAttr.ActorName(e)     ) )		      xNode.AppendSimpleChild( "role",  Trim( MovieAttr.ActorRole(e)     ) )		      xNode.AppendSimpleChild( "thumb", Trim( MovieAttr.ActorThumbURL(e) ) )		    Next		  End If		  		  If MovieAttr.TrailerURLs.Ubound > -1 Then		    xNode = xRoot.AppendNewChild( "trailers" )		    For i as Integer = 0 to MovieAttr.TrailerURLs.Ubound		      xItem = xNode.AppendNewChild( "trailer" )		      xItem.SetValue Trim( MovieAttr.TrailerURLs(i) )		      If MovieAttr.TrailerNames.Ubound = MovieAttr.TrailerURLs.Ubound Then _		      xItem.SetAttribute( "name", MovieAttr.TrailerNames(i) )		      If MovieAttr.TrailerQuality.Ubound = MovieAttr.TrailerURLs.Ubound Then _		      xItem.SetAttribute( "quality", MovieAttr.TrailerQuality(i) )		    Next		  End If		  		  If FindImagePoster( MovieAttr.FolderParent ) <> Nil then xRoot.AppendSimpleChild( "thumb", FindImagePoster( MovieAttr.FolderParent ).Name )		  		  If MovieAttr.ART_PosterURLs.Ubound > -1 then		    For g as Integer = 0 to MovieAttr.ART_PosterURLs.Ubound		      'xRoot.AppendSimpleChild( "thumb", Trim( MovieAttr.ART_PosterURLs(g) ) )		      xNode = xRoot.AppendNewChild( "thumb" )		      xNode.SetValue Trim( MovieAttr.ART_PosterURLs(g) )		      If MovieAttr.ART_PosterDimensions(g) <> "" Then xNode.SetAttribute( "dim", MovieAttr.ART_PosterDimensions(g) )		      If MovieAttr.ART_PosterThumbURLs(g) <> "" Then xNode.SetAttribute( "preview", MovieAttr.ART_PosterThumbURLs(g) )		    Next		  End If		  		  If MovieAttr.ART_FanartURLs.Ubound > -1 then		    xNode = xRoot.AppendNewChild( "fanart" )		    For r as Integer = 0 to MovieAttr.ART_FanartURLs.Ubound		      xItem = xNode.AppendNewChild( "thumb" )		      xItem.SetValue( Trim( MovieAttr.ART_FanartURLs(r) ) )		      		      If MovieAttr.ART_FanartDimensions.Ubound = MovieAttr.ART_FanartURLs.Ubound Then		        xItem.SetAttribute( "dim", Trim( MovieAttr.ART_FanartDimensions(r) ) )		      End If		      		      If MovieAttr.ART_FanartThumbURLs.Ubound = MovieAttr.ART_FanartURLs.Ubound Then		        xItem.SetAttribute( "preview", Trim( MovieAttr.Art_FanartThumbURLs(r) ) )		      End If		      		    Next		  End If		  		  'If   InfoVideoCodec <> "" or _		  'InfoVideoHeight > -1 or _		  'InfoVideoWidth > -1  or _		  'InfoVideoAspect > -1 then		  'If NFOFileLocation.Name <> "VIDEO_TS.nfo" And NFOFileLocation.Name <> "BDMV.nfo" And MovieAttr.InfoVideoCodec <> "" then		  If MovieAttr.InfoVideoCodec <> "" Then		    xNode = xRoot.AppendNewChild( "fileinfo" )		    xItem = xNode.AppendNewChild( "streamdetails" )		    		    Dim xVideo as XmlNode = xItem.AppendNewChild( "video" )		    If MovieAttr.InfoVideoCodec <> ""    then xVideo.AppendSimpleChild( "codec",    Trim( MovieAttr.InfoVideoCodec   ) )		    If MovieAttr.InfoVideoAspect <> ""   then xVideo.AppendSimpleChild( "aspect",   Trim( MovieAttr.InfoVideoAspect  ) )		    If MovieAttr.InfoVideoScantype <> "" then xVideo.AppendSimpleChild( "scantype", Trim( MovieAttr.InfoVideoScantype ) )		    If MovieAttr.InfoVideoWidth  > -1    then xVideo.AppendSimpleChild( "width",    MovieAttr.InfoVideoWidth   )		    If MovieAttr.InfoVideoHeight > -1    then xVideo.AppendSimpleChild( "height",   MovieAttr.InfoVideoHeight  )		    If MovieAttr.InfoVideoRuntime <> ""  then xVideo.AppendSimpleChild( "runtime",  Trim( MovieAttr.InfoVideoRuntime ) )		    		    For g as Integer = 0 to MovieAttr.InfoAudioCodec.Ubound		      Dim xAudio as XmlNode = xItem.AppendNewChild( "audio" )		      If MovieAttr.InfoAudioCodec.Ubound >= g    and MovieAttr.InfoAudioCodec(g) <> ""    then xAudio.AppendSimpleChild( "codec",    Trim( MovieAttr.InfoAudioCodec(g)    ) )		      If MovieAttr.InfoAudioChannels.Ubound >= g and MovieAttr.InfoAudioChannels(g) > -1  then xAudio.AppendSimpleChild( "channels",  Str( MovieAttr.InfoAudioChannels(g) ) )		      If MovieAttr.InfoAudioLanguage.Ubound >= g and MovieAttr.InfoAudioLanguage(g) <> "" then xAudio.AppendSimpleChild( "language", Trim( MovieAttr.InfoAudioLanguage(g) ) )		      If MovieAttr.InfoAudioBitRate.Ubound >= g  and MovieAttr.InfoAudioBitRate(g) <> ""  then xAudio.AppendSimpleChild( "bitrate",  Trim( MovieAttr.InfoAudioBitRate(g)  ) )		      If MovieAttr.InfoAudioBitRateMode.Ubound >= g and MovieAttr.InfoAudioBitRateMode(g) <> "" then xAudio.AppendSimpleChild( "bitratemode", Trim( MovieAttr.InfoAudioBitRateMode(g) ) )		    Next		    		    For r as Integer = 0 to MovieAttr.InfoSubtitleLanguage.Ubound		      Dim xSub as XmlNode = xItem.AppendNewChild( "subtitle" )		      If MovieAttr.InfoSubtitleLanguage.Ubound >= r And MovieAttr.InfoSubtitleLanguage(r) <> "" Then		        xSub.AppendSimpleChild( "language", Trim( MovieAttr.InfoSubtitleLanguage(r) ) )		        If MovieAttr.InfoSubtitleFormat.Ubound <= r And MovieAttr.InfoSubtitleFormat(r) <> "" Then xSub.LastChild.SetAttribute("format", Trim( MovieAttr.InfoSubtitleFormat(r) ) )		      End If		    Next		    		  End If		  		  		  		  xRoot.Indent(0)		  Xml.LoadXml( Xml.ToString.IndentRoot("movie") )		  Xml.SaveXml( NFOFileLocation )		End Sub	#tag EndMethod	#tag Note, Name = Movie.NFO				Movies		movie.nfo will override all and any nfo files in the same folder as the media files if you use the "Use foldernames for lookups" setting.		If you don`t, then moviename.nfo is used. If there is only one nfo file in a folder, The scraper will use it for all media files in that folder.		If there are multiple media files in a folder, the *.nfo should be named exactly the same as the video file it is representing (ie. moviename.avi and moviename.nfo).		In the case of multi-part (stacked) video stacking, name the file either moviename.nfo or moviename-CD1.nfo where the first filename is moviename-CD1.avi.		Note, if your movie is ripped as VOB`s and stored in a `VIDEO_TS` folder, you will have to name the file `VIDEO_TS.nfo` and place it in the same directory with the VIDEO_TS.ifo file.		Additionally the `set` tag can be used to help sort movies that are part of a series or collection (ie Harry Potter, James Bond films).		This sort of collection tagging must be done in the .NFO file before the movie is scanned into the library.				    <movie>		        <title>Who knows</title>		        <originaltitle>Who knows for real</originaltitle>		        <sorttitle>Who knows 1</sorttitle>		        <set>Who knows trilogy</set>		        <rating>6.100000</rating>		        <year>2008</year>		        <top250>0</top250>		        <votes>50</votes>		        <outline>A look at the role of the Buckeye State in the 2004 Presidential Election.</outline>		        <plot>A look at the role of the Buckeye State in the 2004 Presidential Election.</plot>		        <tagline></tagline>		        <runtime>90 min</runtime>		        <thumb>http://ia.ec.imdb.com/media/imdb/01/I/25/65/31/10f.jpg</thumb>		        <mpaa>Not available</mpaa>		        <playcount>0</playcount>		        <watched>false</watched>		        <id>tt0432337</id>		        <filenameandpath>c:\Dummy_Movie_Files\Movies\...So Goes The Nation.avi</filenameandpath>		        <trailer></trailer>		        <genre></genre>		        <credits></credits>		        <fileinfo>		            <streamdetails>		                <video>		                    <codec>h264</codec>		                    <aspect>2.35</aspect>		                    <width>1920</width>		                    <height>816</height>		                </video>		                <audio>		                    <codec>ac3</codec>		                    <language>eng</language>		                    <channels>6</channels>		                </audio>		                <audio>		                    <codec>ac3</codec>		                    <language>spa</language>		                   <channels>2</channels>		                </audio>		                <subtitle>		                    <language>spa</language>		                </subtitle>		            </streamdetails>		        </fileinfo>		        <director>Adam Del Deo</director>		        <actor>		            <name>Paul Begala</name>		            <role>Himself</role>		        </actor>		        <actor>		            <name>George W. Bush</name>		            <role>Himself</role>		        </actor>		        <actor>		            <name>Mary Beth Cahill</name>		            <role>Herself</role>		        </actor>		        <actor>		            <name>Ed Gillespie</name>		            <role>Himself</role>		        </actor>		        <actor>		            <name>John Kerry</name>		            <role>Himself</role>		        </actor>		    </movie>	#tag EndNote	#tag Note, Name = Naming Conventions				ai = Audio Information		vi = Video Information				FileInfo Format:				        <fileinfo>		            <streamdetails>		                <video>		                    <codec>xvid</codec>		                    <aspect>2.388060</aspect>		                    <width>1280</width>		                    <height>536</height>		                    <durationinseconds>5165</durationinseconds>		                </video>		                <audio>		                    <codec>ac3</codec>		                    <language></language>		                    <channels>6</channels>		                </audio>		            </streamdetails>		        </fileinfo>				Actor Format:				        <actor>		            <name>Rutger Hauer</name>		            <role>Hobo</role>		            <thumb>http://ia.media-imdb.com/images/M/MV5BMTI5MjE4MTg3MV5BMl5BanBnXkFtZTYwMjk0Mzgy._V1._SY275_SX400_.jpg</thumb>		        </actor>	#tag EndNote	#tag Note, Name = NFO Files				XBMC NFO movie XML		Utilizes the XBMC movie layout as specified here http://xbmc.org/wiki/?title=Import_-_Export_Library#Video_nfo_Files The episodedetails, & musicvideo layouts are not currently implemented, and will require additional internet database scanning features to be implemented first.				Some fields map directly to YAMJ, and others do not currently have a YAMJ counterpart. These fields are commented on below.				Any fields may be populated or left blank as the user sees fit. If a field is populated, then it will take precedence over anything retrieved from the Internet. However, if a field is left blank in the NFO, then that field will still be loaded as before.				On fields where multiple may exist, like <genre> or <actor>, if even one is present in the NFO, then YAMJ will not attempt to scrape any additional information.				Turn Off Internet Scraping		If you want only the information from the NFO file to be used and not have MovieJukebox search the internet for information you should use an ID value of 0 (Zero) or -1				Example				<movie>		  <id>-1</id>		</movie>		Format		<movie>		    <title></title>		    <originaltitle></originaltitle>		    <sorttitle></sorttitle>		    <rating></rating>               <!-- 0 - 10 rating, can be decimal -->		    <year></year>		    <top250></top250>               <!-- the IMDB top 250 ranking, integer 1 - 250 or empty -->		    <votes></votes>                 <!-- currently unused in YAMJ -->		    <outline></outline>             <!-- a short plot description -->		    <plot></plot>                   <!-- a longer plot description -->		    <tagline></tagline>             <!-- The tagline for the movie -->		    <runtime></runtime>		    <premiered></premiered>         <!-- the release date of the movie -->		    <thumb></thumb>                 <!-- url of poster image. use URL formatting, such as http:// for internet resources or file:// for local resources -->		    <fanart></fanart>               <!-- url of fanart image. use URL formatting, such as http:// for internet resources or file:// for local resources -->		    <mpaa></mpaa>		    <certification></certification> <!-- Used for all certification that isn`t MPAA and only used if imdb.getCertificationFromMPAA=false -->		    <playcount></playcount>         <!-- currently unused in YAMJ -->		    <watched></watched>             <!-- This will mark the movie watched or unwatched -->		    <id></id>                       <!-- the IMDB id of the movie. includes the leading "tt". Use an id of 0 or -1 to disable further internet plugin scraping. -->		    <id moviedb="allocine"></id>    <!-- the allocine id of the movie. This should work for other plugins using their PLUGIN_ID as "moviedb" value -->		    <id moviedb="filmweb"></id>     <!-- the filmweb id of the movie. This should work for other plugins using their PLUGIN_ID as "moviedb" value -->		    <filenameandpath></filenameandpath> <!-- currently unused since YAMJ determines path from searching the configured libraries -->		    <trailer></trailer>             <!-- multiple trailer records may exist -->		    <genre></genre>                 <!-- multiple genre records may exist, including any custom ones -->		    <credits>		        <writer></writer>           <!-- Writer name, one per entry -->		    </credits>		    <director></director>		    <company></company>             <!-- The studio company that produced the movie -->		    <studio></studio>               <!-- Synonym for company tag -->		    <country></country>             <!-- Country the video was produced in -->		    <actor>                         <!-- Multiple actor records may exist -->		        <name></name>		        <role></role>               <!-- Currently unused in YAMJ -->		    </actor>		    <sets>		      <set>First Set Name</set>		      <set order="?">Another Set With An Order</set>		    </sets>		<!-- NOTE: All of the following tags will OVERWRITE the derived data -->		    <videosource></videosource>     <!-- The video source of the file -->		    <videooutput></videooutput>     <!-- The video output of the file -->		    <fps></fps>                     <!-- The Frames Per Second value for the movie. NOTE: This should be a valid float value (with a ".") -->		    <fileinfo>		        <streamdetails>		            <video>		                <codec></codec>		                <aspect></aspect>		                <width></width>     <!-- Width of the video file -->		                <height></height>   <!-- Height of the video file -->		            </video>		            <audio>		                <codec></codec>		                <language></language>		                <channels></channels>		            </audio>		            <subtitle>		                <language></language>    <!-- currently unused in YAMJ -->		            </subtitle>		        </streamdetails>		    </fileinfo>		</movie>		XML Encoding		XML must be either provided in UTF-8 charset or the encoding must be explicitly specified in the xml header				Example:				<?xml version="1.0" encoding="windows-1252"?>		<movie>		...		If existing(old) NFO files do not have the described header and you do not want to re-encode or add the header to all the files, there is a parameter in the moviejukebox.properties which can be used to force the XML parser to read all the NFO files using the specified encoding.				mjb.forceNFOEncoding=YOUR-ENCODING	#tag EndNote	#tag Property, Flags = &h1		Protected ActorID() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorName() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorRole() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Banner As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_ClearArt As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Disc As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Fanart As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartDimensions() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartThumbURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Logo As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_MPAARating As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Poster As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_PosterDimensions() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_PosterThumbURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_PosterURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Studio As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Thumb As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected Countries() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditDirector As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditDirectorID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditSound As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditSoundID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditWriter As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditWriterID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DatePremiered As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DateReleasedOnDVD As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DateYear As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected DescriptionOutline As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DescriptionPlot As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DescriptionTagline As String	#tag EndProperty	#tag Property, Flags = &h1		Protected FolderParent As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected Genres() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_IMDB As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_RottenTomatoes As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_TMDB As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoAudioBitRate() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoAudioBitRateMode() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoAudioChannels() As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoAudioCodec() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoAudioLanguage() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoSubtitleFormat() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoSubtitleLanguage() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoVideoAspect As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoVideoCodec As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoVideoHeight As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoVideoRuntime As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoVideoScantype As String	#tag EndProperty	#tag Property, Flags = &h1		Protected InfoVideoWidth As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected LanguagesSpoken() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected LanguagesSpokenCode() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Rating As Double	#tag EndProperty	#tag Property, Flags = &h1		Protected RatingCertification() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected RatingMPAA As String	#tag EndProperty	#tag Property, Flags = &h1		Protected RatingTop250 As Double	#tag EndProperty	#tag Property, Flags = &h1		Protected RatingVotes As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected Set As String	#tag EndProperty	#tag Property, Flags = &h1		Protected SetFanartURL As String	#tag EndProperty	#tag Property, Flags = &h1		Protected SetOrder As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected SetPosterURL As String	#tag EndProperty	#tag Property, Flags = &h1		Protected StatusWatched As Boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected Studios() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Title As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TitleOriginal As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TitleSort As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TomatoAudienceRating As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TomatoAudienceScore As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected TomatoConcensus As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TomatoCriticsRating As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TomatoCriticsScore As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected TrailerNames() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TrailerQuality() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TrailerURLs() As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule