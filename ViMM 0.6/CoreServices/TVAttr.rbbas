#tag ModuleProtected Module TVAttr	#tag Method, Flags = &h1		Protected Sub ClearProperties()		  ReDim Actor_ID(-1)		  ReDim Actor_Name(-1)		  ReDim Actor_Role(-1)		  ReDim Actor_ThumbURL(-1)		  		  		  ReDim ART_PosterURLs(-1)		  ReDim ART_SeasonURLs(-1)		  ReDim ART_SeasonNumbers(-1)		  		  ReDim ART_FanartDimensions(-1)		  ReDim ART_FanartThumbURLs(-1)		  ReDim ART_FanartURLs(-1)		  		  ReDim Art_BannerURLs(-1)		  		  		  ART_Poster       = Nil		  ART_Fanart       = Nil		  ART_Banner       = Nil		  		  ART_Logo         = Nil		  ART_ClearArt     = Nil		  ART_TVThumb      = Nil		  ART_CharacterArt = Nil		  		  ART_MPAARating   = Nil		  ART_Studio       = Nil		  		  ID_IMDb   = ""		  ID_TVDB   = ""		  ID_TVRage = ""		  		  Title         = ""		  TitleSort     = ""		  TitleOriginal = ""		  		  		  CreditDirector = ""		  CreditWriter   = ""		  CreditMusic    = ""		  		  DatePremiered = ""		  DateYear = -1		  		  DescriptionTagline = ""		  DescriptionOutline = ""		  DescriptionPlot    = ""		  		  DurationRuntime = -1		  		  ReDim Genres(-1)		  		  NextAired_Date = ""		  NextAired_Episode = ""		  		  Rating = -1		  RatingMPAA = ""		  RatingVotes = -1		  		  Status = ""		  Studio = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function DestinationNFO(TVShowParent as FolderItem) As FolderItem		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub LoadImages(TVParent as FolderItem)		  If App.DebugMode Then Return		  		  TVAttr.ART_Poster = Nil		  TVAttr.ART_Fanart = Nil		  TVAttr.ART_Banner = Nil		  		  TVAttr.ART_Logo         = Nil		  TVAttr.ART_TVThumb      = Nil		  TVAttr.ART_ClearArt     = Nil		  TVAttr.ART_CharacterArt = Nil		  		  TVAttr.ART_Studio     = Nil		  TVAttr.ART_MPAARating = Nil		  		  Dim ArtFile as FolderItem		  Dim CachedPoster as String = TVAttr.ID_IMDb + ".television.poster.jpg"		  Dim CachedFanart as String = TVAttr.ID_IMDb + ".television.fanart.jpg"		  		  		  // ## Load poster		  TVAttr.ART_Poster = CacheImageLoad( CachedPoster )		  If MovieAttr.ART_Poster = Nil Then		    ArtFile = FindImagePoster( TVParent )		    If ArtFile <> Nil And ArtFile.Exists Then		      CacheImageSet( Picture.Open( ArtFile ), CachedPoster )		      TVAttr.ART_Poster = CacheImageLoad( CachedPoster )		      If TVAttr.ART_Poster = Nil Then TVAttr.ART_Poster = Picture.Open( ArtFile ) // Last resort		    End If		  End If		  ArtFile = Nil		  		  		  // ## Load Fanart		  TVAttr.ART_Fanart = CacheImageLoad( CachedPoster )		  If MovieAttr.ART_Fanart = Nil Then		    ArtFile = FindImageFanart( TVParent )		    If ArtFile <> Nil And ArtFile.Exists Then		      CacheImageSet( Picture.Open( ArtFile ), CachedFanart )		      TVAttr.ART_Fanart = CacheImageLoad( CachedFanart )		      If TVAttr.ART_Fanart = Nil Then TVAttr.ART_Fanart = Picture.Open( ArtFile ) // Last resort		    End If		  End If		  ArtFile = Nil		  		  		  If TVParent.Child("logo.png").Exists     Then TVAttr.ART_Logo     = Picture.Open( TVParent.Child("logo.png") )     // ## Load Logo		  If TVParent.Child("clearart.png").Exists Then TVAttr.ART_ClearArt = Picture.Open( TVParent.Child("clearart.png") ) // ## Load ClearArt		  		  ArtFile = FindImageBanner( TVParent )		  If ArtFile <> Nil And ArtFile.Exists Then TVAttr.ART_Banner = Picture.Open( ArtFile ) // ## Banner		  		  // ----		  		  // ## MPAA		  Dim sx1 as Integer = TVAttr.RatingMPAA.InStr( 0, " for " )		  Dim Rating as String		  If sx1 = 0 Then Rating = TVAttr.RatingMPAA Else Rating = Trim( TVAttr.RatingMPAA.Left( sx1 ) )		  If Rating <> "" Then TVAttr.ART_MPAARating = MPAA2Logo( Rating )		  		  // ## Studio		  Dim StudioArt as FolderItem = GetFolderItem( "Studios" )		  If StudioArt = Nil OR NOT StudioArt.Exists Then StudioArt = Preferences.fAppSupport.Child("Studios")		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NFORead(NFOParent as FolderItem)		  Dim Xml as New XmlDocument		  Dim xRoot, xNode, xItem as XmlNode		  		  If NFOParent = Nil OR NOT NFOParent.Exists Then Return		  Dim NFOFile as FolderItem = FindNFOFile( NFOParent )		  		  ClearProperties		  Xml.PreserveWhitespace = False		  		  // Is there an NFO file?		  Dim Content as String		  If NFOFile <> Nil And NFOFile.Exists Then		    Dim TextIn as TextInputStream = TextInputStream.Open( NFOFile )		    Content = Trim( TextIn.ReadAll )		    TextIn.Close		  Else		    Return		  End If		  		  Content = Trim( RemoveLinks( Content ) )		  If Content.Left(10).InStr( 0, "<?xml" ) > 0 Then		    Xml.LoadXml( Content )		  ElseIf Content.Left(5) = "http:" And Content.InStr( 0, "imdb.com" ) > 0 Then		    Dim s() as String = Content.Split("/")		    For i as Integer = 0 to s.Ubound		      If s(i).Left(2) = "tt" Then TVAttr.ID_IMDb = s(i)		    Next		    Return		  Else		    Return		  End If		  		  For i as Integer = 0 to Xml.ChildCount - 1		    If Xml.Child(i).Name = "tvshow" Then xRoot = Xml.Child(i)		  Next		  		  For i as Integer = 0 to xRoot.ChildCount - 1		    xNode = xRoot.Child(i)		    		    If xNode.FirstChild = Nil Then Continue		    		    Select Case xNode.Name		      		      // ID		    Case "id"		      If xNode.FirstChild.Value.Left(2) = "tt" Then		        TVAttr.ID_IMDb = xNode.FirstChild.Value		      Else		        TVAttr.ID_TVDB = xNode.FirstChild.Value		      End If		      		      If xNode.GetAttribute("db") = "tvdb" then		        TVAttr.ID_TVDB   = xNode.FirstChild.Value		      ElseIf xNode.GetAttribute("db") = "IMDb" then		        TVAttr.ID_IMDb   = xNode.FirstChild.Value		      ElseIf xNode.GetAttribute("db") = "tvrage" Then		        TVAttr.ID_TVRage = xNode.FirstChild.Value		      End If		      		    case "boxeeTVDB"		      TVAttr.ID_TVDB = xNode.FirstChild.Value		    case "boxeeIMDb"		      TVAttr.ID_IMDb = xNode.FirstChild.Value		    case "boxeeTVRage"		      TVAttr.ID_TVRage = xNode.FirstChild.Value		      		      // Title		    case "title"		      TVAttr.Title = xNode.FirstChild.Value		    case "sorttitle"		      TVAttr.TitleSort = xNode.FirstChild.Value		    case "originaltitle"		      TVAttr.TitleOriginal = xNode.FirstChild.Value		      		    case "tagline"		      TVAttr.DescriptionTagline = xNode.FirstChild.Value		    case "outline"		      TVAttr.DescriptionOutline = xNode.FirstChild.Value		    case "plot"		      TVAttr.DescriptionPlot    = xNode.FirstChild.Value		      		    case "status"		      TVAttr.Status = xNode.FirstChild.Value		      		      // Rating		    case "rating"		      TVAttr.Rating = Val( xNode.FirstChild.Value )		    case "votes"		      TVAttr.RatingVotes = Val( xNode.FirstChild.Value )		    case "mpaa"		      TVAttr.RatingMPAA = xNode.FirstChild.Value		      		      // Dates		    case "year"		      TVAttr.DateYear = Val( xNode.FirstChild.Value )		    case "premiered"		      TVAttr.DatePremiered = xNode.FirstChild.Value		      		      // Other		    case "genre"		      TVAttr.Genres.Append xNode.FirstChild.Value		    case "studio"		      TVAttr.Studio = xNode.FirstChild.Value		    case "status"		      TVAttr.Status = xNode.FirstChild.Value		    case "runtime"		      TVAttr.DurationRuntime = Val( xNode.FirstChild.Value )		      		      // Actors		    case "actor"		      // Actor ID		      If xNode.AttributeCount > -1 Then Actor_ID.Append xNode.GetAttribute("id") Else Actor_ID.Append ""		      		      For n as Integer = 0 to xNode.ChildCount -1		        xItem = xNode.Child(n)		        		        If xNode.ChildCount > 2 Then		          Select case xItem.Name		          Case "name"		            If xItem.FirstChild <> Nil Then TVAttr.Actor_Name.Append xItem.FirstChild.Value Else TVAttr.Actor_Name.Append ""		          case "role"		            If xItem.FirstChild <> Nil Then TVAttr.Actor_Role.Append xItem.FirstChild.Value Else TVAttr.Actor_Role.Append ""		          case "thumb"		            If xItem.FirstChild <> Nil Then TVAttr.Actor_ThumbURL.Append xItem.FirstChild.Value Else TVAttr.Actor_ThumbURL.Append ""		            		          End Select		          		          		        ElseIf xNode.ChildCount = 2 Then		          Select case xItem.Name		          Case "name"		            If xItem.FirstChild <> Nil Then TVAttr.Actor_Name.Append xItem.FirstChild.Value Else TVAttr.Actor_Name.Append ""		          case "role"		            If xItem.FirstChild <> Nil Then TVAttr.Actor_Role.Append xItem.FirstChild.Value Else TVAttr.Actor_Role.Append ""		            		          End Select		          		          TVAttr.Actor_ThumbURL.Append ""		          		        ElseIf xNode.ChildCount = 1 Then		          Select case xItem.Name		          Case "name"		            If xItem.FirstChild <> Nil Then TVAttr.Actor_Name.Append xItem.FirstChild.Value Else TVAttr.Actor_Name.Append ""		          End Select		          		          TVAttr.Actor_Role.Append ""		          TVAttr.Actor_ThumbURL.Append ""		          		        End If		        		      Next		      		    case "thumb"		      If xNode.GetAttribute("type") = "season" and xNode.GetAttribute("season") <> "-1" Then		        TVAttr.ART_SeasonURLs.Append     xNode.FirstChild.Value		        TVAttr.ART_SeasonNumbers.Append  xNode.GetAttribute("season")		      ElseIf xNode.FirstChild.Value.InStr(0, "graphical") > 0 Or xNode.FirstChild.Value.InStr(0, "text") > 0 Or xNode.FirstChild.Value.InStr(0, "blank") > 0 Then		        TVAttr.Art_BannerURLs.Append     xNode.FirstChild.Value		      ElseIf xNode.FirstChild.Value.InStr(0, "poster") > 0 And xNode.AttributeCount = 0 And xNode.FirstChild.Value.Left(4) = "http" Then		        TVAttr.ART_PosterURLs.Append     xNode.FirstChild.Value		      End If		      		    case "fanart"		      For n as Integer = 0 to xNode.ChildCount - 1		        xItem = xNode.Child(n)		        		        TVAttr.ART_FanartURLs.Append        xItem.FirstChild.Value		        TVAttr.ART_FanartThumbURLs.Append   xItem.GetAttribute("preview")		        TVAttr.ART_FanartDimensions.Append  xItem.GetAttribute("dim")		      Next		      		    End Select		    		  Next		  		Exception err as NilObjectException		  MessageBox "File not found or invalid XML item found." + chr(13) + chr(13) + "Please let the author know about this as soon as possible."		  Return		  		Exception err as OutOfBoundsException		  MessageBox "Something went wrong while reading the movie " + MovieAttr.FolderParent.Name + "'s NFO file..." + chr(13) + chr(13) + "Please let the author know about this as soon as possible."		  Return		  		Exception err as XmlException		  MessageBox "Invalid or not well-formed XML NFO file found for movie " + MovieAttr.FolderParent.Name + chr(13) + chr(13) + "You should consider removing the NFO file for said movie item before continuing."		  Return		  		Exception err as IOException		  MessageBox "IOException error Number: " + str(err.ErrorNumber) + chr(13) + chr(13) + _		  err.Message + chr(13) + _		  "Something might have gone wrong while reading: " + MovieAttr.FolderParent.Name + chr(13) + _		  "Please contact the author."		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub NFOWrite(NFOParent as FolderItem)		  Dim Xml as New XmlDocument		  Dim xRoot, xNode, xItem as XmlNode		  Xml.PreserveWhitespace = True		  		  xRoot = Xml.AppendNewChild( "tvshow" )		  		  // ## ID		  If Prefs.textStringForKey("MediaPlayer") <> "Boxee" Then		    		    If TVAttr.ID_IMDB <> "" Then		      xNode = xRoot.AppendNewChild("id")		      xNode.SetAttribute("db", "IMDb")		      xNode.SetValue( TVAttr.ID_IMDb )		    End If		    		    If TVAttr.ID_TVDB <> "" Then		      xNode = xRoot.AppendNewChild("id")		      xNode.SetAttribute("db", "TVDB")		      xNode.SetValue( TVAttr.ID_TVDB )		    End If		    		    If TVAttr.ID_TVRage <> "" Then		      xNode = xRoot.AppendNewChild("id")		      xNode.SetAttribute("db", "TVRage")		      xNode.SetValue( TVAttr.ID_TVRage )		    End If		    		  End If		  		  // ## Title		  If Trim( TVAttr.Title )         <> "" Then xRoot.AppendSimpleChild( "title",         Trim( TVAttr.Title ) )		  If Trim( TVAttr.TitleSort )     <> "" Then xRoot.AppendSimpleChild( "titlesort",     Trim( TVAttr.TitleSort ) )		  If Trim( TVAttr.TitleOriginal ) <> "" Then xRoot.AppendSimpleChild( "titleoriginal", Trim( TVAttr.TitleOriginal ) )		  		  // ## Dates		  If TVAttr.DateYear       > 0  Then xRoot.AppendSimpleChild( "year", Str( TVAttr.DateYear ) )		  If TVAttr.DatePremiered <> "" Then xRoot.AppendSimpleChild( "premiered", TVAttr.DatePremiered )		  		  // ## Rating		  If TVAttr.Rating      > 0  Then xRoot.AppendSimpleChild( "rating", Str( TVAttr.Rating ) )		  If TVAttr.RatingVotes > 0  Then xRoot.AppendSimpleChild( "votes", Str( TVAttr.RatingVotes ) )		  If TVAttr.RatingMPAA <> "" Then xRoot.AppendSimpleChild( "mpaa", TVAttr.RatingMPAA )		  		  // ## Description		  If Trim( TVAttr.DescriptionTagline ) <> "" Then xRoot.AppendSimpleChild( "tagline", Trim( TVAttr.DescriptionTagline ) )		  If Trim( TVAttr.DescriptionOutline ) <> "" Then xRoot.AppendSimpleChild( "outline", Trim( TVAttr.DescriptionOutline ) )		  If Trim( TVAttr.DescriptionPlot    ) <> "" Then xRoot.AppendSimpleChild( "plot",    Trim( TVAttr.DescriptionPlot    ) )		  		  // ## Other		  		  // Status		  If Trim( TVAttr.Status ) <> "" Then xRoot.AppendSimpleChild( "status", Trim( TVAttr.Status ) )		  		  // Runtime		  If TVAttr.DurationRuntime > 0 Then xRoot.AppendSimpleChild( "runtime", Str( TVAttr.DurationRuntime ) )		  		  // Studio		  If Trim( TVAttr.Studio ) <> "" Then xRoot.AppendSimpleChild( "studio", Trim( TVAttr.Studio ) )		  		  // Genres		  For i as Integer = 0 to TVAttr.Genres.Ubound		    If Prefs.textStringForKey( "MediaPlayer" ) = "Boxee" Then		      If Trim( TVAttr.Genres(i) ) <> "" Then xRoot.AppendSimpleChild( "genre", Trim( TVAttr.Genres(i).Uppercase ) )		    Else		      If Trim( TVAttr.Genres(i) ) <> "" Then xRoot.AppendSimpleChild( "genre", Trim( TVAttr.Genres(i) ) )		    End If		  Next		  		  // Episode Guide		  If TVAttr.ID_TVDB <> "" Then		    xNode = xRoot.AppendNewChild( "episodeguide" )		    		    xItem = xNode.AppendNewChild( "url" )		    xItem.SetAttribute( "cache", TVAttr.ID_TVDB + ".xml" )		    xItem.SetValue( "http://thetvdb.com/api/" + "47B3269189813ECF" + "/series/" + TVAttr.ID_TVDB + "/all/" + Prefs.textStringForKey("DBLanguage").NthField("-",1).Lowercase + ".zip" )		  End If		  		  // ## Credits		  If Trim( TVAttr.CreditDirector ) <> "" Then xRoot.AppendSimpleChild( "director", Trim( TVAttr.CreditDirector ) )		  If Trim( TVAttr.CreditWriter   ) <> "" Then xRoot.AppendSimpleChild( "credits",  Trim( TVAttr.CreditWriter   ) )		  If Trim( TVAttr.CreditMusic    ) <> "" Then xRoot.AppendSimpleChild( "sound",    Trim( TVAttr.CreditMusic    ) )		  		  // ## Actors		  For i as Integer = 0 To Actor_Name.Ubound		    xNode = xRoot.AppendNewChild( "actor" )		    xNode.SetAttribute( "id", TVAttr.Actor_ID(i) )		    		    xNode.AppendSimpleChild( "name",  TVAttr.Actor_Name(i) )		    xNode.AppendSimpleChild( "role",  TVAttr.Actor_Role(i) )		    xNode.AppendSimpleChild( "thumb", TVAttr.Actor_ThumbURL(i) )		  Next		  		  // ## Thumbs		  		  // Default Thumb		  Dim DefaultThumb as FolderItem		  If Prefs.textStringForKey("DefaultThumbTV") = Loc.kPoster Then		    DefaultThumb = FindImagePoster( NFOParent )		  ElseIf Prefs.textStringForKey("DefaultThumbTV") = Loc.kBanner Then		    DefaultThumb = FindImageBanner( NFOParent )		  End If		  		  If DefaultThumb <> Nil And DefaultThumb.Exists Then		    If Prefs.textStringForKey("MediaPlayer") = "Boxee" Then		      xRoot.AppendSimpleChild( "thumb", DefaultThumb.ShellPath.ReplaceAll("\","") )		    Else		      xRoot.AppendSimpleChild( "thumb", DefaultThumb.Name )		    End If		  End If		  		  // Posters		  For i as Integer = 0 to TVAttr.ART_PosterURLs.Ubound		    If Trim( TVAttr.ART_PosterURLs(i) ) <> "" Then xRoot.AppendSimpleChild( "thumb", Trim( TVAttr.ART_PosterURLs(i) ))		  Next		  		  // Banners		  For i as Integer = 0 to TVAttr.ART_BannerURLs.Ubound		    If Trim( TVAttr.ART_BannerURLs(i) ) <> "" Then xRoot.AppendSimpleChild( "thumb", Trim( TVAttr.ART_BannerURLs(i) ))		  Next		  		  // Season -1 Posters		  For i as Integer = 0 to TVAttr.ART_PosterURLs.Ubound		    If Trim( TVAttr.ART_PosterURLs(i) ) <> "" Then		      xNode = xRoot.AppendNewChild( "thumb" )		      xNode.SetValue( Trim( TVAttr.ART_PosterURLs(i) ) )		      		      xNode.SetAttribute( "type", "season" )		      xNode.SetAttribute( "season", "-1"   )		    End If		  Next		  		  // Season Art		  For i as Integer = 0 to TVAttr.ART_SeasonURLs.Ubound		    If Trim( TVAttr.ART_SeasonURLs(i) ) = "" Then Continue		    		    xNode = xRoot.AppendNewChild( "thumb" )		    xNode.SetValue( TVAttr.ART_SeasonURLs(i) )		    		    xNode.SetAttribute( "type", "season" )		    xNode.SetAttribute( "season", TVAttr.ART_SeasonNumbers(i) )		  Next		  		  		  // ## Fanart		  If TVAttr.ART_FanartURLs.Ubound > -1 Then		    xNode = xRoot.AppendNewChild( "fanart" )		    xNode.SetAttribute( "url", "http://thetvdb.com/banners/" )		    		    For i as Integer = 0 to TVAttr.ART_FanartURLs.Ubound		      If Trim( TVAttr.ART_FanartURLs(i) ) = "" Then Continue		      		      xItem = xNode.AppendNewChild( "thumb" )		      xItem.SetValue TVAttr.ART_FanartURLs(i)		      		      xItem.SetAttribute( "dim", TVAttr.ART_FanartDimensions(i) )		      xItem.SetAttribute( "preview", TVAttr.ART_FanartThumbURLs(i) )		    Next		  End If		  		  		  // ## Save XML		  xRoot.Indent(0)		  Xml.SaveXml( NFOParent.Child( Prefs.textStringForKey("FileNameNFOTV").ReplaceAll("<show>", TVAttr.Title ) ) )		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected Actor_ID() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Actor_Name() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Actor_Role() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Actor_ThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Banner As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_BannerURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_CharacterArt As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_ClearArt As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Fanart As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartDimensions() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartThumbURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Logo As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_MPAARating As PIcture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Poster As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_PosterURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_SeasonNumbers() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_SeasonURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Studio As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_TVThumb As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditDirector As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditMusic As String	#tag EndProperty	#tag Property, Flags = &h1		Protected CreditWriter As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DatePremiered As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DateYear As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected DescriptionOutline As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DescriptionPlot As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DescriptionTagline As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DurationRuntime As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected FolderParent As Folderitem	#tag EndProperty	#tag Property, Flags = &h1		Protected Genres() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_IMDb As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_TVDB As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_TVRage As String	#tag EndProperty	#tag Property, Flags = &h1		Protected NextAired_Date As String	#tag EndProperty	#tag Property, Flags = &h1		Protected NextAired_Episode As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Rating As Double	#tag EndProperty	#tag Property, Flags = &h1		Protected RatingMPAA As String	#tag EndProperty	#tag Property, Flags = &h1		Protected RatingVotes As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected Status As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Studio As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Title As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TitleOriginal As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TitleSort As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule