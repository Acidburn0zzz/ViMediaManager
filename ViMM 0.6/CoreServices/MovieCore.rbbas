#tag ModuleProtected Module MovieCore	#tag Method, Flags = &h1		Protected Sub MissingMovies()		  'Dim UnFoundTitles() as String		  Dim sckt as New MovieSckt		  sckt.Yield = True		  CommonCore.MassSearch = True		  ReDim CommonCore.UnFoundTitles(-1)		  ReDim CommonCore.UnfoundPaths(-1)		  		  Dim LstBox as Listbox = wndMain.lstMovies		  		  For i as Integer = 0 To LstBox.ListCount - 1		    		    // If item has been scraped before (DB ID is available), continue to the next list item.		    If LstBox.Cell(i, 2) <> "" Then Continue		    		    // If Movie parent doesn't exist, continue to the next item.		    MovieAttr.FolderParent = GetFolderItem( LstBox.Cell(i, 1) )		    If MovieAttr.FolderParent = Nil OR NOT MovieAttr.FolderParent.Exists Then Continue		    		    // If the movie doesn't have a name, continue to the next item.		    Dim MovieName as String = FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		    If MovieName = "" Then Continue		    		    // Get JSON		    dlgProgress.Add( Loc.kSearching + ":", MovieName + "..." )		    Dim JSONString as String = sckt.Get( sckt.URL( "SearchMovie", MovieName, Prefs.textStringForKey("DBLanguage") ), Prefs.integerForKey("TimeOut") )		    sckt.Close		    		    		    		    // Load Valid JSON		    If NOT JSONString.ValidJSON( "TMDb" ) Then		      If NOT Growl.Notify( Loc.FetchAllMetadata + ":", Loc.kCouldNotBeFound.ReplaceAll( "%s", MovieName ) ) Then		        // Growling!		      End If		      CommonCore.UnFoundTitles.Append MovieName + chr(13) + "Invalid JSON returned from Server."' + chr(13) + MovieAttr.FolderParent.ShellPath.ReplaceAll("\","") + JSONString		      CommonCore.UnfoundPaths.Append MovieAttr.FolderParent		      Continue		    End If		    		    Dim ID as String		    Dim SearchResult as new JSONItem		    SearchResult.Load JSONString		    		    // Get ID if available.		    		    If SearchResult.Child("results").Count <= 0 Then		      Dim IMDbResult as New JSONItem		      IMDbResult = GetIMDbJSON( MovieName )		      'JSONString = ""		      'JSONString = IMDBjson( MovieName )		      		      		      If NOT IMDbResult.HasName("TITLE") Then 'JSONString.ValidJSON("IMDb") Then		        If NOT Growl.Notify( Loc.FetchAllMetadata + ":", Loc.kCouldNotBeFound.ReplaceAll( "%s", MovieName ) ) Then		          // Growling!		        End If		        CommonCore.UnFoundTitles.Append MovieName + chr(13) + "No results found, try a different name."' + chr(13) + MovieAttr.FolderParent.ShellPath.ReplaceAll("\","")		        CommonCore.UnfoundPaths.Append MovieAttr.FolderParent		        Continue		      End If		      		      SearchResult = IMDbResult		      'SearchResult.Load JSONString		      		      ID = SearchResult.Value("TITLE_ID")		      MovieName = SearchResult.Value("TITLE")		      		      MovieByID ID		      		      If Prefs.boolForKey("AutoManageMedia") Then		        SingleRenamer MovieAttr.FolderParent, i, True		      Else		        wndMain.lstMovies.UpdateRow i		      End If		      		      'If LstBox.ListIndex = i Then		      'MovieAttr.LoadImages( MovieAttr.FolderParent )		      'wndMain.cvsMovieDetails.Reload		      'End If		      		      Continue		    End If		    		    SearchResult = SearchResult.Child("results").Child(0)		    		    ID = SearchResult.Value("id")		    MovieName = SearchResult.Value("original_title")		    		    // Download Movie INFO & images.		    MovieByID ID		    		    If Prefs.boolForKey("AutoManageMedia") Then		      SingleRenamer MovieAttr.FolderParent, i, True		    Else		      wndMain.lstMovies.UpdateRow i		    End If		    		    'If LstBox.ListIndex = i Then		    'MovieAttr.LoadImages( MovieAttr.FolderParent )		    'wndMain.cvsMovieDetails.Reload		    'End If		    		  Next		  		  CommonCore.MassSearch = False		  wndMain.lstMovies.SortList		  		  MessageBox Loc.kDownloadComplete		  		  		  		  CommonCore.ShowUnfoundTitles( Loc.kCouldNotBeFoundFollowing.ReplaceAll( "%S", Loc.Movies.Lowercase ) )		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieArt(ID as String, Mode as String)		  Dim JSON as New JSONItem		  Dim JSONString as String		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  Dim Size as String = ""		  		  If ID = "" THen		    'MsgBox msgNoIDMovie		    MessageBox msgNoIDMovie		    Return		  End If		  		  dlgProgress.Reset		  		  If Mode.InStr(0, "TMDB") > 0 Then		    JSONString = sckt.Get( sckt.URL("MovieImages", ID), Prefs.integerForKey("TimeOut") )		    		  ElseIf Mode.InStr(0, "FanartTV") > 0 Then		    JSONString = sckt.Get( URLCore.FanartTV( ID ), Prefs.integerForKey("TimeOut") )		    Dim n as integer = JSONString.InStr( 2, "{" )		    JSONString = JSONString.Right( JSONString.Len - n + 1 )		    JSONString = JSONString.Left( JSONString.Len - 1 )		    		    If Mode.InStr( 0, "movieart"  )   > 0 Then Size =  "500x281"		    If Mode.InStr( 0, "hdmovieart" )  > 0 Then Size = "1000x562"		    		    If Mode.InStr( 0, "movielogo" )   > 0 Then Size =  "400x155"		    If Mode.InStr( 0, "hdmovielogo" ) > 0 Then Size =  "800x310"		    		    If Mode.InStr( 0, "moviedisc" )   > 0 Then Size = "1000x1000"		    If Mode.InStr( 0, "moviebanner" ) > 0 Then Size = "1000x185"		    If Mode.InStr( 0, "moviethumb" )  > 0 Then Size = "1000x562"		    		    If Mode.InStr( 0, "moviebackground") > 0 Then Size = "1920x1080"		    		  End If		  		  // Nicer formatting to display to users.		  Dim NiceMode as String = Mode.NthField( "-", 2 )		  Select Case NiceMode		    		  Case "moviebanner"		    NiceMode = Loc.kBanner		  Case "moviethumb"		    NiceMode = Loc.kThumb		    		  Case "movieart"		    NiceMode = Loc.kClearArt		  Case "moviedisc"		    NiceMode = Loc.kDiscArt		  Case "movielogo"		    NiceMode = Loc.kLogo		    		  Case "Poster"		    NiceMode = Loc.kPoster		  Case "Backdrops"		    NiceMode = Loc.kFanart		    		  End Select		  		  		  If JSONString.ValidJSON( Mode.NthField("-", 1) ) Then		    JSON.Load( JSONString )		  Else		    MessageBox kNoImagesFound.ReplaceAll( "%s", NiceMode.Lowercase )		    Return		  End If		  		  Dim IMGArray() as Picture		  Dim URLs(), Dimensions() as String		  		  Dim jItems as New JSONItem		  If JSON.HasName( Mode.NthField( "-", 2 ).Lowercase ) And JSON.Child( Mode.NthField( "-", 2).Lowercase ).Count > 0 Then		    jItems = JSON.Child( Mode.NthField("-", 2 ).Lowercase )		  Else		    MessageBox kNoImagesFound.ReplaceAll( "%s", NiceMode.Lowercase )		    Return		  End If		  		  Dim jItemsExtra as New JSONItem		  Dim SizeExtra as String		  If Mode.NthField("-", 2).Lowercase = "movieart" And JSON.HasName( "hdmovieart" ) Then		    jItemsExtra = JSON.Child( "hdmovieart" )		    SizeExtra = "1000x562"		  ElseIf Mode.NthField("-", 2).Lowercase = "movielogo" And JSON.HasName( "hdmovielogo" ) Then		    jItemsExtra = JSON.Child( "hdmovielogo" )		    SizeExtra = "800x310"		  End If		  		  // ---- TMDB		  If Mode.InStr(0, "TMDB" ) > 0 Then		    Dim pDest, fDest as FolderItem		    pDest = MovieAttr.DestinationPoster( MovieAttr.FolderParent )		    fDest = MovieAttr.DestinationFanart( MovieAttr.FolderParent )		    		    // AutoDownload 1st and only image if no local images are available yet.		    If jItems.Count = 1 And jItems.Child(0).Value("file_path") <> "" And ( _		      ( Mode.NthField("-", 2) = "posters" And pDest <> Nil And NOT pDest.Exists ) Or _		      ( Mode.NthField("-", 2) = "backdrops" And fDest <> Nil And NOT fDest.Exists ) ) Then		      If Mode.NthField("-", 2) = "posters"   Then		        MovieAttr.ART_Poster = URL2Picture( sckt.URLbase_image + SizePoster + jItems.Child(0).Value("file_path"), pDest.NameWithoutExtension, pDest.NameExtension, MovieAttr.FolderParent )		        CacheImageSet( MovieAttr.ART_Poster, MovieAttr.ID_IMDB + ".movie.poster.jpg" )		      End If		      		      If Mode.NthField("-", 2) = "backdrops" Then		        MovieAttr.ART_Fanart = URL2Picture( sckt.URLbase_image + SizeFanart + jItems.Child(0).Value("file_path"), fDest.NameWithoutExtension, fDest.NameExtension, MovieAttr.FolderParent )		        CacheImageSet( MovieAttr.ART_Fanart, MovieAttr.ID_IMDB + ".movie.fanart.jpg")		      End If		      		      wndMain.lstMovies.UpdateRow		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Reload		      MessageBox Loc.kDownloadComplete		      Return		    End If		    		    // If there's more then one image, get them all and preview them in the thumbpreviewer.		    For i as Integer = 0 to jItems.Count - 1		      		      If jItems.Child(i).Value("file_path") <> "" Then		        Dim s as String		        If Mode.InStr(0, "posters")   > 0 Then		          s = Loc.kPoster		          URLs.Append sckt.URLbase_image + SizePoster + jItems.Child(i).Value("file_path")		        End If		        If Mode.InStr(0, "backdrops") > 0 Then		          s = Loc.kFanart		          URLs.Append sckt.URLbase_image + SizeFanart + jItems.Child(i).Value("file_path")		        End If		        		        dlgProgress.Add( Loc.kDownloading + ":", str(i+1) + Loc.k1of2 + Str( jItems.Count ) + " " + s + " " + Loc.kThumb.Lowercase + " " + Loc.kImages.Lowercase + "...", 1, jItems.Count )		        		        If Mode.InStr(0, "posters")   > 0 Then IMGArray.Append URL2Picture( sckt.URLbase_image + "w342" + jItems.Child(i).Value("file_path"), "PosterThumb" + Str(i) )		        If Mode.InStr(0, "backdrops") > 0 Then IMGArray.Append URL2Picture( sckt.URLbase_image + "w300" + jItems.Child(i).Value("file_path"), "FanartThumb" + Str(i) )		        		        Dimensions.Append jItems.Child(i).Value("width") + "x" + jItems.Child(i).Value("height")		        		      Else		        Continue		      End If		      		    Next		    		    		    // ---- FanartTV		  ElseIf Mode.InStr(0, "FanartTV") > 0 Then		    		    Dim s as String		    Dim f as FolderItem		    		    Select Case Mode.NthField("-",2)		    case "movieart"		      s = Loc.kClearArt		      f = MovieAttr.FolderParent.Child("clearart.png")		    case "movielogo"		      s = Loc.kLogo		      f = MovieAttr.FolderParent.Child("logo.png")		    case "moviedisc"		      s = Loc.kDiscArt		      f = MovieAttr.FolderParent.Child("disc.png")		    case "moviebanner"		      s = Loc.kBanner		      f = FindImageBanner( MovieAttr.FolderParent )		    End Select		    		    Dim Count as Integer = jItems.Count		    If jItemsExtra.Count > -1 Then		      Count = jItems.Count + jItemsExtra.Count		    End If		    		    // AutoDownload 1st and only image if no local images are available yet.		    If jItems.Count = 1 And jItems.Child(0).Value("url") <> "" _		      And f <> Nil And NOT f.Exists Then		      Dim Pic as Picture = URL2Picture( jItems.Child(0).Value("url"), f.NameWithoutExtension, f.NameExtension, MovieAttr.FolderParent )		      		      wndMain.lstMovies.UpdateRow		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Reload		      MessageBox Loc.kDownloadComplete		      Return		    End If		    		    // If there's more then one image, get them all and preview them in the thumbpreviewer.		    For i as Integer = 0 to jItems.Count - 1		      		      If jItems.Child(i).Value("url") <> "" Then		        		        dlgProgress.Add( Loc.kDownloading + ":", Str(i+1) + Loc.k1of2 + Str( Count ) + " " + s + " " + Loc.kThumb + " " + Loc.kImages.Lowercase + "...", 1, Count )		        		        IMGArray.Append URL2Picture( jItems.Child(i).Value("url"), "Thumb" + Str(i), "png" )		        URLs.Append jItems.Child(i).Value("url")		        Dimensions.Append Size		      Else		        Continue		      End If		      		    Next		    		    For i as Integer = 0 to jItemsExtra.Count - 1		      If jItemsExtra.Child(i).Value("url") <> "" Then		        dlgProgress.Add( Loc.kDownloading + ":", Str( jItems.Count + i + 1 ) + Loc.k1of2 + Str( Count ) + " " + s + " " + Loc.kThumb + " " + Loc.kImages.Lowercase + "...", 1, Count )		        		        IMGArray.Append URL2Picture( jItemsExtra.Child(i).Value("url"), "Thumb" + Str( jItems.Count + i ), "png" )		        Urls.Append jItemsExtra.Child(i).Value("url")		        Dimensions.Append SizeExtra		      End If		    Next		    		  End If		  		  wndPreviewThumbs.Init IMGArray, Dimensions, URLs, Mode		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieByID(ID as String, Update as Boolean = False)		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  If ID = "" Then		    'MsgBox msgNoIDMovie		    MessageBox msgNoIDMovie		    Return		  End If		  		  Dim MovieParent as FolderItem = MovieAttr.FolderParent		  Dim MovieName as String = FindMovieName( MovieParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kSearching + ":", MovieName, 1, 5 ) // 1		  		  // Get Movie data & images		  sckt.GetMovieNFO ID, Update		  		  // Update Display		  If NOT CommonCore.MassSearch Then		    wndMain.lstMovies.UpdateRow		    MovieAttr.NFORead( MovieAttr.FolderParent )		    MovieAttr.LoadImages( MovieAttr.FolderParent )		    wndMain.cvsMovieDetails.Reload		    		    wndMain.lstMovies.SortList		  End If		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieExtraArts(ID as String, Mode as String)		  Dim JSON as New JSONItem		  Dim JSONString, Size, NiceMode, FileName as String		  Dim Destination as FolderItem = MovieAttr.FolderParent.Child("extrathumbs")		  If Mode = "Backdrops" Then Destination = MovieAttr.FolderParent.Child("extrafanart")		  		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  If ID = "" Then		    MsgBox msgNoIDMovie		    Return		  End If		  		  If Destination <> Nil And Destination.Exists Then		    Dim s as Integer = MsgDlg( Nil, 1, msgPriorMovieArtFound.ReplaceAll("<movie>", MovieAttr.Title), msgPriorArtDeletion, Loc.dlgReplace, Loc.kDownload, Loc.dlgCancel )		    If s = 3 Then Return		    If s = 1 Then		      Destination.MoveFileToTrash		      Destination.CreateAsFolder		    End If		    		  Else		    Destination.CreateAsFolder		  End If		  		  JSONString = sckt.Get( sckt.URL( "MovieImages", ID ), Prefs.integerForKey("TimeOut") )		  sckt.Close		  		  If JSONString.ValidJSON Then JSON.Load JSONString		  		  If Mode = "Thumbs" Then		    Size = "w300"		    NiceMode = Loc.kThumb		    FileName = "thumb"		  ElseIf Mode = "Backdrops" Then		    Size = SizeFanart		    NiceMode = Loc.kFanart		    FileName = "fanart"		  End If		  		  dlgProgress.Reset		  		  For i as Integer = 0 to JSON.Child("backdrops").Count - 1		    Dim jItem as New JSONItem		    jItem = JSON.Child("backdrops").Child(i)		    		    If jItem.Value("file_path") <> "" Then		      dlgProgress.Add( Loc.kDownloading + ":", Str(i + 1) + Loc.k1of2 + Str( JSON.Child("backdrops").Count ) + " " + NiceMode + " " + Loc.kImages.Lowercase + "...", 1, JSON.Child("backdrops").Count )		      Dim Pic as Picture = URL2Picture( sckt.URLbase_image + Size + jItem.Value("file_path"), FileName + Str(i+1), "jpg", Destination )		    End If		  Next		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieSearch(MovieName as String, ManualSearch as Boolean = False)		  Dim JSONString as String		  Dim Sckt as New MovieSckt		  'Sckt.Yield = True		  		  dlgProgress.Add( Loc.kSearching + ":", MovieName )		  Dim Year as String = MovieName.Right(7)		  'If Year.InStr(0,"(") > 0 And Year.InStr(0,")") > 0 Then		  'Year = Trim( Year.ReplaceAll("(","").ReplaceAll(")","") )		  'MovieName = MovieName.Left( MovieName.Len - 7 )		  'ElseIf Year.InStr(0,"[") > 0 And Year.InStr(0,"]") > 0 Then		  'Year = Trim( Year.ReplaceAll("[","").ReplaceAll("]","") )		  'MovieName = MovieName.Left( MovieName.Len - 7 )		  'ElseIf Year.InStr(0,"{") > 0 And Year.InStr(0,"}") > 0 Then		  'Year = Trim( Year.ReplaceAll("{","").ReplaceAll("}","") )		  'MovieName = MovieName.Left( MovieName.Len - 7 )		  'Else		  'Year = ""		  'End If		  Year = ""		  		  JSONString = DefineEncoding( Sckt.Get( Sckt.URL( "SearchMovie", Trim( MovieName.ReplaceAll(" - "," ") ), Prefs.textStringForKey("DBLanguage"), 1, Year ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		  'Sckt.Close		  'If Year <> "" Then MovieName = MovieName + " (" + Year + ")"		  		  If NOT JSONString.ValidJSON("TMDB Search") Then Return		  		  Dim JSON as New JSONItem		  JSON.Load JSONString.ConvertEncoding( Encodings.UTF8 )		  		  Dim TotalPages   as Integer = JSON.Value("total_pages")		  Dim TotalResults as Integer = JSON.Value("total_results")		  		  'MessageBox "Help Me!"		  		  // Process Result(s)		  If TotalResults <= 0 Or TotalResults > 99 Then		    'Dim JsonIMDB as String = IMDBjson( MovieName )		    Dim IMDbItem as New JSONItem		    IMDbItem = GetIMDbJSON( MovieName, True )		    'If JsonIMDB.ValidJSON("IMDb") Then IMDbItem.Load JsonIMDB		    If IMDbItem.HasName("TITLE_ID") Then		      TotalResults = 1		      		      If ManualSearch Then		        		        Dim FanartURL as String		        If IMDbItem.HasName("MEDIA_IMAGES") And IMDbItem.Child("MEDIA_IMAGES").Count > 0 Then FanartURL = IMDbItem.Child("MEDIA_IMAGES").Value(0)		        		        CommonCore.ShowSearchResult( IMDbItem.Value("TITLE_ID"), "", IMDbItem.Value("TITLE"), IMDbItem.Value("RELEASE_DATE"), IMDbItem.Value("POSTER"), FanartURL, "" )		        		        dlgProgress.Close		        Return		        		      Else		        MovieByID IMDbItem.Value("TITLE_ID")		      End If		      		      Return		    End If		  End If		  		  		  Dim ID(), Title(), ReleaseDate(), PosterURL(), FanartURL() as String		  		  // No Results		  If TotalResults = 0 Then		    'MsgBox kNoMoviesFoundTryAgain		    MessageBox kNoMoviesFoundTryAgain		    wndSearch.Show		    If NOT ManualSearch Then wndSearch.ccSearchBox.edtSearch.Text = FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		    dlgProgress.Close		    Return		    		    // 1 Result NOT Manual Search		  ElseIf NOT ManualSearch And JSON.Child("results").Count = 1 Then 'TotalResults = 1 Then		    MovieCore.MovieByID( JSON.Child("results").Child(0).Value("id") )		    Return		  End If		  		  For i as Integer = 1 to TotalPages		    		    // Multi-Page results.		    If i > 1 Then		      JSONString = DefineEncoding( Sckt.Get( Sckt.URL( "SearchMovie", MovieName, Prefs.textStringForKey("DBLanguage"), i, Year ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		      Sckt.Close		      If NOT JSONString.ValidJSON( "TMDB Page Search" ) Then		        Return		      End If		      JSON.Load JSONString.ConvertEncoding( Encodings.UTF8 )		    End If		    		    For n as Integer = 0 to JSON.Child("results").Count - 1		      Dim Jitem as JSONItem = JSON.Child("results").Child(n)		      dlgProgress.Add( Loc.kSearchResults + ":", Jitem.Value("title"), 1, TotalResults )		      		      ID.Append            Jitem.Value("id")		      Title.Append         Jitem.Value("title")		      ReleaseDate.Append   Jitem.Value("release_date")		      		      Dim pSize as String		      Dim bSize as String		      If App.ScalingFactor = 2 Then pSize = "w342" Else pSize   = "w185"		      If App.ScalingFactor = 2 Then bSize = "w780" Else bSize = "w300"		      		      If Jitem.Value("poster_path") <> "" Then		        PosterURL.Append Sckt.URLbase_image + pSize + Jitem.Value("poster_path")		      Else		        PosterURL.Append ""		      End If		      		      If Jitem.Value("backdrop_path") <> "" Then		        FanartURL.Append Sckt.URLbase_image + bSize + Jitem.Value("backdrop_path")		      Else		        FanartURL.Append ""		      End If		      		    Next		    		    JSONString = ""		  Next		  		  ShowSearchResults( ID, ID, Title, ReleaseDate, PosterURL, FanartURL )		  		  dlgProgress.Close		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieUpdate(ID as String)		  Dim LstBox as Listbox = wndMain.lstMovies		  CommonCore.MassSearch = False		  		  If ID = "" Then		    'MsgBox msgNoIDMovie		    MessageBox msgNoIDMovie		    Return		  End If		  		  dlgProgress.Add( Loc.kDownloading + ":", FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") ) )		  MovieByID ID, True		  		  MovieAttr.LoadImages( MovieAttr.FolderParent )		  wndMain.cvsMovieDetails.Reload		  		  wndMain.lstMovies.UpdateRow( LstBox.ListIndex )		  wndMain.lstMovies.Sort		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieUpdateAll()		  Dim LstBox as Listbox = wndMain.lstMovies		  CommonCore.MassSearch = True		  ReDim CommonCore.UnFoundTitles(-1)		  ReDim CommonCore.UnfoundPaths(-1)		  		  For i as Integer = 0 to LstBox.ListCount - 1		    		    Dim ID as String = LstBox.Cell(i, 2)		    If ID= "" Then Continue		    		    MovieAttr.FolderParent = GetFolderItem( LstBox.Cell(i, 1 ) )		    If MovieAttr.FolderParent = Nil or NOT MovieAttr.FolderParent.Exists Then Continue		    		    MovieAttr.ClearProperties // Remove previous properties		    MovieAttr.NFORead( MovieAttr.FolderParent ) // Load properties from current item.		    		    dlgProgress.Add( Loc.kDownloading + ":", FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") ) )		    MovieByID ID, True		    		    		    If Prefs.boolForKey("AutoManageMedia") Then		      SingleRenamer MovieAttr.FolderParent, i, True		    Else		      wndMain.lstMovies.UpdateRow i		    End If		    		    If i = LstBox.ListIndex Then		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Reload		    End If		    		  Next		  		  wndMain.lstMovies.Sort		  		  CommonCore.ShowUnfoundTitles( Loc.kCouldNotBeFoundFollowing.ReplaceAll( "%S", Loc.Movies.Lowercase ) )		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieUpdateRating(CurrentRow as Integer = - 1)		  		  Dim MovieName as String = CommonCore.CurrentItemName		  Dim JSONString as String		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  If MovieAttr.ID_IMDB = "" Then		    MsgBox msgNoID		    Return		  End If		  		  // ## TMDB		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", MovieName + " TMDB " + Loc.mRating.ReplaceAll(":", "...") )		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieInfo", MovieAttr.ID_IMDB, Prefs.textStringForKey("DBLanguage") ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		  sckt.Close		  JSONString = DecodingFromHTMLMBS( JSONString )		  		  Dim TMDB as New JSONItem		  If JSONString.ValidJSON("TMDB") Then TMDB.Load JSONString		  JSONString = ""		  		  // ## TMDB Releases		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieReleases", MovieAttr.ID_IMDB, Prefs.textStringForKey("DBLanguage") ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		  sckt.Close		  JSONString = DecodingFromHTMLMBS( JSONString )		  		  Dim TMDBReleases as New JSONItem		  If JSONString.ValidJSON("TMDB Releases") Then TMDBReleases.Load( JSONString )		  		  // ## IMDB		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", MovieName + " IMDb " + Loc.mRating.ReplaceAll(":", "...") )		  Dim IMDB as New JSONItem		  IMDb = GetIMDbJSON( MovieAttr.ID_IMDB )		  'JSONString = DefineEncoding( IMDBjson( MovieAttr.ID_IMDB, True ), Encodings.UTF8 )		  'sckt.Close		  '		  'Dim IMDB as New JSONItem		  'If JSONString.ValidJSON("IMDb") Then IMDB.Load ConvertEncoding( JSONString, Encodings.UTF8 ) Else Return		  'JSONString = ""		  		  // ## Rotten Tomatoes		  If NOT CommonCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", MovieName + " RottenTomatoes " + Loc.mRating.ReplaceAll(":", "...") )		  JSONString = Trim( DefineEncoding( sckt.Get( sckt.URL( "TomatoesMovieAlias", MovieAttr.ID_IMDB.ReplaceAll("tt","") ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 ) )		  sckt.Close		  		  Dim Tomato as New JSONItem		  If JSONString.ValidJSON("RottenTomatoes") Then Tomato.Load( ConvertEncoding( JSONString, Encodings.UTF8 ) )		  JSONString = ""		  		  		  // Set TMDB Data		  If TMDB.HasName("vote_average") And TMDB.Value("vote_average") <> "" Then MovieAttr.Rating      = Round( Val( TMDB.Value("vote_average") ) * 10 ) / 10		  If TMDB.HasName("vote_count")   And TMDB.Value("vote_count")   <> "" Then MovieAttr.RatingVotes = Val( TMDB.Value("vote_count") )		  		  // Set IMDB Data		  If IMDB.HasName("RATING")  And IMDB.Value("RATING")  <> "" Then MovieAttr.Rating       = Val( IMDB.Value("RATING") )		  If IMDB.HasName("VOTES")   And IMDB.Value("VOTES")   <> "" Then MovieAttr.RatingVotes  = Val( Str( IMDB.Value("VOTES") ).ReplaceAll(",","") )		  If IMDB.HasName("TOP_250") And IMDB.Value("TOP_250") <> "" Then MovieAttr.RatingTop250 = Val( IMDB.Value("TOP_250") )		  		  // Get MPAA Data		  Dim MPAA as String		  If IMDB.HasName("MPAA_RATING") And IMDB.Value("MPAA_RATING") <> "" Then MPAA = IMDB.Value("MPAA_RATING")		  MovieAttr.RatingMPAA = MPAA		  		  Dim sx1 as Integer = MPAA.InStr(0," for ")		  Dim MPAAExplanation as String = Trim( MPAA.ReplaceAll( MPAA.Left(sx1 - 1), "" ) )		  MPAA = Trim( MPAA.Left( sx1 ) )		  		  		  // ## TMDB Releases MPAA		  If TMDBReleases.HasName("countries") And TMDBReleases.Child("countries").Count > 0 Then		    MovieAttr.RatingMPAA = ""		    MovieAttr.DatePremiered = ""		    ReDim MovieAttr.RatingCertification(-1)		    		    Dim Country(), Rating() as String		    		    For i as Integer = 0 to TMDBReleases.Child("countries").Count - 1		      Dim jItem as New JSONItem		      jItem = TMDBReleases.Child("countries").Child(i)		      		      Country.Append jItem.Value("iso_3166_1")		      Rating.Append  jItem.Value("certification")		      		      If jItem.Value("iso_3166_1") = "US" Then		        If jItem.Value("release_date")  <> "" And MovieAttr.DatePremiered = "" Then MovieAttr.DatePremiered = jItem.Value("release_date")		        If jItem.Value("certification") <> "" And MovieAttr.RatingMPAA = ""    Then MovieAttr.RatingMPAA = MPAAFromCountry( jItem.Value("certification"), "US" )		      End If		      		      If jItem.Value("iso_3166_1") = Prefs.textStringForKey("DBLanguage") THen		        If jItem.Value("release_date")  <> "" Then		          MovieAttr.DatePremiered = jItem.Value("release_date")		          If Val( Str( jItem.Value("release_date") ).left(4) ) > 1000 Then MovieAttr.DateYear      = Val( Str( jItem.Value("release_date") ).Left(4) )		        End If		        If jItem.Value("certification") <> "" Then MovieAttr.RatingMPAA    = MPAAFromCountry( jItem.Value("certification"), Prefs.textStringForKey("DBLanguage") )		      End If		    Next		    		    For i as Integer = 0 to Country.Ubound		      If Country(i) <> "" And Rating(i) <> "" Then MovieAttr.RatingCertification.Append FlagCountry( Country(i) ) + ":" + Rating(i)		    Next		    		    If MovieAttr.RatingMPAA = ""  And MPAA <> "" Then MovieAttr.RatingMPAA = MPAA		    If MovieAttr.RatingMPAA <> "" And MPAAExplanation <> "" Then MovieAttr.RatingMPAA = MovieAttr.RatingMPAA + " " + MPAAExplanation		  End If		  		  		  // ## RottenTomatoes		  If Tomato.HasName("critics_consensus") And Tomato.Value("critics_consensus") <> "" Then MovieAttr.TomatoConcensus = Tomato.Value("critics_consensus")		  If Tomato.HasName("ratings") Then		    Dim jItem as New JSONItem		    jItem = Tomato.Child("ratings")		    		    If jItem.HasName("critics_rating") And jItem.Value("critics_rating") <> "" Then MovieAttr.TomatoCriticsRating = jItem.Value("critics_rating")		    If jItem.HasName("critics_score")  And jItem.Value("critics_score")  <> "" Then MovieAttr.TomatoCriticsScore  = jItem.Value("critics_score")		    		    If jItem.HasName("audience_rating") And jItem.Value("audience_rating") <> "" Then MovieAttr.TomatoAudienceRating = jItem.Value("audience_rating")		    If jItem.HasName("audience_score")  And jItem.Value("audience_score")  <> "" Then MovieAttr.TomatoAudienceScore  = jItem.Value("audience_score")		  End If		  If Tomato.HasName("release_dates") And Tomato.Child("release_dates").HasName("dvd") And Tomato.Child("release_dates").Value("dvd") <> "" Then		    MovieAttr.DateReleasedOnDVD = Tomato.Child("release_dates").Value("dvd")		  End If		  		  		  // Write NFO		  MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieAttr.FolderParent ) )		  		  // Update wndMain		  If ActiveSection = 0 Then		    wndMain.lstMovies.UpdateRow		    If CurrentRow = -1 Or CurrentRow = wndMain.lstMovies.ListIndex Then		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Reload		    End If		  End If		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub UpdateArt(ID as String, ListIndex as Integer)		  Dim lstBox as Listbox = wndMain.lstMovies		  		  // If item has not been scraped before, (No ID is available) then continue to the next item.		  If ID = "" Then Return		  		  // If item doesn't exist, continue to the next item.		  MovieAttr.FolderParent = GetFolderItem( lstBox.Cell(ListIndex, 1) )		  If MovieAttr.FolderParent = Nil Or NOT MovieAttr.FolderParent.Exists Then Return		  MovieAttr.NFORead( MovieAttr.FolderParent )		  		  Dim Title as String = lstBox.Cell( ListIndex, 0 )		  		  		  dlgProgress.Add( Loc.kDownloading + ":", Title + "..." ) // 1		  Dim scktM as New MovieSckt		  scktM.GetArt ID, Title		  		  MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieAttr.FolderParent ) )		  		  wndMain.lstMovies.UpdateRow ListIndex		  		  If CommonCore.MassSearch = False And wndMain.lstMovies.ListIndex = ListIndex Then		    MovieAttr.LoadImages MovieAttr.FolderParent		    wndMain.cvsMovieDetails.Reload		  End If		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub zMovieFileInfo(MovieParent as FolderItem)		  //# If MovieCore.Cancelled then Return		  If MovieParent = Nil OR NOT MovieParent.Exists Then Return		  		  Dim XmlContent, ErrorStr as String		  Dim MovieFile as FolderItem = FindMovieItem( MovieParent )		  Dim MovieFiles() as FolderItem = FindMovieItems( MovieParent )		  		  If MovieFile = Nil or NOT MovieFile.Exists or MovieFile.NameExtension = "iso" Then Return		  ErrorStr = MovieFile.Name + " does not exist?" + chr(13) + chr(13) + MovieFile.ShellPath.ReplaceAll("\","")		  		  If MovieFile.Directory And ( MovieFile.Name = "VIDEO_TS" Or MovieFile.Name = "BDSMV" ) Then		    Dim n, BiggestLength as Integer		    Dim BiggestFile as FolderItem		    For i as Integer = 1 to MovieFile.Count		      n = MovieFile.Item(i).Length		      Dim f as FolderItem = MovieFile.Item(i)		      If BiggestLength < n And f <> Nil And NOT f.Directory Then		        BiggestLength = n		        BiggestFile = MovieFile.Item(i)		      End If		    Next		    		    MovieFile = BiggestFile		  End If		  If MovieFile = Nil Or MovieFile.Name = "VIDEO_TS" Or MovieFile.Name = "BDMV" Or MovieFile.Directory Then Return		  ErrorStr = MovieFile.Name + " does not exist?" + chr(13) + chr(13) + MovieFile.ShellPath.ReplaceAll("\","")		  'If MovieFile.Name = "VIDEO_TS" or MovieFile.Directory Then Return		  		  // Get XML from MediaInfo		  XmlContent = MediaInfo( MovieFile, False )		  If XmlContent = "" Then Return		  ErrorStr = "XmlContent is invalid?"		  		  If XmlContent.Encoding = Encodings.UTF8 Then		    XmlContent = XmlContent.ConvertEncoding( Encodings.UTF16 )		  ElseIf XmlContent.Encoding = Encodings.UTF16 Then		    XmlContent = XmlContent.ConvertEncoding( Encodings.UTF8 )		  End If		  XmlContent = DecodingFromHTMLMBS( XmlContent.ConvertEncoding( Encodings.ASCII ) ).ReplaceAll( " & ", " and " )		  XmlContent = XmlContent.ReplaceAll( XmlContent.MyMid( "<iTunMOVI", "</iTunMOVI>" ), "" ).ReplaceAll("<iTunMOVI</iTunMOVI>","")		  XmlContent = Trim( XmlContent )		  		  // Process XML		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  		  Dim SubtitleFormat, SubtitleLanguage as String		  Dim AudioCodec, AudioLanguage, AudioChannels as String		  Dim VideoCodec, VideoWidth, VideoHeight, VideoAspect, Duration as String		  		  If XmlContent = "" Or NOT ( XmlContent.Left(5) = "<?xml" ) Then Return		  Xml.PreserveWhitespace = False		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.FirstChild.FirstChild		  		  //$ If NOT MassSearch then Progress( Loc.kProcessing + ":", MovieFile.Name, 5, 5 )		  		  For i as Integer = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    // SUBTITLES		    If xnode.GetAttribute( "type" ) = "Text" Then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil Then		          		          Select Case xitem.Name		            		          Case "Format"		            SubtitleFormat = xitem.FirstChild.Value		          Case "Language"		            SubtitleLanguage = xitem.FirstChild.Value		            		          End Select		          		        End If		        		      Next		      		      MovieAttr.InfoSubtitleFormat.Append SubtitleFormat		      MovieAttr.InfoSubtitleLanguage.Append SubtitleLanguage		      		      SubtitleFormat = ""		      SubtitleLanguage = ""		      		    End If		    		    // AUDIO		    If xnode.GetAttribute( "type" ) = "Audio" then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil then		          		          Select Case xitem.Name		            		          Case "Format"		            AudioCodec = xitem.FirstChild.Value		          Case "Codec"		            If NOT xitem.FirstChild.Value.InStr(0, "_") > 0 Then AudioCodec = xitem.FirstChild.Value.ReplaceAll(".", "")'.ReplaceAll("-","")		          Case "Codec_ID_Hint"		            If NOT xitem.FirstChild.Value.InStr(0, "_") > 0 Or AudioCodec = "" Then AudioCodec = xitem.FirstChild.Value.ReplaceAll(".", "").ReplaceAll("-","")		            		          case "Channel_s_"		            AudioChannels = Trim( xitem.FirstChild.Value.ReplaceAll( "channels", "" ) )		            		          case "Language"		            If xitem.FirstChild.Value.Len > 3 then AudioLanguage = xitem.FirstChild.Value		            		          End Select		          		        End If		        		      Next		      		      If AudioCodec <> ""    then MovieAttr.InfoAudioCodec.Append    AudioCodec           else MovieAttr.InfoAudioCodec.Append    ""		      If AudioChannels <> "" then MovieAttr.InfoAudioChannels.Append Val( AudioChannels ) else MovieAttr.InfoAudioChannels.Append -1		      If AudioLanguage <> "" then MovieAttr.InfoAudioLanguage.Append AudioLanguage        else MovieAttr.InfoAudioLanguage.Append ""		      		      AudioCodec    = ""		      AudioChannels = ""		      AudioLanguage = ""		      		    End If		    		    // VIDEO		    If xnode.GetAttribute( "type" ) = "Video" then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil then		          		          Select Case xitem.Name		            		          Case "Format"		            VideoCodec = xitem.FirstChild.Value.ReplaceAll(".", "")'.ReplaceAll("-","")		          Case "Codec_ID"		            If NOT xitem.FirstChild.Value.InStr(0,"_") > 0 Then VideoCodec = xitem.FirstChild.Value		            'Case "Codec_ID_Hint"		            'If NOT xitem.FirstChild.Value.InStr(0,"_") > 0 Then VideoCodec = xitem.FirstChild.Value		            		          Case "Width"		            VideoWidth = Trim( xitem.FirstChild.Value.ReplaceAll( "pixels", "" ).ReplaceAll( " ", "" ) )		            		          Case "Height"		            VideoHeight = Trim( xitem.FirstChild.Value.ReplaceAll( "pixels", "" ).ReplaceAll( " ", "" ) )		            		          Case "Display_aspect_ratio"		            VideoAspect = Trim( xitem.FirstChild.Value )		            If VideoAspect.InStr(0,":") <= 0 Then		              VideoAspect = Str( Floor( Val( VideoAspect ) * 100 ) / 100 ) + ":1"		            ENd If		            		          Case "Duration"		            If MovieFile.Parent.Name = "VIDEO_TS" Or MovieFile.Parent.Name = "BDMV" Then Continue		            Duration = Trim( xitem.FirstChild.Value )		            If Duration.InStr(0, "h") > 0 Then		              Duration = Trim( xitem.FirstChild.Value ).ReplaceAll("mn","").ReplaceAll("h", "")		              Duration = Str( ( Val( Duration.NthField( " ", 1 ) ) * 60 ) + Val( Duration.NthField( " ", 2 ) ) )		            Else		              Duration = Trim( xitem.FirstChild.Value ).ReplaceAll("mn","")		            End If		            		            If MovieFiles.Ubound > 0 Then		              // TODO: What to do if there's more then one movie file?		              'MovieAttr.InfoVideoRuntime =		            Else		              MovieAttr.InfoVideoRuntime = Duration		            End If		            		          End Select		          		        End If		        		      Next		      		      If VideoCodec  <> "" then MovieAttr.InfoVideoCodec   = VideoCodec.ReplaceAll("AVC1","H264").ReplaceAll("AVC", "H264")		      If VideoWidth  <> "" then MovieAttr.InfoVideoWidth   = Val( VideoWidth )		      If VideoHeight <> "" then MovieAttr.InfoVideoHeight  = Val( VideoHeight )		      If VideoAspect <> "" Then MovieAttr.InfoVideoAspect = VideoAspect		      If VideoAspect = ""  And VideoWidth  <> "" and VideoHeight <> "" then MovieAttr.InfoVideoAspect = str( Floor( Val( VideoWidth ) / Val ( VideoHeight ) * 100 ) / 100 )		      		      VideoCodec  = ""		      VideoWidth  = ""		      VideoHeight = ""		      VideoAspect = ""		      		    End If		    		  Next		  Return		  		Exception err as NilObjectException		  MsgBox ErrorStr		End Sub	#tag EndMethod	#tag Constant, Name = ApiKey_FanartTV, Type = String, Dynamic = False, Default = \"79220e0c14eab8f46eedbb611288572e", Scope = Public	#tag EndConstant	#tag Constant, Name = ApiKey_RottenTomatoes, Type = String, Dynamic = False, Default = \"4kqwjrydumjyz9b8bc9bkert", Scope = Private	#tag EndConstant	#tag Constant, Name = ApiKey_TMDB, Type = String, Dynamic = False, Default = \"683359f622e4e27f41832a019d90b002", Scope = Public	#tag EndConstant	#tag Constant, Name = btnDownloadMissingArtwork, Type = String, Dynamic = True, Default = \"Download Missing Images Only", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Download Missing Images Only"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Download ontbrekende plaatjes"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Ladda endast ned saknade bilder"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Fehlende Extras"	#tag EndConstant	#tag Constant, Name = btnReplaceExistingArtwork, Type = String, Dynamic = True, Default = \"Replace Existing Images", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Replace Existing Images"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Vervang bestaande plaatjes"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Ers\xC3\xA4tt befintliga bilder"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Alle ersetzen"	#tag EndConstant	#tag Constant, Name = kConnectionError, Type = String, Dynamic = True, Default = \"Error establishing a database connection.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Error establishing a database connection."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Fout in een verbinding met de database."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Kan inte ansluta till databasen."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Fehler beim Aufbau der Datenbankverbindung."	#tag EndConstant	#tag Constant, Name = kFileInfo, Type = String, Dynamic = True, Default = \"File Information", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"File Information"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Bestands informatie"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Filinformation"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Datei Information"	#tag EndConstant	#tag Constant, Name = kImageURLsFound, Type = String, Dynamic = True, Default = \"%s image URLs...", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"%s image URLs..."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"%s plaatjes URLs..."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"%s bild-URL..."		#Tag Instance, Platform = Any, Language = de, Definition  = \"%s Bild URLs..."	#tag EndConstant	#tag Constant, Name = kManualSearchMovie, Type = String, Dynamic = True, Default = \"Do you want to manually search for the movie\?", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Do you want to manually search for the movie\?"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Wil je handmatig naar de film zoeken\?"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Vill du s\xC3\xB6ka efter filmen manuellt\?"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Soll der Film manuell gesucht werden\?"	#tag EndConstant	#tag Constant, Name = kNoImagesFound, Type = String, Dynamic = True, Default = \"No %s images found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No %s images found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen %s plaatjes gevonden."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Inga %sbilder hittades."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Keine %s Extras gefunden."	#tag EndConstant	#tag Constant, Name = kNoMoviesFoundTryAgain, Type = String, Dynamic = True, Default = \"No movies were found\x2C try again with less keywords or an alternative title.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No movies were found\x2C try again with less keywords or an alternative title."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen films gevonden\x2C probeer opnieuw met minder sleutel woorden of een alternatieve titel."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Ingen film hittades\x2C f\xC3\xB6rs\xC3\xB6k igen med f\xC3\xA4rre s\xC3\xB6kord eller en alternativ filmtitel."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Keine Filme gefunden. Versuche es mit weniger Schl\xC3\xBCsselworten oder mit einem anderen Titel."	#tag EndConstant	#tag Constant, Name = kNothingFound, Type = String, Dynamic = True, Default = \"Nothing found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Nothing found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Niets gevonden."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Ingenting hittat."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Nichts gefunden."	#tag EndConstant	#tag Constant, Name = kServiceUnavailable, Type = String, Dynamic = True, Default = \"Service Unavailable", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Service Unavailable"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Dienst niet beschikbaar"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Tj\xC3\xA4nsten \xC3\xA4r inte tillg\xC3\xA4nglig"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Dienst nicht verf\xC3\xBCgbar"	#tag EndConstant	#tag Constant, Name = msgDatabaseError, Type = String, Dynamic = True, Default = \"Database Error", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Database Error"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Database fout"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Databasfel"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Datenbank Fehler"	#tag EndConstant	#tag Constant, Name = msgDBConnectionError, Type = String, Dynamic = True, Default = \"Failed to connect to the %s database.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Failed to connect to the %s database."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Kon geen verbinding maken met de %s database."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Kan inte ansluta till %s databas."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Fehler bei der Verbindung zur Datenbank %s."	#tag EndConstant	#tag Constant, Name = msgIMDBApi, Type = String, Dynamic = True, Default = \"IMDb Api did not respond\x2C please try again later.\r\rWhile the IMDb Api did not work\x2C The MovieDB information has still been saved.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"IMDb Api did not respond\x2C please try again later.\r\rWhile the IMDb Api did not work\x2C The MovieDB information has still been saved."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"IMDb Api gaf geen antwoord\x2C probeer later opnieuw.\r\rAlhoewel de IMDb Api geen antwoord gaf\x2C de informatie van TMDB is wel opgeslagen."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"IMDb API svarade inte\x2C f\xC3\xB6rs\xC3\xB6k igen senare.\r\r\xC3\x84ven fast IMDb API inte fungerade har informationen fr\xC3\xA5n The MovieDB sparats."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Das IMDb API reagiert nicht\x2C bitte sp\xC3\xA4ter nochmal versuchen.\r\rWeil das API nicht funktioniert\x2C werden Informationen von \'The MovieDB\' genutzt."	#tag EndConstant	#tag Constant, Name = msgIMDBApiError, Type = String, Dynamic = True, Default = \"The unofficial IMDb API doesn\'t have this movie in it\'s database.\r\rIf this movie does exist in TMDB\x2C it\'ll still be scraped.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"The unofficial IMDb API doesn\'t have this movie in it\'s database.\r\rIf this movie does exist in TMDB\x2C it\'ll still be scraped."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"De onoffici\xC3\xABle IMDb API heeft deze film niet in zijn database.\r\rAls de film wel bestaand in TMDB\x2C dan is die informatie wel gedownload."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Den inofficiella IMDb API:n har inte den h\xC3\xA4r filmen i sin databas.\r\rOm den h\xC3\xA4r filmen finns i TMDB kan den fortfarande uppdateras."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Das inoffizielle IMDb API findet den Film nicht in der Datenbank.\r\rWenn der Film in der TMDB Datenbank gefunden wird\x2C werden diese Informationen genutzt."	#tag EndConstant	#tag Constant, Name = msgInvalidContent, Type = String, Dynamic = True, Default = \"Invalid content found", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Invalid content found"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ongeldige inhoud gevonden"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Ogiltligt inneh\xC3\xA5ll hittades"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Ung\xC3\xBCltiger Inhalt gefunden"	#tag EndConstant	#tag Constant, Name = msgNoID, Type = String, Dynamic = True, Default = \"I can\'t find a database ID for this item.\r\rPlease fetch metadata for this item first.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"I can\'t find a database ID for this item.\r\rPlease fetch metadata for this item first."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ik kan geen database ID vinden voor het geselecteerde voorwerp.\r\rDownload alstublieft eerst de metadata."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Det finns inget databas-ID f\xC3\xB6r det h\xC3\xA4r objektet.\r\rH\xC3\xA4mta metadata f\xC3\xB6r objektet f\xC3\xB6rst."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Es wurde hierf\xC3\xBCr keine Datenbank ID gefunden.\r\rBitte die Metadaten hierf\xC3\xBCr zuerst abfragen."	#tag EndConstant	#tag Constant, Name = msgNoIDMovie, Type = String, Dynamic = True, Default = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ik weet niet welke film dit is.\r\rDownload alstublieft eerst de metadata voor deze film."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"K\xC3\xA4nner inte igen den h\xC3\xA4r filmen.\r\rH\xC3\xA4mta metadata f\xC3\xB6r den h\xC3\xA4r filmen f\xC3\xB6rst."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Der Filmtitel wurde nicht erkannt!\r\rBitte eine manuelle Suche durchf\xC3\xBChren und den Titel anpassen."	#tag EndConstant	#tag Constant, Name = msgPriorArtDeletion, Type = String, Dynamic = True, Default = \"Would you like to replace your existing images with newly downloaded images\x2C or only download missing images\?", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Would you like to replace your existing images with newly downloaded images\x2C or only download missing images\?"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Wil je de bestaande plaatjes vervangen door nieuwe plaatjes\x2C of alleen de ontbrekende plaatjes downloaden\?"		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Vill du ers\xC3\xA4tta dina befintliga bilder med nya nedladdade bilder\x2C eller vill du endast ladda ner saknade bilder\?"		#Tag Instance, Platform = Any, Language = de, Definition  = \"Sollen die existierenden Extras durch die neu heruntergeladenen ersetzt werden oder sollen nur die fehlenden Extras heruntergeladen werden\?"	#tag EndConstant	#tag Constant, Name = msgPriorMovieArtFound, Type = String, Dynamic = True, Default = \"ViMediaManager has found existing image files for \'<movie>\'.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"ViMediaManager has found existing images for \'<movie>\'."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"ViMediaManager heeft al bestaande plaatjes gevonden voor \'<movie>\'."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"ViMediaManager har hittat befintliga bildfiler f\xC3\xB6r \'<movie>\'"		#Tag Instance, Platform = Any, Language = de, Definition  = \"ViMediaManager hat f\xC3\xBCr \'<movie>\' bereits existierende Extras gefunden."	#tag EndConstant	#tag Constant, Name = msgTMDBConnectionError, Type = String, Dynamic = True, Default = \"Failed to connect to <database>.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Failed to connect to <database>."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Kon geen verbinding maken met <database>."		#Tag Instance, Platform = Any, Language = sv, Definition  = \"Kan inte ansluta till <database>."		#Tag Instance, Platform = Any, Language = de, Definition  = \"Fehler bei der Verbindung zur Datenbank <database>."	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule