#tag ModuleProtected Module MovieCore	#tag Method, Flags = &h1		Protected Sub MissingMovies()		  'Dim UnFoundTitles() as String		  Dim sckt as New MovieSckt		  sckt.Yield = True		  MassSearch = True		  ReDim UnFoundTitles(-1)		  		  Dim LstBox as Listbox = wndMain.lstMovies		  		  For i as Integer = 0 To LstBox.ListCount - 1		    		    // If item has been scraped before (DB ID is available), continue to the next list item.		    If LstBox.Cell(i, 2) <> "" Then Continue		    		    // If Movie parent doesn't exist, continue to the next item.		    MovieAttr.FolderParent = GetFolderItem( LstBox.Cell(i, 1) )		    If MovieAttr.FolderParent = Nil OR NOT MovieAttr.FolderParent.Exists Then Continue		    		    // If the movie doesn't have a name, continue to the next item.		    Dim MovieName as String = FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		    If MovieName = "" Then Continue		    		    // Get JSON		    dlgProgress.Add( Loc.kSearching + ":", MovieName + "..." )		    Dim JSONString as String = sckt.Get( sckt.URL( "SearchMovie", MovieName, Prefs.textStringForKey("DBLanguage") ), Prefs.integerForKey("TimeOut") )		    sckt.Close		    		    // Load Valid JSON		    If NOT JSONString.ValidJSON( "TMDB" ) Then		      If NOT Growl.Notify( Loc.FetchAllMetadata + ":", Loc.kCouldNotBeFound.ReplaceAll( "%s", MovieName ) ) Then		        // Growling!		      End If		      UnFoundTitles.Append MovieName + chr(13) + "Invalid JSON returned from Server." + chr(13) + MovieAttr.FolderParent.ShellPath.ReplaceAll("\","") + JSONString		      Continue		    End If		    		    Dim SearchResult as new JSONItem		    SearchResult.Load JSONString		    		    // Get ID if available.		    If SearchResult.Child("results").Count <= 0 Then		      If NOT Growl.Notify( Loc.FetchAllMetadata + ":", Loc.kCouldNotBeFound.ReplaceAll( "%s", MovieName ) ) Then		        // Growling!		      End If		      UnFoundTitles.Append MovieName + chr(13) + "No results found, try a different name." + chr(13) + MovieAttr.FolderParent.ShellPath.ReplaceAll("\","")		      Continue		    End If		    		    SearchResult = SearchResult.Child("results").Child(0)		    Dim ID as String = SearchResult.Value("id")		    MovieName = SearchResult.Value("original_title")		    		    // Download Movie INFO & images.		    MovieByID ID		    		    If Prefs.boolForKey("AutoManageMedia") Then		      SingleRenamer MovieAttr.FolderParent, i, True		    Else		      wndMain.lstMovies.UpdateRow i		    End If		    		    If LstBox.ListIndex = i Then		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Refresh		    End If		    		  Next		  		  MassSearch = False		  wndMain.lstMovies.SortList		  		  MsgBox Loc.kDownloadComplete		  		  'LstBox.ListIndex = LstBox.ListIndex		  'wndMain.Refresh		  		  'Dim s as String		  'For i as Integer = 0 to UnFoundTitles.Ubound		  'If s = "" Then s = UnFoundTitles(i) Else s = s + chr(13) + chr(13) + UnFoundTitles(i)		  'Next		  '		  'If s <> "" Then wndResults.Init( Loc.kCouldNotBeFoundFollowing.ReplaceAll("%s", Loc.Movies.Lowercase ) + ":", s )		  		  ShowUnfoundTitles()		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieArt(ID as String, Mode as String)		  Dim JSON as New JSONItem		  Dim JSONString as String		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  Dim Size as String = ""		  		  If ID = "" THen		    MsgBox msgNoIDMovie		    Return		  End If		  		  dlgProgress.Reset		  		  If Mode.InStr(0, "TMDB") > 0 Then		    JSONString = sckt.Get( sckt.URL("MovieImages", ID), Prefs.integerForKey("TimeOut") )		    		  ElseIf Mode.InStr(0, "FanartTV") > 0 Then		    JSONString = sckt.Get( "http://fanart.tv/webservice/movie/" + ApiKey_FanartTV + "/" + ID + "/json/all/1/2/", Prefs.integerForKey("TimeOut") )		    Dim n as integer = JSONString.InStr( 2, "{" )		    JSONString = JSONString.Right( JSONString.Len - n + 1 )		    JSONString = JSONString.Left( JSONString.Len - 1 )		    		    If Mode.InStr( 0, "movieart"  )   > 0 Then Size =  "500x281"		    If Mode.InStr( 0, "hdmovieart" )  > 0 Then Size = "1000x562"		    		    If Mode.InStr( 0, "movielogo" )   > 0 Then Size =  "400x155"		    If Mode.InStr( 0, "hdmovielogo" ) > 0 Then Size =  "800x310"		    		    If Mode.InStr( 0, "moviedisc" )   > 0 Then Size = "1000x1000"		    If Mode.InStr( 0, "moviebanner" ) > 0 Then Size = "1000x185"		    If Mode.InStr( 0, "moviethumb" )  > 0 Then Size = "1000x562"		    		    If Mode.InStr( 0, "moviebackground") > 0 Then Size = "1920x1080"		    		  End If		  		  // Nicer formatting to display to users.		  Dim NiceMode as String = Mode.NthField( "-", 2 )		  Select Case NiceMode		    		  Case "moviebanner"		    NiceMode = Loc.kBanner		  Case "moviethumb"		    NiceMode = Loc.kThumb		    		  Case "movieart"		    NiceMode = Loc.kClearArt		  Case "moviedisc"		    NiceMode = Loc.kDiscArt		  Case "movielogo"		    NiceMode = Loc.kLogo		    		  Case "Poster"		    NiceMode = Loc.kPoster		  Case "Backdrops"		    NiceMode = Loc.kFanart		    		  End Select		  		  		  If JSONString.ValidJSON( Mode.NthField("-", 1) ) Then		    JSON.Load( JSONString )		  Else		    MsgBox kNoImagesFound.ReplaceAll( "%s", NiceMode.Lowercase )		    Return		  End If		  		  Dim IMGArray() as Picture		  Dim URLs(), Dimensions() as String		  		  Dim jItems as New JSONItem		  If JSON.HasName( Mode.NthField( "-", 2 ).Lowercase ) And JSON.Child( Mode.NthField( "-", 2).Lowercase ).Count > 0 Then		    jItems = JSON.Child( Mode.NthField("-", 2 ).Lowercase )		  Else		    MsgBox kNoImagesFound.ReplaceAll( "%s", NiceMode.Lowercase )		    Return		  End If		  		  Dim jItemsExtra as New JSONItem		  Dim SizeExtra as String		  If Mode.NthField("-", 2).Lowercase = "movieart" And JSON.HasName( "hdmovieart" ) Then		    jItemsExtra = JSON.Child( "hdmovieart" )		    SizeExtra = "1000x562"		  ElseIf Mode.NthField("-", 2).Lowercase = "movielogo" And JSON.HasName( "hdmovielogo" ) Then		    jItemsExtra = JSON.Child( "hdmovielogo" )		    SizeExtra = "800x310"		  End If		  		  // ---- TMDB		  If Mode.InStr(0, "TMDB" ) > 0 Then		    Dim pDest, fDest as FolderItem		    pDest = MovieAttr.DestinationPoster( MovieAttr.FolderParent )		    fDest = MovieAttr.DestinationFanart( MovieAttr.FolderParent )		    		    // AutoDownload 1st and only image if no local images are available yet.		    If jItems.Count = 1 And jItems.Child(0).Value("file_path") <> "" And ( _		      ( Mode.NthField("-", 2) = "posters" And pDest <> Nil And NOT pDest.Exists ) Or _		      ( Mode.NthField("-", 2) = "backdrops" And fDest <> Nil And NOT fDest.Exists ) ) Then		      If Mode.NthField("-", 2) = "posters"   Then		        MovieAttr.ART_Poster = URL2Picture( sckt.URLbase_image + SizePoster + jItems.Child(0).Value("file_path"), pDest.NameWithoutExtension, pDest.NameExtension, MovieAttr.FolderParent )		        CacheImageSet( MovieAttr.ART_Poster, MovieAttr.ID_IMDB + ".movie.poster.jpg" )		      End If		      		      If Mode.NthField("-", 2) = "backdrops" Then		        MovieAttr.ART_Fanart = URL2Picture( sckt.URLbase_image + SizeFanart + jItems.Child(0).Value("file_path"), fDest.NameWithoutExtension, fDest.NameExtension, MovieAttr.FolderParent )		        CacheImageSet( MovieAttr.ART_Fanart, MovieAttr.ID_IMDB + ".movie.fanart.jpg")		      End If		      		      wndMain.lstMovies.UpdateRow		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Refresh		      MsgBox Loc.kDownloadComplete		      Return		    End If		    		    // If there's more then one image, get them all and preview them in the thumbpreviewer.		    For i as Integer = 0 to jItems.Count - 1		      		      If jItems.Child(i).Value("file_path") <> "" Then		        Dim s as String		        If Mode.InStr(0, "posters")   > 0 Then		          s = Loc.kPoster		          URLs.Append sckt.URLbase_image + SizePoster + jItems.Child(i).Value("file_path")		        End If		        If Mode.InStr(0, "backdrops") > 0 Then		          s = Loc.kFanart		          URLs.Append sckt.URLbase_image + SizeFanart + jItems.Child(i).Value("file_path")		        End If		        		        dlgProgress.Add( Loc.kDownloading + ":", str(i+1) + Loc.k1of2 + Str( jItems.Count ) + " " + s + " " + Loc.kThumb.Lowercase + " " + Loc.kImages + "...", 1, jItems.Count )		        		        If Mode.InStr(0, "posters")   > 0 Then IMGArray.Append URL2Picture( sckt.URLbase_image + "w185" + jItems.Child(i).Value("file_path"), "PosterThumb" + Str(i) )		        If Mode.InStr(0, "backdrops") > 0 Then IMGArray.Append URL2Picture( sckt.URLbase_image + "w300" + jItems.Child(i).Value("file_path"), "FanartThumb" + Str(i) )		        		        Dimensions.Append jItems.Child(i).Value("width") + "x" + jItems.Child(i).Value("height")		        		      Else		        Continue		      End If		      		    Next		    		    		    // ---- FanartTV		  ElseIf Mode.InStr(0, "FanartTV") > 0 Then		    		    Dim s as String		    Dim f as FolderItem		    		    Select Case Mode.NthField("-",2)		    case "movieart"		      s = Loc.kClearArt		      f = MovieAttr.FolderParent.Child("clearart.png")		    case "movielogo"		      s = Loc.kLogo		      f = MovieAttr.FolderParent.Child("logo.png")		    case "moviedisc"		      s = Loc.kDiscArt		      f = MovieAttr.FolderParent.Child("disc.png")		    case "moviebanner"		      s = Loc.kBanner		      f = FindImageBanner( MovieAttr.FolderParent )		    End Select		    		    Dim Count as Integer = jItems.Count		    If jItemsExtra.Count > -1 Then		      Count = jItems.Count + jItemsExtra.Count		    End If		    		    // AutoDownload 1st and only image if no local images are available yet.		    If jItems.Count = 1 And jItems.Child(0).Value("url") <> "" _		      And f <> Nil And NOT f.Exists Then		      Dim Pic as Picture = URL2Picture( jItems.Child(0).Value("url"), f.NameWithoutExtension, f.NameExtension, MovieAttr.FolderParent )		      		      wndMain.lstMovies.UpdateRow		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Refresh		      MsgBox Loc.kDownloadComplete		      Return		    End If		    		    // If there's more then one image, get them all and preview them in the thumbpreviewer.		    For i as Integer = 0 to jItems.Count - 1		      		      If jItems.Child(i).Value("url") <> "" Then		        		        dlgProgress.Add( Loc.kDownloading + ":", Str(i+1) + Loc.k1of2 + Str( Count ) + " " + s + " " + Loc.kThumb + " " + Loc.kImages + "...", 1, Count )		        		        IMGArray.Append URL2Picture( jItems.Child(i).Value("url"), "Thumb" + Str(i), "png" )		        URLs.Append jItems.Child(i).Value("url")		        Dimensions.Append Size		      Else		        Continue		      End If		      		    Next		    		    For i as Integer = 0 to jItemsExtra.Count - 1		      If jItemsExtra.Child(i).Value("url") <> "" Then		        dlgProgress.Add( Loc.kDownloading + ":", Str( jItems.Count + i + 1 ) + Loc.k1of2 + Str( Count ) + " " + s + " " + Loc.kThumb + " " + Loc.kImages + "...", 1, Count )		        		        IMGArray.Append URL2Picture( jItemsExtra.Child(i).Value("url"), "Thumb" + Str( jItems.Count + i ), "png" )		        Urls.Append jItemsExtra.Child(i).Value("url")		        Dimensions.Append SizeExtra		      End If		    Next		    		  End If		  		  wndPreviewThumbs.Init IMGArray, Dimensions, URLs, Mode		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieByID(ID as String, Update as Boolean = False)		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  If ID = "" Then		    MsgBox msgNoIDMovie		    Return		  End If		  		  Dim MovieParent as FolderItem = MovieAttr.FolderParent		  Dim MovieName as String = FindMovieName( MovieParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		  If NOT MassSearch Then dlgProgress.Add( Loc.kSearching + ":", MovieName, 1, 5 ) // 1		  		  // Handle Prior Arts		  If NOT MassSearch and PriorArtFound( MovieAttr.FolderParent ) And _		    MsgDlg( Nil, 1, msgPriorMovieArtFound.ReplaceAll( "<movie>", MovieName ), msgPriorArtDeletion, btnReplaceExistingArtwork, btnDownloadMissingArtwork ) = 1 Then		    PriorArtDelete( MovieParent )		  End If		  		  // Get Movie data & images		  If NOT MassSearch Then dlgProgress.Add( Loc.kSearching + ":", "TMDb: " + MovieName ) // 2		  sckt.GetMovieNFO ID, Update		  		  // Update Display		  If NOT MovieCore.MassSearch Then		    		    'If Prefs.boolForKey("AutoManageMedia") Then		    'SingleRenamer MovieAttr.FolderParent, -1, True		    'Else		    wndMain.lstMovies.UpdateRow		    'End If		    MovieAttr.NFORead( MovieAttr.FolderParent )		    MovieAttr.LoadImages( MovieAttr.FolderParent )		    wndMain.cvsMovieDetails.Refresh		    		    wndMain.lstMovies.SortList		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieExtraArts(ID as String, Mode as String)		  Dim JSON as New JSONItem		  Dim JSONString, Size, NiceMode, FileName as String		  Dim Destination as FolderItem = MovieAttr.FolderParent.Child("extrathumbs")		  If Mode = "Backdrops" Then Destination = MovieAttr.FolderParent.Child("extrafanart")		  		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  If ID = "" Then		    MsgBox msgNoIDMovie		    Return		  End If		  		  If Destination <> Nil And Destination.Exists Then		    Dim s as Integer = MsgDlg( Nil, 1, msgPriorMovieArtFound.ReplaceAll("<movie>", MovieAttr.Title), msgPriorArtDeletion, Loc.dlgReplace, Loc.kDownload, Loc.dlgCancel )		    If s = 3 Then Return		    If s = 1 Then		      Destination.MoveFileToTrash		      Destination.CreateAsFolder		    End If		    		  Else		    Destination.CreateAsFolder		  End If		  		  JSONString = sckt.Get( sckt.URL( "MovieImages", ID ), Prefs.integerForKey("TimeOut") )		  sckt.Close		  		  If JSONString.ValidJSON Then JSON.Load JSONString		  		  If Mode = "Thumbs" Then		    Size = "w300"		    NiceMode = Loc.kThumb		    FileName = "thumb"		  ElseIf Mode = "Backdrops" Then		    Size = SizeFanart		    NiceMode = Loc.kFanart		    FileName = "fanart"		  End If		  		  dlgProgress.Reset		  		  For i as Integer = 0 to JSON.Child("backdrops").Count - 1		    Dim jItem as New JSONItem		    jItem = JSON.Child("backdrops").Child(i)		    		    If jItem.Value("file_path") <> "" Then		      dlgProgress.Add( Loc.kDownloading + ":", Str(i + 1) + Loc.k1of2 + Str( JSON.Child("backdrops").Count ) + " " + NiceMode + " " + Loc.kImages + "...", 1, JSON.Child("backdrops").Count )		      Dim Pic as Picture = URL2Picture( sckt.URLbase_image + Size + jItem.Value("file_path"), FileName + Str(i+1), "jpg", Destination )		    End If		  Next		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieFileInfo(MovieParent as FolderItem)		  //# If MovieCore.Cancelled then Return		  If MovieParent = Nil OR NOT MovieParent.Exists Then Return		  		  Dim XmlContent as String		  Dim MovieFile as FolderItem = FindMovieItem( MovieParent )		  		  If MovieFile = Nil or NOT MovieFile.Exists then Return		  If MovieFile.Name = "VIDEO_TS" Or MovieFile.Name = "BDSMV" Then		    Dim n, BiggestLength as Integer		    Dim BiggestFile as FolderItem		    For i as Integer = 1 to MovieFile.Count		      n = MovieFile.Item(i).Length		      Dim f as FolderItem = MovieFile.Item(i)		      If BiggestLength < n And f <> Nil And NOT f.Directory Then		        BiggestLength = n		        BiggestFile = MovieFile.Item(i)		      End If		    Next		    		    MovieFile = BiggestFile		  End If		  If MovieFile = Nil Or MovieFile.Name = "VIDEO_TS" Or MovieFile.Name = "BDMV" Or MovieFile.Directory Then Return		  'If MovieFile.Name = "VIDEO_TS" or MovieFile.Directory Then Return		  		  // Get XML from MediaInfo		  XmlContent = MediaInfo( MovieFile, False )		  'XmlContent = ConvertEncoding( XmlContent, Encodings.SystemDefault ).ReplaceAll("©", "").ReplaceAll("@", "")		  'XmlContent = ConvertEncoding( XmlContent, Encodings.UTF8 ).ReplaceAll("&","and")		  If XmlContent.Encoding = Encodings.UTF8 Then		    XmlContent = XmlContent.ConvertEncoding( Encodings.UTF16 )		  ElseIf XmlContent.Encoding = Encodings.UTF16 Then		    XmlContent = XmlContent.ConvertEncoding( Encodings.UTF8 )		  End If		  XmlContent = XmlContent.ConvertEncoding( Encodings.ASCII )		  		  // Process XML		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  		  Dim SubtitleFormat, SubtitleLanguage as String		  Dim AudioCodec, AudioLanguage, AudioChannels as String		  Dim VideoCodec, VideoWidth, VideoHeight, VideoAspect, Duration as String		  		  If XmlContent = "" Or NOT ( XmlContent.Left(5) = "<?xml" ) Then Return		  Xml.PreserveWhitespace = False		  Xml.LoadXml( XmlContent )		  		  xroot = Xml.FirstChild.FirstChild		  		  //$ If NOT MassSearch then Progress( Loc.kProcessing + ":", MovieFile.Name, 5, 5 )		  		  For i as Integer = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    // SUBTITLES		    If xnode.GetAttribute( "type" ) = "Text" Then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil Then		          		          Select Case xitem.Name		            		          Case "Format"		            SubtitleFormat = xitem.FirstChild.Value		          Case "Language"		            SubtitleLanguage = xitem.FirstChild.Value		            		          End Select		          		        End If		        		      Next		      		      MovieAttr.InfoSubtitleFormat.Append SubtitleFormat		      MovieAttr.InfoSubtitleLanguage.Append SubtitleLanguage		      		      SubtitleFormat = ""		      SubtitleLanguage = ""		      		    End If		    		    // AUDIO		    If xnode.GetAttribute( "type" ) = "Audio" then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil then		          		          Select Case xitem.Name		            		          Case "Format"		            AudioCodec = xitem.FirstChild.Value		          Case "Codec"		            If NOT xitem.FirstChild.Value.InStr(0, "_") > 0 Or AudioCodec = "" Then AudioCodec = xitem.FirstChild.Value.ReplaceAll(".", "").ReplaceAll("-","")		          Case "Codec_ID_Hint"		            If NOT xitem.FirstChild.Value.InStr(0, "_") > 0 Or AudioCodec = "" Then AudioCodec = xitem.FirstChild.Value.ReplaceAll(".", "").ReplaceAll("-","")		            		          case "Channel_s_"		            AudioChannels = Trim( xitem.FirstChild.Value.ReplaceAll( "channels", "" ) )		            		          case "Language"		            If xitem.FirstChild.Value.Len > 3 then AudioLanguage = xitem.FirstChild.Value		            		          End Select		          		        End If		        		      Next		      		      If AudioCodec <> ""    then MovieAttr.InfoAudioCodec.Append    AudioCodec           else MovieAttr.InfoAudioCodec.Append    ""		      If AudioChannels <> "" then MovieAttr.InfoAudioChannels.Append Val( AudioChannels ) else MovieAttr.InfoAudioChannels.Append -1		      If AudioLanguage <> "" then MovieAttr.InfoAudioLanguage.Append AudioLanguage        else MovieAttr.InfoAudioLanguage.Append ""		      		      AudioCodec    = ""		      AudioChannels = ""		      AudioLanguage = ""		      		    End If		    		    // VIDEO		    If xnode.GetAttribute( "type" ) = "Video" then		      		      For n as Integer = 0 to xnode.ChildCount - 1		        xitem = xnode.Child(n)		        		        If xitem.FirstChild <> Nil then		          		          Select Case xitem.Name		            		          Case "Format"		            VideoCodec = xitem.FirstChild.Value.ReplaceAll(".", "").ReplaceAll("-","")		            'Case "Codec_ID"		            'If NOT xitem.FirstChild.Value.InStr(0,"_") > 0 Then VideoCodec = xitem.FirstChild.Value		            'Case "Codec_ID_Hint"		            'If NOT xitem.FirstChild.Value.InStr(0,"_") > 0 Then VideoCodec = xitem.FirstChild.Value		            		          Case "Width"		            VideoWidth = Trim( xitem.FirstChild.Value.ReplaceAll( "pixels", "" ).ReplaceAll( " ", "" ) )		            		          Case "Height"		            VideoHeight = Trim( xitem.FirstChild.Value.ReplaceAll( "pixels", "" ).ReplaceAll( " ", "" ) )		            		          Case "Display_aspect_ratio"		            VideoAspect = Trim( xitem.FirstChild.Value )		            		          Case "Duration"		            If MovieFile.Parent.Name = "VIDEO_TS" Or MovieFile.Parent.Name = "BDMV" Then Continue		            Duration = Trim( xitem.FirstChild.Value )		            If Duration.InStr(0, "h") > 0 Then		              Duration = Trim( xitem.FirstChild.Value ).ReplaceAll("mn","").ReplaceAll("h", "")		              Duration = Str( ( Val( Duration.NthField( " ", 1 ) ) * 60 ) + Val( Duration.NthField( " ", 2 ) ) )		            Else		              Duration = Trim( xitem.FirstChild.Value ).ReplaceAll("mn","")		            End If		            MovieAttr.InfoVideoRuntime = Duration		            		          End Select		          		        End If		        		      Next		      		      If VideoCodec  <> "" then MovieAttr.InfoVideoCodec   = VideoCodec.ReplaceAll("AVC", "H264")		      If VideoWidth  <> "" then MovieAttr.InfoVideoWidth   = Val( VideoWidth )		      If VideoHeight <> "" then MovieAttr.InfoVideoHeight  = Val( VideoHeight )		      If VideoAspect <> "" Then MovieAttr.InfoVideoAspect = VideoAspect		      If VideoAspect = ""  And VideoWidth  <> "" and VideoHeight <> "" then MovieAttr.InfoVideoAspect = str( Floor( Val( VideoWidth ) / Val ( VideoHeight ) * 100 ) / 100 )		      		      VideoCodec  = ""		      VideoWidth  = ""		      VideoHeight = ""		      VideoAspect = ""		      		    End If		    		    If xnode.GetAttribute( "type" ) = "Subtitle" then		      // xitem = xnode.Child(n)		      		      // Create empty 'Subs' folder to add the subtitles to the movielist view.		      // Later: This is actually NOT a good solution, so i'm not doing it after all		      'Dim f as FolderItem = MovieAttr.FolderParent.Child("Subs")		      'If f <> Nil and NOT f.Exists Then f.CreateAsFolder		      		      // TODO: MediaInfo Subtitles?		    End If		    		  Next		  		  'Exception err as XmlException		  'Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieSearch(MovieName as String, ManualSearch as Boolean = False)		  Dim JSONString as String		  Dim Sckt as New MovieSckt		  Sckt.Yield = True		  		  dlgProgress.Add( Loc.kSearching + ":", MovieName )		  Dim Year as String = MovieName.Right(7)		  If Year.InStr(0,"(") > 0 And Year.InStr(0,")") > 0 Then		    Year = Trim( Year.ReplaceAll("(","").ReplaceAll(")","") )		  ElseIf Year.InStr(0,"[") > 0 And Year.InStr(0,"]") > 0 Then		    Year = Trim( Year.ReplaceAll("[","").ReplaceAll("]","") )		  ElseIf Year.InStr(0,"{") > 0 And Year.InStr(0,"}") > 0 Then		    Year = Trim( Year.ReplaceAll("{","").ReplaceAll("}","") )		  Else		    Year = ""		  End If		  		  JSONString = DefineEncoding( Sckt.Get( Sckt.URL( "SearchMovie", MovieName, Prefs.textStringForKey("DBLanguage"), 1, Year ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		  Sckt.Close		  		  If NOT JSONString.ValidJSON("TMDB Search") Then Return		  		  Dim JSON as New JSONItem		  JSON.Load JSONString.ConvertEncoding( Encodings.UTF8 )		  		  Dim TotalPages   as Integer = JSON.Value("total_pages")		  Dim TotalResults as Integer = JSON.Value("total_results")		  		  // No Results		  If TotalResults = 0 Then		    MsgBox kNoMoviesFoundTryAgain		    wndSearchMovies.Show		    If NOT ManualSearch Then wndSearchMovies.ccSearchMovies.edtSearch.Text = FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		    dlgProgress.Close		    Return		    		    // 1 Result NOT Manual Search		  ElseIf NOT ManualSearch And JSON.Child("results").Count = 1 Then 'TotalResults = 1 Then		    MovieCore.MovieByID( JSON.Child("results").Child(0).Value("id") )		    Return		  End If		  		  		  // Process Result(s)		  Dim ID(), Title(), TitleOriginal(), ReleaseDate(), PosterURL(), FanartURL(), Adult() as String		  		  For i as Integer = 1 to TotalPages		    		    // Multi-Page results.		    If i > 1 Then		      JSONString = DefineEncoding( Sckt.Get( Sckt.URL( "SearchMovie", MovieName, Prefs.textStringForKey("DBLanguage"), i, Year ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		      Sckt.Close		      If NOT JSONString.ValidJSON( "TMDB Page Search" ) Then		        Return		      End If		      JSON.Load JSONString.ConvertEncoding( Encodings.UTF8 )		    End If		    		    For n as Integer = 0 to JSON.Child("results").Count - 1		      Dim Jitem as JSONItem = JSON.Child("results").Child(n)		      dlgProgress.Add( Loc.kSearchResults + ":", Jitem.Value("title"), 1, TotalResults )		      		      ID.Append            Jitem.Value("id")		      Title.Append         Jitem.Value("title")		      TitleOriginal.Append Jitem.Value("original_title")		      ReleaseDate.Append   Jitem.Value("release_date")		      Adult.Append         Jitem.Value("adult")		      		      If Jitem.Value("poster_path") <> "" Then		        PosterURL.Append Sckt.URLbase_image + "w154" + Jitem.Value("poster_path")		      Else		        PosterURL.Append ""		      End If		      		      If Jitem.Value("backdrop_path") <> "" Then		        FanartURL.Append Sckt.URLbase_image + "w300" + Jitem.Value("backdrop_path")		      Else		        FanartURL.Append ""		      End If		      		    Next		    		    JSONString = ""		  Next		  		  wndSearchMovies.Show		  wndSearchMovies.lstResults.DeleteAllRows		  		  For i as Integer = 0 to Title.Ubound		    Dim DisplayTitle as String = Title(i) + " (" + ReleaseDate(i).Left(4) + ")"		    If ReleaseDate(i) = "" Then DisplayTitle = Title(i)		    		    wndSearchMovies.lstResults.AddRow DisplayTitle, ID(i), TitleOriginal(i), ReleaseDate(i), PosterURL(i), FanartURL(i), Adult(i)		  Next		  		  wndSearchMovies.ccSearchMovies.edtSearch.Text = MovieName		  wndSearchMovies.ccSearchMovies.edtSearch.SelectAll		  wndSearchMovies.lstResults.ListIndex = 0		  		  dlgProgress.Close		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieUpdateAll()		  Dim LstBox as Listbox = wndMain.lstMovies		  MassSearch = True		  ReDim UnFoundTitles(-1)		  		  For i as Integer = 0 to LstBox.ListCount - 1		    		    Dim ID as String = LstBox.Cell(i, 2)		    If ID= "" Then Continue		    		    MovieAttr.FolderParent = GetFolderItem( LstBox.Cell(i, 1 ) )		    If MovieAttr.FolderParent = Nil or NOT MovieAttr.FolderParent.Exists Then Continue		    		    MovieAttr.ClearProperties // Remove previous properties		    MovieAttr.NFORead( MovieAttr.FolderParent ) // Load properties from current item.		    		    dlgProgress.Add( Loc.kDownloading + ":", FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") ) )		    MovieByID ID, True		    		    		    If Prefs.boolForKey("AutoManageMedia") Then		      SingleRenamer MovieAttr.FolderParent, i, True		    Else		      wndMain.lstMovies.UpdateRow i		    End If		    		    If i = LstBox.ListIndex Then		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Refresh		    End If		    		  Next		  		  wndMain.lstMovies.Sort		  		  ShowUnfoundTitles()		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub MovieUpdateRating(CurrentRow as Integer = - 1)		  Dim sckt as New MovieSckt		  sckt.Yield = True		  		  If MovieAttr.ID_IMDB = "" Then		    MsgBox msgNoID		    Return		  End If		  		  Dim MovieName as String = FindMovieName( MovieAttr.FolderParent, True, NOT Prefs.boolForKey("UseFolderNameForLookUp") )		  		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", MovieName + " IMDb " + Loc.mRating.ReplaceAll(":", "...") )		  Dim JSONString as String = DefineEncoding( sckt.Get( "http://www.omdbapi.com/?i=" + MovieAttr.ID_IMDB + "&tomatoes=true&plot=full", Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		  sckt.Close		  		  Dim IMDBFull as New JSONItem		  If JSONString.ValidJSON("IMDb-Full") Then		    IMDBFull.Load ConvertEncoding( JSONString, Encodings.UTF8 )		    JSONString = ""		  Else		    Return		  End If		  		  // Rating		  If IMDBFull.Value("imdbRating") <> "N/A" Then MovieAttr.Rating = IMDBFull.Value("imdbRating")		  If IMDBFull.Value("imdbVotes") <> "N/A"  Then MovieAttr.RatingVotes = IMDBFull.Value("imdbVotes")		  		  // IMDB's Formula for Weighted Rating (WR) = (v ÷ (v+m)) × R + (m ÷ (v+m)) × C		  'Dim WeightedRating as Double = ( MovieAttr.RatingVotes / ( MovieAttr.RatingVotes + 25000 ) ) * MovieAttr.Rating + ( 25000 / ( MovieAttr.RatingVotes + 3000 ) ) * 7.1		  'If MovieAttr.RatingVotes >= 25000 and WeightedRating >= 8 then MovieAttr.RatingTop250 = Round( WeightedRating * 10 ) / 10		  		  If IMDBFull.Value("tomatoConsensus") <> "N/A" And IMDBFull.Value("tomatoConsensus") <> "No consensus yet." Then MovieAttr.TomatoConcensus = IMDBFull.Value("tomatoConsensus")		  		  		  // Top250		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", MovieName + " IMDb Top250 " + Loc.mRating.ReplaceAll(":", "...") )		  JSONString = DefineEncoding( sckt.Get( "http://250.s-anand.net/data/MariusTh86@gmail.com/seen", Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		  sckt.Close		  		  Dim Top250 as New JSONItem		  If JSONString.ValidJSON( "IMDb Top250" ) Then Top250.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  JSONString = ""		  		  If Top250.HasName("movies") Then		    		    For i as Integer = 0 to Top250.Child("movies").Count - 1		      Dim jItem as New JSONItem		      jItem = Top250.Child("movies").Child(i)		      Dim Top250ID as String = jItem.Value("url").ReplaceAll("title","").ReplaceAll("/","")		      If Top250ID = MovieAttr.ID_IMDB Then		        MovieAttr.RatingTop250 = i + 1		        If jItem.HasName( "rating" ) Then MovieAttr.Rating = jItem.Value( "rating" )		        If jItem.HasName( "votes" ) Then MovieAttr.RatingVotes = Val( jItem.Value( "votes" ).ReplaceAll(",","") )		      End If		    Next		    		  End If		  		  		  // Get Fresh Rotten Tomatoes Ratings:		  If NOT MovieCore.MassSearch Then dlgProgress.Add( Loc.kDownloading + ":", MovieName + " RottenTomatoes " + Loc.mRating.ReplaceAll(":", "...") )		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "TomatoesMovieAlias", MovieAttr.ID_IMDB.ReplaceAll("tt", "") ), Prefs.integerForKey("TimeOut") ), Encodings.UTF8 )		  sckt.Close		  		  Dim FirstBracketLoc as Integer = JSONString.InStr(0, "{" )		  JSONString = JSONString.Right( JSONString.Len - FirstBracketLoc + 1)		  		  Dim RTomato as New JSONItem		  If JSONString.ValidJSON("RottenTomato") Then		    RTomato.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  End If		  		  If RTomato.HasName("critics_consensus") Then MovieAttr.TomatoConcensus = RTomato.Value("critics_consensus")		  If RTomato.HasName("ratings") And RTomato.Child("ratings") <> Nil and RTomato.Child("ratings").Count > 0 Then		    Dim jItem as New JSONItem		    jItem = RTomato.Child("ratings")		    		    If jItem.HasName("critics_rating") Then MovieAttr.TomatoCriticsRating = jItem.Value("critics_rating")		    If jItem.HasName("critics_score")  Then MovieAttr.TomatoCriticsScore  = jItem.Value("critics_score")		    		    If jItem.HasName("audience_rating") Then MovieAttr.TomatoAudienceRating = jItem.Value("audience_rating")		    If jItem.HasName("audience_score")  Then MovieAttr.TomatoAudienceScore  = jItem.Value("audience_score")		  End If		  		  		  MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieAttr.FolderParent ) )		  		  If wndMain.GetActiveListbox = wndMain.lstMovies Then		    wndMain.lstMovies.UpdateRow		    If CurrentRow = -1 Or CurrentRow = wndMain.lstMovies.ListIndex Then		      MovieAttr.LoadImages( MovieAttr.FolderParent )		      wndMain.cvsMovieDetails.Refresh		    End If		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub ShowUnfoundTitles()		  If UnfoundTitles.Ubound > -1 Then		    Dim Message as String		    		    For i as Integer = 0 to UnfoundTitles.Ubound		      If Message = "" Then		        Message = UnfoundTitles(i)		      Else		        Message = Message + chr(13) + chr(13) + "----------" +Chr(13) + Chr(13) + UnfoundTitles(i)		      End If		    Next		    		    wndResults.Init( Loc.kCouldNotBeFoundFollowing.ReplaceAll( "%S", Loc.Movies ), Message )		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub UpdateArt(ID as String, ListIndex as Integer)		  Dim lstBox as Listbox = wndMain.GetActiveListbox		  		  // If item has not been scraped before, (No ID is available) then continue to the next item.		  If ID = "" Then Return		  		  // If item doesn't exist, continue to the next item.		  If lstBox = wndMain.lstMovies Then		    MovieAttr.FolderParent = GetFolderItem( lstBox.Cell(ListIndex, 1) )		    If MovieAttr.FolderParent = Nil Or NOT MovieAttr.FolderParent.Exists Then Return		  Else'If lstBox = wndMain.lstTVShows Then		    'TVAttr.FolderParent = GetFolderItem( lstBox.Cell(ListIndex, 1) )		    'If TVAttr.FolderParent = Nil Or NOT TVAttr.FolderParent.Exists Then Continue		  End If		  		  Dim Title as String = lstBox.Cell( ListIndex, 0 )		  		  If lstBox = wndMain.lstMovies Then		    dlgProgress.Add( Loc.kDownloading + ":", Title + "..." ) // 1		    Dim scktM as New MovieSckt		    scktM.GetArt ID, Title		  Else'If lstBox = wndMain.lstTVShows Then		    		  End If		  		  wndMain.lstMovies.UpdateRow ListIndex		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected ManualSearch As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected MassSearch As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected UnfoundTitles() As String	#tag EndProperty	#tag Constant, Name = ApiKey_FanartTV, Type = String, Dynamic = False, Default = \"79220e0c14eab8f46eedbb611288572e", Scope = Public	#tag EndConstant	#tag Constant, Name = ApiKey_RottenTomatoes, Type = String, Dynamic = False, Default = \"4kqwjrydumjyz9b8bc9bkert", Scope = Public	#tag EndConstant	#tag Constant, Name = ApiKey_TMDB, Type = String, Dynamic = False, Default = \"683359f622e4e27f41832a019d90b002", Scope = Public	#tag EndConstant	#tag Constant, Name = btnDownloadMissingArtwork, Type = String, Dynamic = True, Default = \"Download Missing Images Only", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Download Missing Images Only"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Download ontbrekende plaatjes"	#tag EndConstant	#tag Constant, Name = btnReplaceExistingArtwork, Type = String, Dynamic = True, Default = \"Replace Existing Images", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Replace Existing Images"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Vervang bestaande plaatjes"	#tag EndConstant	#tag Constant, Name = kConnectionError, Type = String, Dynamic = True, Default = \"Error establishing a database connection.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Error establishing a database connection."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Fout in een verbinding met de database."	#tag EndConstant	#tag Constant, Name = kFileInfo, Type = String, Dynamic = True, Default = \"File Information", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"File Information"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Bestands informatie"	#tag EndConstant	#tag Constant, Name = kImageURLsFound, Type = String, Dynamic = True, Default = \"%s image URLs...", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"%s image URLs..."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"%s plaatjes URLs..."	#tag EndConstant	#tag Constant, Name = kManualSearchMovie, Type = String, Dynamic = True, Default = \"Do you want to manually search for the movie\?", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Do you want to manually search for the movie\?"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Wil je handmatig naar de film zoeken\?"	#tag EndConstant	#tag Constant, Name = kNoImagesFound, Type = String, Dynamic = True, Default = \"No %s images found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No %s images found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen %s plaatjes gevonden."	#tag EndConstant	#tag Constant, Name = kNoMoviesFoundTryAgain, Type = String, Dynamic = True, Default = \"No movies were found\x2C try again with less keywords or an alternative title.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"No movies were found\x2C try again with less keywords or an alternative title."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Geen films gevonden\x2C probeer opnieuw met minder sleutel woorden of een alternatieve titel."	#tag EndConstant	#tag Constant, Name = kNothingFound, Type = String, Dynamic = True, Default = \"Nothing found.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Nothing found."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Niets gevonden."	#tag EndConstant	#tag Constant, Name = kServiceUnavailable, Type = String, Dynamic = True, Default = \"Service Unavailable", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Service Unavailable"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Dienst niet beschikbaar"	#tag EndConstant	#tag Constant, Name = msgDatabaseError, Type = String, Dynamic = True, Default = \"Database Error", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Database Error"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Database fout"	#tag EndConstant	#tag Constant, Name = msgDBConnectionError, Type = String, Dynamic = True, Default = \"Failed to connect to the %s database.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Failed to connect to the %s database."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Kon geen verbinding maken met de %s database."	#tag EndConstant	#tag Constant, Name = msgIMDBApi, Type = String, Dynamic = True, Default = \"IMDb Api did not respond\x2C please try again later.\r\rWhile the IMDb Api did not work\x2C The MovieDB information has still been saved.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"IMDb Api did not respond\x2C please try again later.\r\rWhile the IMDb Api did not work\x2C The MovieDB information has still been saved."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"IMDb Api gaf geen antwoord\x2C probeer later opnieuw.\r\rAlhoewel de IMDb Api geen antwoord gaf\x2C de informatie van TMDB is wel opgeslagen."	#tag EndConstant	#tag Constant, Name = msgIMDBApiError, Type = String, Dynamic = True, Default = \"The unofficial IMDb API doesn\'t have this movie in it\'s database.\r\rIf this movie does exist in TMDB\x2C it\'ll still be scraped.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"The unofficial IMDb API doesn\'t have this movie in it\'s database.\r\rIf this movie does exist in TMDB\x2C it\'ll still be scraped."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"De onoffici\xC3\xABle IMDb API heeft deze film niet in zijn database.\r\rAls de film wel bestaand in TMDB\x2C dan is die informatie wel gedownload."	#tag EndConstant	#tag Constant, Name = msgInvalidContent, Type = String, Dynamic = True, Default = \"Invalid content found", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Invalid content found"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ongeldige inhoud gevonden"	#tag EndConstant	#tag Constant, Name = msgNoID, Type = String, Dynamic = True, Default = \"I can\'t find a database ID for this item.\r\rPlease fetch metadata for this item first.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"I can\'t find a database ID for this item.\r\rPlease fetch metadata for this item first."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ik kan geen database ID vinden voor het geselecteerde voorwerp.\r\rDownload alstublieft eerst de metadata."	#tag EndConstant	#tag Constant, Name = msgNoIDMovie, Type = String, Dynamic = True, Default = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"I do not know which movie this is.\r\rPlease fetch metadata for this movie first."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Ik weet niet welke film dit is.\r\rDownload alstublieft eerst de metadata voor deze film."	#tag EndConstant	#tag Constant, Name = msgPriorArtDeletion, Type = String, Dynamic = True, Default = \"Would you like to replace your existing images with newly downloaded images\x2C or only download missing images\?", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Would you like to replace your existing images with newly downloaded images\x2C or only download missing images\?"		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Wil je de bestaande plaatjes vervangen door nieuwe plaatjes\x2C of alleen de ontbrekende plaatjes downloaden\?"	#tag EndConstant	#tag Constant, Name = msgPriorMovieArtFound, Type = String, Dynamic = True, Default = \"ViMediaManager has found existing image files for \'<movie>\'.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"ViMediaManager has found existing images for \'<movie>\'."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"ViMediaManager heeft al bestaande plaatjes gevonden voor \'<movie>\'."	#tag EndConstant	#tag Constant, Name = msgTMDBConnectionError, Type = String, Dynamic = True, Default = \"Failed to connect to <database>.", Scope = Protected		#Tag Instance, Platform = Any, Language = en, Definition  = \"Failed to connect to <database>."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Kon geen verbinding maken met <database>."	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule