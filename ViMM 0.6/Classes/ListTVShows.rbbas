#tag ClassProtected Class ListTVShowsInherits Listbox	#tag Event		Function CellBackgroundPaint(g As Graphics, row As Integer, column As Integer) As Boolean		  		  		  If Me.Active AND Me.Enabled Then		    g.ForeColor = RGB( 232, 232, 232 )		  Else		    g.ForeColor = RGB( 255, 255, 255 )		  End If		  		  If row < Me.ListCount And Me.RowTag( row ) = "Folder" Then		    g.DrawGradient( rgb(255, 255, 255), rgb(230, 230, 230), 0, 0, g.Width, g.Height )		  Else		    g.FillRect 0, 0, g.Width, g.Height		  End If		  		  If row < Me.ListCount Then		    g.ForeColor = RGB( 214, 214, 214 )		    g.DrawLine 0, g.Height -1, g.Width, g.Height -1		    		    g.ForeColor = RGB( 255, 255, 255 )		    g.DrawLine 0, 0, g.Width, 0		  End If		  		  // Selection Gradient		  If Row > -1 And Me.Selected( row ) Then g.DrawGradient( RGB(115, 176, 227), RGB( 71, 131, 208), 0, 0, g.Width, g.Height )		  		  		  // Folder shadow		  If Row < Me.ListCount - 1 And row > 0 And Me.RowTag( row - 1 ) = "Folder" And Me.Expanded( row - 1 ) And Me.RowTag( row ) <> "Folder" And NOT Me.Selected( row ) Then		    g.ForeColor = RGB( 150, 150, 150 )		    g.DrawLine 0, 0, g.Width, 0		    g.Transparency = 50		    g.DrawLine 0, 1, g.Width, 1		    g.Transparency = 80		    g.DrawLine 0, 2, g.Width, 2		    g.Transparency = 0		  End If		  		  // Show/Hide Button		  If Row < Me.ListCount And RowTag( row ) = "Folder" Then		    g.TextFont = "Arial Narrow Bold"		    g.TextSize = 13		    		    Dim btnText as String = "Show"		    If Me.Expanded( row ) Then btnText = "Hide"		    'Dim btnTextWidth as Integer = g.StringWidth( btnText )		    btnText = btnText.Uppercase		    		    // Draw button bg		    'If Me.Selected( row ) Then g.ForeColor = rgb ( 150, 150, 150) Else g.ForeColor = rgb( 255, 255, 255)		    g.ForeColor = RGB( 255, 255, 255 )		    g.FillRoundRect g.Width - 10 - 50, ( g.Height / 2 ) - 7,   50, 18,   10, 10		    		    'If Me.Selected( row ) Then g.ForeColor = rgb ( 65, 65, 65) Else g.ForeColor = rgb(165, 165, 165)		    g.ForeColor = RGB( 165, 165, 165 )		    g.FillRoundRect g.Width - 10 - 50, ( g.Height / 2 ) - 9,   50, 18,   10, 10		    		    'If Me.Selected( row ) Then g.ForeColor = rgb ( 95, 95, 95) Else g.ForeColor = rgb(195, 195, 195)		    g.ForeColor = RGB( 195, 195, 195 )		    g.FillRoundRect g.Width - 10 - 50, ( g.Height / 2 ) - 8,   50, 18,   10, 10		    		    // Draw button text		    'If Me.Selected( row ) Then g.ForeColor = rgb ( 150, 150, 150) Else g.ForeColor = rgb( 255, 255, 255)		    g.ForeColor = RGB( 255, 255, 255 )		    g.DrawString btnText, ( ( g.Width - 10 - 50 ) + 25 ) - ( g.StringWidth( btnText ) / 2 ), g.TextSize + 1 + ( g.Height / 2 ) - ( g.StringHeight( btnText, Me.Width ) / 2 )		    		    'If Me.Selected( row ) Then g.ForeColor = rgb ( 35, 35, 35) Else g.ForeColor = rgb( 95, 95, 95)		    g.ForeColor = RGB( 95, 95, 95)		    g.DrawString btnText, ( ( g.Width - 10 - 50 ) + 25 ) - ( g.StringWidth( btnText ) / 2 ), g.TextSize + ( g.Height / 2 ) - ( g.StringHeight( btnText, Me.Width ) / 2 )		    		  End If		  		  		  // Midline		  If Row < Me.ListCount Then		    g.Transparency = 80		    g.ForeColor = RGB( 255, 0, 0 )		    g.DrawLine 0, g.Height / 2, g.Width, g.Height / 2		  End If		  		  Return True		End Function	#tag EndEvent	#tag Event		Function CellClick(row as Integer, column as Integer, x as Integer, y as Integer) As Boolean		  		  Dim iLeft as Integer = 0		  If ( Me.ListCount - 1 ) * DefaultRowHeight > Me.Height Then iLeft = 16		  		  If Me.RowTag( row ) = "Folder" And _		    y > ( DefaultRowHeight / 2 ) - 8 And y < ( ( DefaultRowHeight / 2 ) - 8 ) + 18 And _		    x > Me.Width - 10 - 50 - iLeft And x < Me.Width - 10 - iLeft Then		    		    Me.Expanded( row ) = NOT Me.Expanded( row )		    Return True		  End If		  		  Return False		End Function	#tag EndEvent	#tag Event		Function CellTextPaint(g As Graphics, row As Integer, column As Integer, x as Integer, y as Integer) As Boolean		  Dim TextLeft as Integer = 16		  g.TextSize = 13		  If Me.RowTag( row ) = "Folder" Then		    g.TextSize = 22		    g.TextFont = "Arial Narrow Bold"		    TextLeft = 48 + 4 + 8		  End If		  Dim TextTop as Integer = g.TextSize + ( g.Height / 2 ) - ( g.TextSize / 2 ) - 2		  		  // Shadow / HiLite		  If me.Selected( row ) Then g.ForeColor = &c000000 Else g.ForeColor = &cFFFFFF		  g.Transparency = 60		  g.DrawString Me.Cell( row, column ), TextLeft, TextTop + 1, g.Width - TextLeft, True		  		  // Title		  g.Transparency = 0		  If me.Selected( row ) Then g.ForeColor = &cFFFFFF Else g.ForeColor = &c333333		  		  If Me.RowTag( row ) = "Folder" Then 'And NOT Me.Selected( row ) Then		    If Me.Cell( row, 0 ) = "Today" Then		      If NOT Me.Selected( row ) Then g.ForeColor = &c186D0C		      g.DrawPicture rocket, 4, (g.Height / 2) - ( 48 / 2 ), 48, 48,   0, 0, rocket.Width, rocket.Height		    End If		    If Me.Cell( row, 0 ) = "Ended" Then g.ForeColor = &c9F113D		    If Me.Cell( row, 0 ) = "Unknown" Then g.ForeColor = &c818181		    If Me.Cell( row, 0 ) = "To be announced" Then g.ForeColor = hsv(211, 45.1327, 44.3137) '&c3E70A4		  End If		  		  g.DrawString Me.Cell( row, column ), TextLeft, TextTop, g.Width - TextLeft, True		  		  		  Return True		End Function	#tag EndEvent	#tag Event		Sub Close()		  If Trim( wndMain.ccSearchBoxMovies.edtSearch.Text ) <> "" Then		    wndMain.ccSearchBoxTVShows.edtSearch.Text = " "		    wndMain.ccSearchBoxTVShows.edtSearch.Text = ""		    SaveToDB		  End If		End Sub	#tag EndEvent	#tag Event		Sub CollapseRow(row As Integer)		  While Me.ListCount > row + 1 And Me.RowTag( row + 1 ) <> "Folder"		    Me.RemoveRow row + 1		  Wend		End Sub	#tag EndEvent	#tag Event		Sub ExpandRow(row As Integer)		  		  		  For i as Integer = 0 to Shadow.ListCount -1		    		    Select Case Me.Cell( row, 0 )		      		    case "Unknown" // Unscraped		      If Shadow.Cell( i, 2 ) <> "" Then Continue		      		    Case "Ended" // Ended		      If Shadow.Cell( i, 4 ) <> "Ended" Then Continue		      		    Case "To Be Announced"		      If Shadow.Cell( i, 8 ) <> "" Then Continue // If there is air time set.		      If Shadow.Cell( i, 4 ).InStr( 0, "Continuing" ) > 0 OR Shadow.Cell( i, 4 ).InStr( 0, "Ended" ) > 0 Then Continue // If it's currently airing or ended		      		    Case "Upcoming"		      If Shadow.Cell( i, 8 ) = "" Then Continue // If there is no air time set.		      If Shadow.Cell( i, 4 ).InStr( 0, "Continuing" ) > 0 OR Shadow.Cell( i, 4 ).InStr( 0, "Ended" ) > 0 Then Continue // If it's currently airing or ended		      		    Else		      Continue		      		    End Select		    		    		    Me.AddRow		    For n as Integer = 0 to Shadow.ColumnCount - 1		      Me.Cell( Me.LastIndex, n ) = Shadow.Cell( i, n )		    Next		    		  Next		End Sub	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  // Let the listbox handle up/down arrows and tab keys		  If Keyboard.AsyncKeyDown(&h7D) Or Keyboard.AsyncKeyDown(&h7E) Or Keyboard.AsyncKeyDown(&h30) Then Return False		  		  		  'If Keyboard.AsyncKeyDown(&h30) Then Return False		  		  // Arrow Keys		  If Me.ListIndex >= 0 Then		    		    		    Select Case Asc(Key)		      		    Case 28 // Left Arrow		      If Me.RowTag( Me.ListIndex ) = "Folder" Then		        If Keyboard.AsyncCommandKey Then Me.AllExpanded False Else Me.Expanded( Me.ListIndex ) = False		      Else		        Me.ListIndex = Me.ParentIndex( Me.ListIndex )		      End If		      Return True		      		    Case 29 // Right Arrow		      If Me.RowTag( Me.ListIndex ) = "Folder" Then		        If Keyboard.AsyncCommandKey Then Me.AllExpanded True Else Me.Expanded( Me.ListIndex ) = True		      End If		      Return True		      		    End Select		    		  End If		  		  		  		  // Cmd + Del:		  If Keyboard.CommandKey and Keyboard.AsyncKeyDown(&h33) Then		    DeleteItem		    Return False		  End If		  		  // Cmd + Enter		  If Keyboard.CommandKey And Keyboard.AsyncKeyDown( 36 ) Then		    If Cell( ListIndex, 2 ) <> "" Then CommonCore.EditInfo Else CommonCore.FetchMetadata		    Return False		  End If		  		  If ( Ticks - LastKeyPressedAt < 30 ) then LastKeyPressed = LastKeyPressed + Key else LastKeyPressed = Key		  LastKeyPressedAt = Ticks		  For i as Integer = 0 to ListCount - 1		    If Lowercase( Left( List(i).DeArticulator, Len( LastKeyPressed ) ) ) = Lowercase( LastKeyPressed ) then		      ListIndex = i		      Exit		    End If		  Next		  		  Return False		End Function	#tag EndEvent	#tag Event		Sub Open()		  Shadow = wndMain.lstTVShadow		  Shadow.ColumnCount = Me.ColumnCount		  		  LoadList		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Sub AddItem(f as FolderItem)		  #pragma DisableBackgroundTasks		  		  If f = Nil Or NOT f.Exists Or NOT f.Directory Then Return		  If TVFolders(0).Name = f.Name Then dlgProgress.Reset		  		  Shadow.AddRow f.Name, f.AbsolutePath		  		  // Found progress		  dlgProgress.Add( Loc.kReadingInfo + ":", f.Name, 1, TVFolders.ubound )		  		  'If NOT App.DebugMode Then		  TVAttr.NFORead( f )		  		  // 0. Movie Title		  Dim TVTitle as String		  If TVAttr.Title <> "" Then		    TVTitle = TVAttr.Title		    If TVAttr.DateYear > 0 Then TVTitle = TVAttr.Title + " (" + Str( TVAttr.DateYear ) + ")"		    Shadow.Cell( Shadow.LastIndex, 0 ) = TVTitle		  End If		  		  // 1. Absolute Path		  // Already there.		  		  // 2. TV ID		  If TVAttr.ID_IMDb <> "" Then		    Shadow.Cell( Shadow.LastIndex, 2 ) = TVAttr.ID_IMDb		  ElseIf TVAttr.ID_TVDB <> "" Then		    Shadow.Cell( Shadow.LastIndex, 2 ) = TVAttr.ID_TVDB		  End If		  		  // 3. Sort Title		  If TVAttr.TitleSort <> "" Then		    Shadow.Cell( Shadow.LastIndex, 3 ) = TVAttr.TitleSort		  ElseIf TVAttr.Title <> "" Then		    Shadow.Cell( Shadow.LastIndex, 3 ) = Articulator( TVAttr.Title )		    If TVAttr.DateYear > 0 Then Shadow.Cell( Shadow.LastIndex, 3 ) = Shadow.Cell( Shadow.LastIndex, 3 ) + " (" + Str( TVAttr.DateYear ) + ")"		  Else		    Shadow.Cell( Shadow.LastIndex, 3 ) = Articulator( Shadow.Cell( Shadow.LastIndex, 0 ) )		  End If		  		  // 4. Status		  Shadow.Cell( Shadow.LastIndex, 4 ) = Str( TVAttr.Status )		  		  // 5. Date Premiered		  If TVAttr.DatePremiered <> "" And TVAttr.DatePremiered <> "N/A" Then		    Shadow.Cell( Shadow.LastIndex, 5 ) = TVAttr.DatePremiered		  ElseIf ( TVAttr.DatePremiered = "N/A" Or TVAttr.DatePremiered = "" ) And TVAttr.DateYear > 0 Then		    Shadow.Cell( Shadow.LastIndex, 5 ) = Str( TVAttr.DateYear )		  End If		  		  // 6. Studio		  Shadow.Cell( Shadow.LastIndex, 6 ) = TVAttr.Studio		  		  // 7. Rating		  If TVAttr.Rating > 0 Then		    Dim Rate as String = Str( TVAttr.Rating )		    If Rate.Len = 1 Then Rate = Rate + ".0"		    If Rate.Len = 3 Then Rate = "0" + Rate		    		    Shadow.Cell( Shadow.LastIndex, 7 ) = Rate		  End If		  		  // 8 - 9. Next Aired Episode		  Shadow.Cell( Shadow.LastIndex, 8 ) = TVAttr.NextAired_Date		  Shadow.Cell( Shadow.LastIndex, 9 ) = TVAttr.NextAired_Episode		  		  // 10 t/m 20. Art files		  If FindImagePoster( f ) <> Nil Then Shadow.Cell( Shadow.LastIndex, 10 ) = "Poster"   Else Shadow.Cell( Shadow.LastIndex, 10 ) = "-"		  If FindImageFanart( f ) <> Nil Then Shadow.Cell( Shadow.LastIndex, 11 ) = "Backdrop" Else Shadow.Cell( Shadow.LastIndex, 11 ) = "-"		  If FindImageBanner( f ) <> Nil Then Shadow.Cell( Shadow.LastIndex, 12 ) = "Banner"   Else Shadow.Cell( Shadow.LastIndex, 12 ) = "-"		  		  If f.Child( "clearart.png" ).Exists  Then Shadow.Cell( Shadow.LastIndex, 13 ) = "ClearArt"     Else Shadow.Cell( Shadow.LastIndex, 13 ) = "-"		  If f.Child( "logo.png" ).Exists      Then Shadow.Cell( Shadow.LastIndex, 14 ) = "Logo"         Else Shadow.Cell( Shadow.LastIndex, 14 ) = "-"		  If f.Child( "disc.png").Exists       Then Shadow.Cell( Shadow.LastIndex, 15 ) = "DiscArt"      Else Shadow.Cell( Shadow.LastIndex, 15 ) = "-"		  If f.Child( "landscape.jpg" ).Exists Then Shadow.Cell( Shadow.LastIndex, 16 ) = "Thumb"        Else Shadow.Cell( Shadow.LastIndex, 16 ) = "-"		  If f.Child( "character.png" ).Exists Then Shadow.Cell( Shadow.LastIndex, 17 ) = "CharacterArt" Else Shadow.Cell( Shadow.LastIndex, 17 ) = "-"		  If f.Child( "extrathumbs" ).Exists   Then Shadow.Cell( Shadow.LastIndex, 18 ) = "extrathumbs"  Else Shadow.Cell( Shadow.LastIndex, 18 ) = "-"		  If f.Child( "extrafanart" ).Exists   Then Shadow.Cell( Shadow.LastIndex, 19 ) = "extrafanart"  Else Shadow.Cell( Shadow.LastIndex, 19 ) = "-"		  'If FindImageSeason( f ) <> Nil       Then Cell( LastIndex, 20 ) = "seasonart"    Else Cell( LastIndex, 20 ) = "-"		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub AllExpanded(b as Boolean)		  For i as Integer = Me.ListCount - 1 DownTo 0		    If Me.RowTag( i ) = "Folder" Then Me.Expanded( i ) = b		  Next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CreateList(Update as Boolean = True)		  #pragma DisableBackgroundTasks		  		  Dim f as FolderItem = Preferences.fAppSupport		  If f.Child("TVShowsDB.xml").Exists Then f.Child("TVShowsDB.xml").Delete		  		  Dim Dict as Dictionary = Prefs.dictionaryForKey("TVShowPaths")		  Dim Paths() as FolderItem		  		  If Dict = Nil Then		    Shadow.DeleteAllRows		    'Me.DeleteAllRows		    Return		  End If		  		  For Each Key as Variant in Dict.Keys		    Paths.Append GetFolderItem( Key )		  Next		  		  ReDim TVFolders(-1)		  Dim Lindex as Integer = ListIndex		  ListIndex = -1		  'If NOT Update Then Me.DeleteAllRows		  If NOT Update Then Shadow.DeleteAllRows		  If Paths.Ubound = -1 Then		    Shadow.DeleteAllRows		    'Me.DeleteAllRows		    Return		  End If		  		  // Scan available directories for tv shows		  For i as Integer = 0 to Paths.Ubound		    If Paths(i) = Nil OR NOT Paths(i).Exists Then Continue		    		    For n as Integer = 1 to Paths(i).Count		      If Paths(i).Item(n).Directory And Paths(i).Item(n).Visible Then TVFolders.Append Paths(i).Item(n)		    Next		  Next		  		  // If update then remove folders that no longer exists.		  If Update Then		    For i as Integer = ListCount - 1 DownTo 0		      Dim listfolder as FolderItem = GetFolderItem( Cell( i, 1 ) )		      If listfolder = Nil OR NOT listfolder.Exists Then RemoveRow i		    Next		  End If		  		  // If update, add folders that aren't in the list yet, otherwise add every folder.		  For i as Integer = 0 to TVFolders.Ubound		    		    If Update Then		      Dim b as Boolean = False		      For n as Integer = 0 to ListCount - 1		        If Cell( n, 1 ) = TVFolders(i).AbsolutePath Then		          b = True		          Exit		        End If		      Next		      		      If NOT b Then AddItem TVFolders(i)		      		    Else		      AddItem TVFolders(i)		    End If		    		  Next		  		  SaveToDB		  ReDim TVFolders(-1)		  SortList		  wndMain.lstSearch.CopyFrom Shadow		  		  wndMain.ActBar( wndMain.ppMain.Value ).TextValue( Str( Me.ListCount ) + " " + Loc.TVShows )		  		  If Lindex > -1 And Lindex > ListCount -1 Then		    ListIndex = ListCount -1		  ElseIf Lindex > -1 Then		    ListIndex = Lindex		  Else		    ListIndex = 0		  End If		  Lindex = -1		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DeleteItem()		  If ListIndex = -1 Then Return		  		  Dim LastIndex as Integer = ListIndex		  Dim f as FolderItem = GetFolderItem( Cell( ListIndex, 1 ) )		  		  If f = Nil OR NOT f.Exists Then Return		  		  Dim StrRemoveItem   as String = Loc.msgRemoveItem.ReplaceAll( "%S", Cell( ListIndex, 0 ) ).ReplaceAll( "F", f.Parent.Name )		  Dim StrMovedToTrash as String = Loc.msgWillBeMovedToTrash.ReplaceAll( "%F", f.Parent.Name )		  		  If MsgDlg( Parent.Window, 1, StrRemoveItem, StrMovedToTrash, Loc.btnMoveToTrash, Loc.btnKeepIt ) = 2 Then Return		  		  f.MoveFileToTrash( False )		  'CacheImage( TVAttr.ID_IMDB )		  RemoveRow( ListIndex )		  SaveToDB		  		  wndMain.lstSearch.CopyFrom Me // Update the 'search listbox'.		  		  If LastIndex >= ListCount -1 Then ListIndex = ListCount -1 Else ListIndex = LastIndex		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub LoadList()		  #pragma DisableBackgroundTasks		  		  Me.DeleteAllRows		  Shadow.DeleteAllRows		  		  // Add category folders		  Me.AddFolder "Today"		  Me.RowTag( LastIndex ) = "Folder"		  Me.AddFolder "This week"		  Me.RowTag( LastIndex ) = "Folder"		  Me.AddFolder "This Month"		  Me.RowTag( LastIndex ) = "Folder"		  Me.AddFolder "Upcoming"		  Me.RowTag( LastIndex ) = "Folder"		  Me.AddFolder "To be announced"		  Me.RowTag( LastIndex ) = "Folder"		  Me.AddFolder "Ended"		  Me.RowTag( LastIndex ) = "Folder"		  Me.AddFolder "Unknown"		  Me.RowTag( LastIndex ) = "Folder"		  		  // Alternative labels:		  //   Today		  //   Tomorrow		  //   This Week		  //   Next Week		  //   Upcoming		  //   To Be Announced		  //   Ended		  		  // Load existing XML TV List if it exists.		  If NOT Preferences.fAppSupport.Child("TVShowsDB.xml").Exists Then		    CreateList		    		    wndMain.ActBar( wndMain.ppMain.Value ).Text = str( Shadow.ListCount ) + " " + Loc.TVShows		    SortList		    If Shadow.ListIndex <> 0 then Shadow.ListIndex = 0		    Return		  End If		  		  Dim Xml as New XmlDocument		  Dim xRoot, xNode, xItem as XmlNode		  Dim fi as FolderItem		  Xml.PreserveWhitespace = False		  		  Dim TextIn as TextInputStream		  TextIn = TextIn.Open( Preferences.fAppSupport.Child("TVShowsDB.xml") )		  Dim Content as String = Trim( TextIn.ReadAll )		  TextIn.Close		  		  If Content.Left(5) = "<?xml" Then Xml.LoadXml( Content ) Else Return		  xRoot = Xml.Child(0)		  		  		  		  For i as Integer = 0 to xRoot.ChildCount - 1		    xNode = xRoot.Child(i)		    If xNode.FirstChild = Nil Then Continue		    		    Shadow.AddRow "Row"		    		    For n as Integer = 0 to xNode.ChildCount - 1		      xItem = xNode.Child(n)		      		      If xItem.FirstChild = Nil Then Continue		      		      Select Case xItem.Name		        		      Case "Title"		        Shadow.Cell( Shadow.LastIndex, 0 ) = xItem.FirstChild.Value		      Case "Path"		        Shadow.Cell( Shadow.LastIndex, 1 ) = xItem.FirstChild.Value		      Case "ID"		        Shadow.Cell( Shadow.LastIndex, 2 ) = xItem.FirstChild.Value		      Case "SortTitle"		        Shadow.Cell( Shadow.LastIndex, 3 ) = xItem.FirstChild.Value		      Case "Status"		        Shadow.Cell( Shadow.LastIndex, 4 ) = xItem.FirstChild.Value		      Case "Premiere"		        Shadow.Cell( Shadow.LastIndex, 5 ) = xItem.FirstChild.Value		      Case "Studio"		        Shadow.Cell( Shadow.LastIndex, 6 ) = xItem.FirstChild.Value		      Case "Rating"		        Shadow.Cell( Shadow.LastIndex, 7 ) = xItem.FirstChild.Value		        		      Case "NextAiredDate"		        Shadow.Cell( Shadow.LastIndex, 8 ) = xItem.FirstChild.Value		      Case "NextAiredEpisode"		        Shadow.Cell( Shadow.LastIndex, 9 ) = xItem.FirstChild.Value		        		      Case "ArtPoster"		        Shadow.Cell( Shadow.LastIndex, 10 ) = xItem.FirstChild.Value		      Case "ArtBackdrop"		        Shadow.Cell( Shadow.LastIndex, 11 ) = xItem.FirstChild.Value		      Case "ArtBanner"		        Shadow.Cell( Shadow.LastIndex, 12 ) = xItem.FirstChild.Value		      Case "ArtClearArt"		        Shadow.Cell( Shadow.LastIndex, 13 ) = xItem.FirstChild.Value		      Case "ArtLogo"		        Shadow.Cell( Shadow.LastIndex, 14 ) = xItem.FirstChild.Value		      Case "ArtDisc"		        Shadow.Cell( Shadow.LastIndex, 15 ) = xItem.FirstChild.Value		      Case "ArtThumb"		        Shadow.Cell( Shadow.LastIndex, 16 ) = xItem.FirstChild.Value		      Case "ArtCharacter"		        Shadow.Cell( Shadow.LastIndex, 17 ) = xItem.FirstChild.Value		      Case "ArtExtraThumbs"		        Shadow.Cell( Shadow.LastIndex, 18 ) = xItem.FirstChild.Value		      Case "ArtExtraBackdrops"		        Shadow.Cell( Shadow.LastIndex, 19 ) = xItem.FirstChild.Value		        'Case "Studio"		        'Cell( LastIndex, 20 ) = xItem.FirstChild.Value		        		      End Select		      		    Next		    		    // Remove row if the folder is not available.		    If Shadow.Cell( Shadow.LastIndex, 1 ) <> "" Then		      Dim f as FolderItem = GetFolderItem( Shadow.Cell( Shadow.LastIndex, 1 ) )		      If f = Nil OR not f.Exists Then Shadow.RemoveRow( Shadow.LastIndex )		    End If		    		  Next		  		  wndMain.ActBar( 1 ).Text = str( Shadow.ListCount ) + " " + Loc.TVShows		  SortList		  wndMain.lstSearch.CopyFrom Shadow		  If Me.ListIndex <> 0 Then Me.ListIndex = 0		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ParentIndex(CurrentIndex as Integer) As Integer		  For i as Integer = CurrentIndex DownTo 0		    If Me.RowTag( i ) = "Folder" Then Return i		  Next		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SaveToDB()		  #pragma DisableBackgroundTasks		  		  Dim Xml as New XmlDocument		  Dim xRoot, xNode as XmlNode		  Xml.PreserveWhitespace = True		  		  xRoot = Xml.AppendChild( Xml.CreateElement( "list" ) )		  		  For i as Integer = 0 to Shadow.ListCount - 1		    xNode = xRoot.AppendNewChild("tvshow")		    		    xNode.AppendSimpleChild "Title",      Shadow.Cell( i, 0 )		    xNode.AppendSimpleChild "Path",       Shadow.Cell( i, 1 )		    xNode.AppendSimpleChild "ID",         Shadow.Cell( i, 2 )		    xNode.AppendSimpleChild "SortTitle",  Shadow.Cell( i, 3 )		    xNode.AppendSimpleChild "Status",     Shadow.Cell( i, 4 )		    xNode.AppendSimpleChild "Premiere",   Shadow.Cell( i, 5 )		    xNode.AppendSimpleChild "Studio",     Shadow.Cell( i, 6 )		    xNode.AppendSimpleChild "Rating",     Shadow.Cell( i, 7 )		    		    xNode.AppendSimpleChild "NextAiredDate",     Shadow.Cell( i, 8 )		    xNode.AppendSimpleChild "NextAiredEpisode",  Shadow.Cell( i, 9 )		    		    xNode.AppendSimpleChild "ArtPoster",          Shadow.Cell( i, 10 )		    xNode.AppendSimpleChild "ArtBackdrop",        Shadow.Cell( i, 11 )		    xNode.AppendSimpleChild "ArtBanner",          Shadow.Cell( i, 12 )		    xNode.AppendSimpleChild "ArtClearArt",        Shadow.Cell( i, 13 )		    xNode.AppendSimpleChild "ArtLogo",            Shadow.Cell( i, 14 )		    xNode.AppendSimpleChild "ArtDisc",            Shadow.Cell( i, 15 )		    xNode.AppendSimpleChild "ArtThumb",           Shadow.Cell( i, 16 )		    xNode.AppendSimpleChild "ArtCharacter",       Shadow.Cell( i, 17 )		    xNode.AppendSimpleChild "ArtExtraThumbs",     Shadow.Cell( i, 18 )		    xNode.AppendSimpleChild "ArtExtraBackdrops",  Shadow.Cell( i, 19 )		    'xNode.AppendSimpleChild "ArtSeasons",  Cell( i, 20 )		  Next		  		  xRoot.Indent(0)		  'Xml.LoadXml( Xml.ToString )		  		  If Preferences.fAppSupport.Exists Then Xml.SaveXml( Preferences.fAppSupport.Child("TVShowsDB.xml") )		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SortList()		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdateRow(Lindex as Integer = - 1, NewLocation as FolderItem = Nil)		  If Lindex = -1 Then Lindex = ListIndex		  If Lindex = -1 Then Return		  		  Dim f as FolderItem		  If NewLocation = Nil Then		    f = GetFolderItem( Cell( Lindex, 1 ) )		  Else		    f = NewLocation		  End If		  		  If f = Nil or NOT f.Exists Then Return		  		  TVAttr.NFORead f		  		  // 0. TV Title		  Dim TVTitle as String		  If TVAttr.Title <> "" Then		    TVTitle = TVAttr.Title		    If TVAttr.DateYear > 0 Then TVTitle = TVAttr.Title + " (" + Str( TVAttr.DateYear ) + ")"		    Cell( Lindex, 0 ) = TVTitle		  End If		  		  // 1. Absolute Path		  If NewLocation <> Nil And f <> Nil And f.Exists Then Cell( Lindex, 1 ) = f.AbsolutePath		  		  // 2. TV ID		  If TVAttr.ID_IMDb <> "" Then		    Cell( Lindex, 2 ) = TVAttr.ID_IMDb		  ElseIf TVAttr.ID_TVDB <> "" Then		    Cell( Lindex, 2 ) = TVAttr.ID_TVDB		  End If		  		  // 3. Sort Title		  If TVAttr.TitleSort <> "" Then		    Cell( Lindex, 3 ) = TVAttr.TitleSort		  ElseIf TVAttr.Title <> "" Then		    Cell( Lindex, 3 ) = Articulator( TVAttr.Title )		    If TVAttr.DateYear > 0 Then Cell( Lindex, 3 ) = Cell( Lindex, 3 ) + " (" + Str( TVAttr.DateYear ) + ")"		  Else		    Cell( Lindex, 3 ) = Articulator( Cell( Lindex, 0 ) )		  End If		  		  // 4. Status		  Cell( Lindex, 4 ) = Str( TVAttr.Status )		  		  // 5. Date Premiered		  If TVAttr.DatePremiered <> "" And TVAttr.DatePremiered <> "N/A" Then		    Cell( Lindex, 5 ) = TVAttr.DatePremiered		  ElseIf ( TVAttr.DatePremiered = "N/A" Or TVAttr.DatePremiered = "" ) And TVAttr.DateYear > 0 Then		    Cell( Lindex, 5 ) = Str( TVAttr.DateYear )		  End If		  		  // 6. Studio		  Cell( Lindex, 6 ) = TVAttr.Studio		  		  // 7. Rating		  If TVAttr.Rating > 0 Then		    Dim Rate as String = Str( TVAttr.Rating )		    If Rate.Len = 1 Then Rate = Rate + ".0"		    If Rate.Len = 3 Then Rate = "0" + Rate		    		    Cell( Lindex, 7 ) = Rate		  End If		  		  // 8 - 9. Next Aired Episode		  Cell( Lindex, 8 ) = TVAttr.NextAired_Date		  Cell( Lindex, 9 ) = TVAttr.NextAired_Episode		  		  // 10 t/m 20. Art files		  If FindImagePoster( f ) <> Nil Then Cell( Lindex, 10 ) = "Poster"   Else Cell( Lindex, 10 ) = "-"		  If FindImageFanart( f ) <> Nil Then Cell( Lindex, 11 ) = "Backdrop" Else Cell( Lindex, 11 ) = "-"		  If FindImageBanner( f ) <> Nil Then Cell( Lindex, 12 ) = "Banner"   Else Cell( Lindex, 12 ) = "-"		  		  If f.Child( "clearart.png" ).Exists  Then Cell( Lindex, 13 ) = "ClearArt"     Else Cell( Lindex, 13 ) = "-"		  If f.Child( "logo.png" ).Exists      Then Cell( Lindex, 14 ) = "Logo"         Else Cell( Lindex, 14 ) = "-"		  If f.Child( "disc.png").Exists       Then Cell( Lindex, 15 ) = "DiscArt"      Else Cell( Lindex, 15 ) = "-"		  If f.Child( "landscape.jpg" ).Exists Then Cell( Lindex, 16 ) = "Thumb"        Else Cell( Lindex, 16 ) = "-"		  If f.Child( "character.png" ).Exists Then Cell( Lindex, 17 ) = "CharacterArt" Else Cell( Lindex, 17 ) = "-"		  If f.Child( "extrathumbs" ).Exists   Then Cell( Lindex, 18 ) = "extrathumbs"  Else Cell( Lindex, 18 ) = "-"		  If f.Child( "extrafanart" ).Exists   Then Cell( Lindex, 19 ) = "extrafanart"  Else Cell( Lindex, 19 ) = "-"		  'If FindImageSeason( f ) <> Nil       Then Cell( Lindex, 20 ) = "seasonart"    Else Cell( Lindex, 20 ) = "-"		  		  		End Sub	#tag EndMethod	#tag Property, Flags = &h0		LastKeyPressed As String	#tag EndProperty	#tag Property, Flags = &h0		LastKeyPressedAt As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private Shadow As Listbox	#tag EndProperty	#tag Property, Flags = &h1		Protected TVFolders() As Folderitem	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="AutoHideScrollbars"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Bold"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Border"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnCount"			Visible=true			Group="Appearance"			InitialValue="1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnsResizable"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnWidths"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DataField"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataField"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DataSource"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataSource"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DefaultRowHeight"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDrag"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDragReorder"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesHorizontal"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Default"				"1 - None"				"2 - ThinDotted"				"3 - ThinSolid"				"4 - ThickSolid"				"5 - DoubleThinSolid"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesVertical"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Default"				"1 - None"				"2 - ThinDotted"				"3 - ThinSolid"				"4 - ThickSolid"				"5 - DoubleThinSolid"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="HasHeading"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="HeadingIndex"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Hierarchical"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialValue"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Italic"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LastKeyPressed"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="LastKeyPressedAt"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="RequiresSelection"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarHorizontal"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollBarVertical"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="SelectionType"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Single"				"1 - Multiple"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Visible=true			Group="Font"			InitialValue="System"			Type="String"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Visible=true			Group="Font"			InitialValue="0"			Type="Single"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextUnit"			Visible=true			Group="Font"			InitialValue="0"			Type="FontUnits"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Default"				"1 - Pixel"				"2 - Point"				"3 - Inch"				"4 - Millimeter"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Underline"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollOffset"			Group="Appearance"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollWidth"			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass