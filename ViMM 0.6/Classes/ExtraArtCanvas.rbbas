#tag ClassProtected Class ExtraArtCanvasInherits Canvas	#tag Event		Sub DragExit(obj As DragItem, action As Integer)		  Invalidate( False )		End Sub	#tag EndEvent	#tag Event		Function DragOver(x As Integer, y As Integer, obj As DragItem, action As Integer) As Boolean		  Dim g as Graphics = Me.Graphics		  		  If obj <> Nil then		    		    MouseCursor = System.Cursors.Copy		    		    Dim Pic, DropPic as Picture		    Dim PicDimensions as String		    		    g.ForeColor = &c626262		    g.FillRect 0, 0, Width, Height		    		    g.ForeColor = &c000000		    g.DrawRect 0, 0, Width, Height		    		    Pic = Picture.Open( obj.FolderItem )		    DropPic = ScaleImage( Pic, Width, Height )		    g.DrawPicture DropPic, ( Width / 2 ) - ( DropPic.Width / 2 ), ( Height / 2 ) - ( DropPic.Height / 2 )		    		  End If		  		  g.ForeColor = &c000000		  g.DrawRect 0, 0, Width, Height		  		  Return True		End Function	#tag EndEvent	#tag Event		Sub DropObject(obj As DragItem, action As Integer)		  If obj.FolderItemAvailable and obj.FolderItem <> Nil then		    AddImage obj.FolderItem		    ObjectDropped()		  End If		End Sub	#tag EndEvent	#tag Event		Sub MouseMove(X As Integer, Y As Integer)		  If ScaledPic = Nil Then Return		  		  Dim SmallX, BigX, SmallY, BigY as Integer		  		  SmallX = ( Width / 2 ) - ( ScaledPic.Width / 2 )		  BigX   = SmallX + ScaledPic.Width		  		  SmallY = ( Height / 2 ) - ( ScaledPic.Height / 2 )		  BigY   = SmallY + ScaledPic.Height		  		  If X > SmallX And X < BigX And _		    Y > SmallY And Y < BigY _		    Then		    MouseCursor = System.Cursors.FingerPointer		  Else		    MouseCursor = System.Cursors.StandardPointer		  End If		End Sub	#tag EndEvent	#tag Event		Sub Open()		  AcceptFileDrop( "image/png" )		  AcceptFileDrop( "image/jpg" )		  		  Open()		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  'Dim Pic as Picture		  Dim PicDimensions as String		  		  g.ForeColor = &c929292		  g.FillRect 0, 0, Width, Height		  		  If PreviewArt <> Nil Then		    ScaledPic = ScaleImage( PreviewArt, Width, Height )		    g.DrawPicture ScaledPic, ( Width / 2 ) - ( ScaledPic.Width / 2 ), ( Height / 2 ) - ( ScaledPic.Height / 2 )		  End If		  		  // Dimensions Label		  If PreviewArt <> Nil Then		    Dim s as String = Str( PreviewArt.Width ) + "x" + Str( PreviewArt.Height )		    g.TextSize = 10		    		    g.ForeColor = &cEEEEEE		    g.FillRect 5, 5, g.StringWidth(s) + 6, g.TextHeight + 4		    		    g.ForeColor = &c000000		    g.DrawRect 5, 5, g.StringWidth(s) + 6, g.TextHeight + 4		    		    g.DrawString s, 8, 7 + g.TextSize		  End If		  		  g.ForeColor = &c000000		  g.DrawRect 0, 0, Width, Height		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub AddImage(AddItem as FolderItem)		  If AddItem = Nil or NOT AddItem.Exists then Return		  		  Dim FileName as String		  Dim PathParent, PathDestination, MovieFile, FinalDestination as FolderItem		  Dim MovieMode as Boolean = False		  		  // Folder Parent		  Select Case wndMain.ppMain.Value		  case 0		    PathParent = MovieAttr.FolderParent		    MovieFile = FindMovieItem( PathParent )		    MovieMode  = True		  case 1		    // PathParent = TVAttr.FolderParent		  case 2		    // PathParent = AnimeAttr.FolderParent		  End Select		  		  // Set Destination		  Select Case Mode		    		  Case "Poster"		    PathDestination = FindImagePoster( PathParent )		  Case "Fanart"		    PathDestination = FindImageFanart( PathParent )		    		  Case "Banner"		    PathDestination = FindImageBanner( PathParent )		  Case "ClearArt"		    PathDestination = PathParent.Child( "clearart.png" )		  Case "CharacterArt"		    PathDestination = PathParent.Child( "character.png" )		  Case "Logo"		    PathDestination = PathParent.Child( "logo.png" )		  Case "Thumb"		    PathDestination = PathParent.Child( "landscape.jpg" )		  Case "DiscArt"		    PathDestination = PathParent.Child( "disc.png" )		    		  End Select		  		  // Process image		  If PathDestination <> Nil and PathDestination.Exists and _		    MsgDlg( Parent.Window, 1, Mode + msgMessage, msgExplanation, Loc.dlgReplace, Loc.dlgCancel ) = 1 Then		    		    FileName = PathDestination.NameWithoutExtension		    		    PathDestination.MoveFileToTrash		    AddItem.CopyFileTo( PathParent.Child( FileName + "." + AddItem.NameExtension ) )		    		  ElseIf PathDestination = Nil or NOT PathDestination.Exists Then		    		    If MovieMode and MovieFile <> Nil and MovieFile.Exists Then		      		      If Mode = "Poster" then AddItem.CopyFileTo( PathParent.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", MovieFile.NameWithoutExtension ) ) )		      If Mode = "Fanart" then AddItem.CopyFileTo( PathParent.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", MovieFile.NameWithoutExtension ) ) )		      		    ElseIf MovieMode and ( MovieFile = Nil OR NOT MovieFile.Exists ) Then		      		      If Mode = "Poster" then AddItem.CopyFileTo( PathParent.Child( Prefs.textStringForKey( "FileNamePoster" ).ReplaceAll( "<movie>", "poster" ) ) )		      If Mode = "Fanart" then AddItem.CopyFileTo( PathParent.Child( Prefs.textStringForKey( "FileNameFanart" ).ReplaceAll( "<movie>", "fanart" ) ) )		      		    ElseIf NOT MovieMode Then		      		      If AddItem.Type = "image/png" Then AddItem.CopyFileTo PathParent.Child( PathDestination.NameWithoutExtension + ".png" )		      If AddItem.Type = "image/jpg" Then AddItem.CopyFileTo PathParent.Child( PathDestination.NameWithoutExtension + ".jpg" )		      If AddItem.Type <> "image/png" And AddItem.Type <> "image/jpg" Then AddItem.CopyFileTo PathParent.Child( PathDestination.NameWithoutExtension + ".jpg" )		      		    End If		    		  End If		  		  If MovieMode then		    Dim f as FolderItem, s as String		    If Mode = "Poster" Then		      f = FindImagePoster( PathParent )		      s = MovieAttr.Title + ".movie.poster.jpg"		    ElseIf Mode = "Fanart" Then		      f = FindImageFanart( PathParent )		      s = MovieAttr.Title + ".movie.fanart.jpg"		    End If		    		    If f <> Nil and f.Exists Then CacheImageSet( Picture.Open( f ), s )		    MovieAttr.LoadImages PathParent // Else TVAttr.LoadImages		  End If		  		  // Reload		  Dim NewArt as FolderItem		  Select Case Mode		  Case "Poster"		    NewArt = FindImagePoster( PathParent )		  Case "Fanart"		    NewArt = FindImageFanart( PathParent )		  Case "Banner"		    NewArt = FindImageBanner( PathParent )		  Case "ClearArt"		    NewArt = PathParent.Child( "clearart.png" )		  Case "CharacterArt"		    NewArt = PathParent.Child( "character.png" )		  Case "Logo"		    NewArt = PathParent.Child( "logo.png" )		  Case "TVThumb"		    NewArt = PathParent.Child( "landscape.jpg" )		  Case "DiscArt"		    NewArt = PathParent.Child( "disc.png" )		  End Select		  If NewArt <> Nil and NewArt.Exists then PreviewArt = Picture.Open( NewArt )		  		  Invalidate False		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Reload(Pic as Picture)		  PreviewArt = Pic		  'Invalidate False		  Refresh		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event ObjectDropped()	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Property, Flags = &h0		Mode As String = "Poster"	#tag EndProperty	#tag Property, Flags = &h0		PreviewArt As Picture	#tag EndProperty	#tag Property, Flags = &h0		ScaledPic As Picture	#tag EndProperty	#tag Constant, Name = msgExplanation, Type = String, Dynamic = True, Default = \"If you choose \'OK\'\x2C the existing image will be replaced with the new image.", Scope = Private		#Tag Instance, Platform = Any, Language = en, Definition  = \"If you choose \'OK\'\x2C the existing image will be replaced with the new image."		#Tag Instance, Platform = Any, Language = nl, Definition  = \"Als je \'OK\' kiest\x2C dan wordt het bestaande plaatje vervangen met het nieuwe plaatje."	#tag EndConstant	#tag Constant, Name = msgMessage, Type = String, Dynamic = True, Default = \" image already exists\x2C do you want to replace the existing image\?", Scope = Private		#Tag Instance, Platform = Any, Language = en, Definition  = \" image already exists\x2C do you want to replace the existing image\?"		#Tag Instance, Platform = Any, Language = nl, Definition  = \" plaatje bestaat al\x2C wil je het bestaande plaatje vervangen\?"	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleBuffer"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Mode"			Group="Behavior"			InitialValue="Poster"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="PreviewArt"			Group="Behavior"			Type="Picture"		#tag EndViewProperty		#tag ViewProperty			Name="ScaledPic"			Group="Behavior"			Type="Picture"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass