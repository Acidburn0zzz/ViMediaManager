#tag ClassProtected Class ListMoviesInherits Listbox	#tag Event		Function CellBackgroundPaint(g As Graphics, row As Integer, column As Integer) As Boolean		  'If NOT me.Enabled Then Return False		  		  Dim Ratio, EndRatio as Double		  Dim StartColor, EndColor, TopColor, BorderTopColor, BorderBottomColor as Color		  		  'Dim RowStartColor, RowEndColor as Color		  'If self.Active then RowStartColor = RGB(242, 248, 254) else RowStartColor = RGB(250, 250, 250)		  'If self.Active then RowEndColor   = RGB(222, 228, 234) else RowEndColor   = RGB(237, 237, 237)		  '		  'For i as Integer = 0 to g.Height		  'Ratio = ( ( g.Height - i ) / g.Height )		  'EndRatio = ( i / g.Height )		  'g.ForeColor = RGB( _		  'RowEndColor.Red   * EndRatio + RowStartColor.Red   * Ratio, _		  'RowEndColor.Green * EndRatio + RowStartColor.Green * Ratio, _		  'RowEndColor.Blue  * EndRatio + RowStartColor.Blue  * Ratio )		  'g.DrawLine 0, i, g.Width, i		  'Next		  		  		  // Colors		  If NOT self.Active or NOT me.Enabled then		    g.ForeColor = RGB(247, 247, 247)		    If row <= ( ListCount - 1 ) and _		      Cell( row, 4 ) = "True" Then		      g.ForeColor = RGB(277, 237, 237)		    End If		    		    StartColor        = RGB(186, 197, 222)		    EndColor          = RGB(153, 168, 200)		    TopColor          = RGB(193, 203, 225)		    BorderTopColor    = RGB(185, 196, 216)		    BorderBottomColor = RGB(144, 158, 188)		    		  ElseIf row <= ( ListCount - 1 ) And Cell( row, 4 ) = "True" Then		    g.ForeColor = RGB(257, 217, 217)		    		    StartColor        = RGB(206, 177, 202)		    EndColor          = RGB(173, 148, 180)		    TopColor          = RGB(213, 183, 205)		    BorderTopColor    = RGB(205, 176, 196)		    BorderBottomColor = RGB(164, 138, 168)		    		  Else		    'g.ForeColor = RGB(222, 228, 234) // Mine		    g.ForeColor = rgb(232, 232, 232) // Screeny		    		    StartColor        = RGB(115, 176, 227)		    EndColor          = RGB( 71, 131, 208)		    TopColor          = RGB(123, 184, 233)		    BorderTopColor    = RGB(104, 162, 221)		    BorderBottomColor = RGB( 66, 119, 193)		  End If		  		  'If NOT Me.ListIndex = row then		  g.FillRect 0, 0, g.Width, g.Height		  		  		  If Row * g.Height < Me.LastIndex * g.Height Then		    		    g.ForeColor = RGB(255, 255, 255)		    g.DrawLine 0, 0, g.Width, 0		    		    If Self.Active Then g.ForeColor = RGB(200, 200, 200) Else g.ForeColor = RGB( 220, 220, 220 )		    g.DrawLine 0, g.Height - 1, g.Width, g.Height - 1		  ElseIf Row * g.Height = Me.LastIndex * g.Height Then		    		    g.ForeColor = RGB(255, 255, 255)		    g.DrawLine 0, 0, g.Width, 0		    g.DrawLine 0, g.Height - 1, g.Width, g.Height - 1		    		    If Self.Active Then g.ForeColor = RGB(200, 200, 200) Else g.ForeColor = RGB( 220, 220, 220 )		    g.DrawLine 0, g.Height - 2, g.Width, g.Height - 2		  End If		  		  // Selection		  If NOT Me.Selected(row) then Return False		  		  'For i as Integer = 0 to g.Height		  'Ratio = ( ( g.Height - i ) / g.Height )		  'EndRatio = ( i / g.Height )		  'g.ForeColor = RGB( _		  'EndColor.Red   * EndRatio + StartColor.Red   * Ratio, _		  'EndColor.Green * EndRatio + StartColor.Green * Ratio, _		  'EndColor.Blue  * EndRatio + StartColor.Blue  * Ratio )		  'g.DrawLine 0, i, g.Width, i		  'Next		  g.DrawGradient StartColor, EndColor, 0, 0, g.Width, g.Height		  		  g.ForeColor = TopColor		  g.DrawLine 0, 1, g.Width, 1		  		  g.ForeColor = BorderTopColor		  g.DrawLine 0, 0, g.Width, 0		  		  g.ForeColor = BorderBottomColor		  g.DrawLine 0, g.Height -1, g.Width, g.Height -1		  		  Return True		End Function	#tag EndEvent	#tag Event		Function CellTextPaint(g As Graphics, row As Integer, column As Integer, x as Integer, y as Integer) As Boolean		  'If NOT me.Enabled Then Return False		  		  // g.Bold = True		  If me.ListIndex = row then		    		    If NOT me.Active or NOT me.Enabled then		      g.ForeColor = RGB(114, 114, 114)		    Else		      g.ForeColor = RGB( 51,  84, 133)		    End If		    g.Bold = True		    g.DrawString cell( row, column ), 34, 4 + g.TextSize, me.Width - 85, True		    		    g.ForeColor = RGB(255, 255, 255)		  Else		    g.ForeColor = RGB(255, 255, 255)		    g.DrawString cell( row, column ), 34, 4 + g.TextSize, me.Width - 85, True		    		    g.ForeColor = RGB(0, 0, 0)		  End If		  g.DrawString cell( row, column ), 34, 3 + g.TextSize, me.Width - 85, True		  		  		  // Left Poster icon		  Dim posteritem as FolderItem		  If Cell( Row, 2 ) <> "" And Prefs.boolForKey("ShowPostersInList") Then		    posteritem = Preferences.fAppSupport.Child( "Cache" ).Child( Cell( row, 2 ) + ".movie.poster.jpg" )		    If posteritem <> Nil And posteritem.Exists Then		      'Dim PosterPic as Picture = ScaleImage( Picture.Open( posteritem ), 32, 32, False, False, True )		      'g.DrawPicture PosterPic, 5, ( DefaultRowHeight / 2 ) - ( PosterPic.Height / 2 )		      'g.DrawRect 4, ( DefaultRowHeight / 2 ) - ( PosterPic.Height / 2 ) - 1, PosterPic.Width + 2, PosterPic.Height + 2		      		      Dim PosterPic as Picture = Picture.Open( posteritem )		      If PosterPic <> Nil Then		        Dim Factor as Double = 32 / PosterPic.Height		        g.DrawPicture PosterPic, 5, ( DefaultRowHeight / 2 ) - ( 32 / 2 ), PosterPic.Width * Factor, PosterPic.Height * Factor, 0, 0, PosterPic.Width, PosterPic.Height		        g.DrawRect 4, ( DefaultRowHeight / 2 ) - ( 32 / 2 ) - 1, ( PosterPic.Width * Factor ) + 2, ( PosterPic.Height * Factor ) + 2		      End If		      		    End If		  End If		  		  // Left Status Icon		  If ( posteritem = Nil Or NOT posteritem.Exists ) Or NOT Prefs.boolForKey("ShowPostersInList") Then		    If Cell( row, 4 ) = "False" then		      g.DrawPicture videounwatched, 0, ( DefaultRowHeight / 2 ) - ( videounwatched.Height / 2 )		    ElseIf Cell( row, 4 ) = "True" then		      g.DrawPicture videowatched,   0, ( DefaultRowHeight / 2 ) - ( videowatched.Height / 2 )		    Else // No Status i.e. no NFO available.		      g.DrawPicture videoclean, 0, ( DefaultRowHeight / 2 ) - ( videoclean.Height / 2 )		    End If		  End If		  		  		  // Right Rating		  If Cell( row, 7 ) <> "" and Val( Cell( row, 7 ) ) > 0 then		    If ListIndex = Row then		      g.ForeColor = &cFFFFFF		    ElseIf ListIndex <> Row and NOT me.Active then		      g.ForeColor = &cA5A5A5		    Else		      g.ForeColor = &c98A5B3		    End If		    		    Dim Rate as String = Cell( row, 7 )		    If Rate.left(1) = "0" Then Rate = Rate.Right( Rate.Len - 1 )		    		    g.FillRoundRect g.Width - g.StringWidth( Rate ) - 15, 4, g.StringWidth( Rate ) + 10, g.TextSize + 3, 15, 15		    		    If ListIndex = Row then g.ForeColor = &c98A5B3 Else g.ForeColor = &cFFFFFF		    g.Bold = True		    g.DrawString Rate, g.Width - g.StringWidth( Rate ) - 10, 4 + g.TextSize		  End If		  		  // Minicons		  Dim i, PicBottom as Integer = 0		  Dim pic as Picture		  PicBottom = DefaultRowHeight - 5 - 16		  		  // Poster		  If Prefs.boolForKey("AutoDownloadPoster") And Prefs.boolForKey("ShowMiniIcon-Poster") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = posterinactive2x Else Pic = posterinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = posteractive2x Else Pic = posteractive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "Poster" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Fanart		  If Prefs.boolForKey("AutoDownloadFanart") And Prefs.boolForKey("ShowMiniIcon-Backdrop") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = fanartinactive2x Else Pic = fanartinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = fanartactive2x Else Pic = fanartactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "Fanart" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Extra Fanart		  If Prefs.boolForKey("AutoDownloadExtraFanart") And Prefs.boolForKey("ShowMiniIcon-ExtraBackdrops") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = extrafanartinactive2x Else Pic = extrafanartinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = extrafanartactive2x Else Pic = extrafanartactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "extraf" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Extra Thumbs		  If Prefs.boolForKey("AutoDownloadExtraThumbs") And Prefs.boolForKey("ShowMiniIcon-ExtraThumbs") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = extrathumbsinactive2x Else Pic = extrathumbsinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = extrathumbsactive2x Else Pic = extrathumbsactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "extrat" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // DiscArt		  If Prefs.boolForKey("AutoDownloadDiscArt") And Prefs.boolForKey("ShowMiniIcon-DiscArt") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = discartinactive2x Else Pic = discartinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = discartactive2x Else Pic = discartactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "disc" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Logo		  If Prefs.boolForKey("AutoDownloadLogo") And Prefs.boolForKey("ShowMiniIcon-Logo") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = logoinactive2x Else Pic = logoinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = logoactive2x Else Pic = logoactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "Logo" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // ClearArt		  If Prefs.boolForKey("AutoDownloadClearArt") And Prefs.boolForKey("ShowMiniIcon-ClearArt") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = clearartinactive2x Else Pic = clearartinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = clearartactive2x Else Pic = clearartactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "ClearArt" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Banner		  If Prefs.boolForKey("AutoDownloadBanner") And Prefs.boolForKey("ShowMiniIcon-Banner") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = bannerinactive2x Else Pic = bannerinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = banneractive2x Else Pic = banneractive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "Banner" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Landscape		  If Prefs.boolForKey("AutoDownloadThumb") And Prefs.boolForKey("ShowMiniIcon-Thumb") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = landscapeinactive2x Else Pic = landscapeinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = landscapeactive2x Else Pic = landscapeactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "Landscape" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Trailer		  If Prefs.boolForKey("AutoDownloadTrailer") Or Prefs.boolForKey("ShowMiniIcon-Trailer") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = trailerinactive2x Else Pic = trailerinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = traileractive2x Else Pic = traileractive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "Trailer" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, pic.Width, pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  // Subtitles		  If Prefs.boolForKey("ShowMiniIcon-Subtitles") Then		    		    // Unselected		    If App.ScalingFactor = 2 Then Pic = subtitlesinactive2x Else Pic = subtitlesinactive		    // Selected		    If ListIndex = Row Then		      If App.ScalingFactor = 2 Then Pic = subtitlesactive2x Else Pic = subtitlesactive		    End If		    // Missing		    If Cell( row, 8 ).InStr( 0, "Subtitle" ) = 0 then g.Transparency = 50		    		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    g.Transparency = 0		    i = i + 1		  End If		  		  		  // Resolution		  // DVD		  If NOT Prefs.boolForKey("ShowMiniIcon-Resolution") Then Return True		  		  If Cell( row, 6 ) = "DVD" Then		    If App.ScalingFactor = 2 Then		      If ListIndex = row then pic = DVDactive2x else pic = DVDinactive2x		    Else		      If ListIndex = row then pic = DVDactive else pic = DVDinactive		    End If		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    i = i + 1		  End If		  		  // BluRay		  If Cell( row, 6 ) = "Bluray" Then		    If App.ScalingFactor = 2 Then		      If ListIndex = row then pic = bluactive2x else pic = bluinactive2x		    Else		      If ListIndex = row then pic = bluactive else pic = bluinactive		    End If		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    i = i + 1		  End If		  		  // Def 720p		  If Cell( row, 6 ) = "720p" then		    If App.ScalingFactor = 2 Then		      If ListIndex = row then pic = def720pactive2x else pic = def720pinactive2x		    Else		      If ListIndex = row then pic = def720pactive else pic = def720pinactive		    End If		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    i = i + 1		  End If		  		  // Def 1080p		  If Cell( row, 6 ) = "1080p" then		    If App.ScalingFactor = 2 Then		      If ListIndex = row then pic = def1080pactive2x else pic = def1080pinactive2x		    Else		      If ListIndex = row then pic = def1080pactive else pic = def1080pinactive		    End If		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    i = i + 1		  End If		  		  // Def HD		  If Cell( row, 6 ) = "HD" then		    If App.ScalingFactor = 2 Then		      If ListIndex = row then pic = defHDactive2x else pic = defHDinactive2x		    Else		      If ListIndex = row then pic = defHDactive else pic = defHDinactive		    End If		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    i = i + 1		  End If		  		  // Def SD		  If Cell( row, 6 ) = "SD" then		    If App.ScalingFactor = 2 Then		      If ListIndex = row then pic = defSDactive2x else pic = defSDinactive2x		    Else		      If ListIndex = row then pic = defSDactive else pic = defSDinactive		    End If		    g.DrawPicture pic, 34 + ( i * 19 ) + ( 4 * i ) - 4, PicBottom, 20, 20, 0, 0, Pic.Width, Pic.Height		    i = i + 1		  End If		  		  Return True		End Function	#tag EndEvent	#tag Event		Sub Close()		  If Trim( wndMain.ccSearchBoxMovies.edtSearch.Text ) <> "" Then		    wndMain.ccSearchBoxMovies.edtSearch.Text = " "		    wndMain.ccSearchBoxMovies.edtSearch.Text = ""		    SaveToDB		  End If		End Sub	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  // Let the listbox handle up/down arrows and tab keys		  If Keyboard.AsyncKeyDown(&h7D) Or Keyboard.AsyncKeyDown(&h7E) Or Keyboard.AsyncKeyDown(&h30) Then Return False		  		  // Cmd + Del:		  If Keyboard.CommandKey and Keyboard.AsyncKeyDown(&h33) Then		    DeleteItem		    Return False		  End If		  		  // Cmd + Enter		  If Keyboard.CommandKey And Keyboard.AsyncKeyDown( 36 ) Then		    If Cell( ListIndex, 2 ) <> "" Then CommonCore.EditInfo Else CommonCore.FetchMetadata		    Return False		  End If		  		  If ( Ticks - LastKeyPressedAt < 30 ) then LastKeyPressed = LastKeyPressed + Key else LastKeyPressed = Key		  LastKeyPressedAt = Ticks		  For i as Integer = 0 to ListCount - 1		    If Lowercase( Left( List(i).DeArticulator, Len( LastKeyPressed ) ) ) = Lowercase( LastKeyPressed ) then		      ListIndex = i		      Exit		    End If		  Next		  		  Return False		End Function	#tag EndEvent	#tag Event		Sub Open()		  LoadList		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Sub AddItem(f as FolderItem)		  #pragma DisableBackgroundTasks		  		  // Reset progress at the first folder.		  If f = Nil or NOT f.Exists then Return		  If MovieFolders(0).Name = f.Name Then dlgProgress.Reset		  		  AddRow f.Name, f.AbsolutePath		  		  // Dim MovieName as String = FindMovieName( f, True, False )		  // If MovieName = "" then MovieName = f.Name		  // AddRow MovieName, f.AbsolutePath		  		  // Cound Progress		  dlgProgress.Add( Loc.kReadingInfo + ":", f.Name, 1, MovieFolders.Ubound )		  		  'If NOT app.DebugMode then		  MovieAttr.NFORead f		  		  // 0. Movie Title		  Dim MovieTitle as String		  If MovieAttr.Title <> "" then		    MovieTitle = MovieAttr.Title		    If MovieAttr.DateYear > 0 then MovieTitle = MovieAttr.Title + " (" + str( MovieAttr.DateYear ) + ")"		    Cell( LastIndex, 0 ) = MovieTitle		  End If		  		  // 1. Absolute Path		  // Already there.		  		  // 2. MovieDB ID		  If MovieAttr.ID_IMDB <> "" then		    Cell( LastIndex, 2 ) = MovieAttr.ID_IMDB		  ElseIf MovieAttr.ID_TMDB <> "" then		    Cell( LastIndex, 2 ) = MovieAttr.ID_TMDB		  End If		  		  // 3. Sort Title		  If MovieAttr.TitleSort <> "" then		    Cell( LastIndex, 3 ) = MovieAttr.TitleSort		  ElseIf MovieAttr.Title <> "" then		    Cell( LastIndex, 3 ) = Articulator( MovieAttr.Title )		    If MovieAttr.DateYear > -1 then Cell( LastIndex, 3 ) = Cell( LastIndex, 3 ) + " (" + str( MovieAttr.DateYear ) + ")"		  Else		    Cell( LastIndex, 3 ) = Articulator( Cell( LastIndex, 0 ) )		  End If		  		  // 4. Status Watched		  If FindNFOFile( f ) <> Nil then Cell( LastIndex, 4 ) = str( MovieAttr.StatusWatched ) else Cell( LastIndex, 4 ) = ""		  		  // 5. Date Premiered		  If MovieAttr.DatePremiered <> "" Then		    Cell( LastIndex, 5 ) = MovieAttr.DatePremiered		  ElseIf ( MovieAttr.DatePremiered = "N/A" Or MovieAttr.DatePremiered = "" ) and MovieAttr.DateYear > 0 Then		    Cell( LastIndex, 5 ) = str(MovieAttr.DateYear)		  End If		  		  // 6. Definition/Quality		  Dim MovieFile as FolderItem = FindMovieItem( f )		  If MovieAttr.InfoVideoHeight > -1 Or MovieFile <> Nil Then		    		    If MovieFile.Name = "VIDEO_TS" Then		      Cell( LastIndex, 6 ) = "DVD"		    ElseIf MovieFile.Name = "BDMV" Then		      Cell( LastIndex, 6 ) = "BluRay"		    ElseIf MovieAttr.InfoVideoHeight >= 1080 Or MovieAttr.InfoVideoWidth >= 1920 Then		      Cell( LastIndex, 6 ) = "1080p"		    ElseIf ( MovieAttr.InfoVideoHeight < 1080 And MovieAttr.InfoVideoHeight >= 720 ) Or ( MovieAttr.InfoVideoWidth < 1920 And MovieAttr.InfoVideoWidth >= 1280 ) Then		      Cell( LastIndex, 6 ) = "720p"		    ElseIf ( MovieAttr.InfoVideoHeight < 720 And MovieAttr.InfoVideoHeight > 0 ) And ( MovieAttr.InfoVideoWidth < 1280 And MovieAttr.InfoVideoWidth > 0 ) Then		      Cell( LastIndex, 6 ) = "SD"		    Else		      Cell( LastIndex, 6 ) = "N/A"		      		    End If		    		  End If		  		  // 7. Rating		  If MovieAttr.Rating > -1 then		    Dim rate as String = Str( MovieAttr.Rating )		    If rate.Len = 1 Then rate = rate + ".0"		    If rate.Len = 3 Then rate = "0" + rate		    		    Cell( LastIndex, 7 ) = rate		  End If		  		  // 8. FilesAvailable		  If FindImagePoster( f ) <> Nil Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "Poster|"		  If FindImageFanart( f ) <> Nil Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "Fanart|"		  If FindTrailerItem( f ) <> Nil Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "Trailer|"		  If FindSubtitles( f )   <> Nil Or MovieAttr.InfoSubtitleLanguage.Ubound > -1 Then _		  Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "Subtitle|"		  		  If FindImageBanner( f ) <> Nil       Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "Banner|"		  If f.Child( "clearart.png" ).Exists  Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "ClearArt|"		  If f.Child( "disc.png" ).Exists      Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "DiscArt|"		  If f.Child( "logo.png" ).Exists      Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "Logo|"		  If f.Child( "landscape.jpg" ).Exists Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "Landscape|"		  If f.Child( "extrathumbs" ).Exists   Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "ExtraT|"		  If f.Child( "extrafanart" ).Exists   Then Cell( LastIndex, 8 ) = Cell( LastIndex, 8 ) + "ExtraF|"		  		  // 9. Set		  If MovieAttr.SetOrder > -1 Then Cell( LastIndex, 9 ) = MovieAttr.Set + "" + str(MovieAttr.SetOrder) Else Cell( LastIndex, 9 ) = MovieAttr.Set		  		  // 10. Studio		  If MovieAttr.Studios.Ubound > -1 Then Cell( LastIndex, 10 ) = MovieAttr.Studios(0)		  		  // 11. Size		  Dim s() as FolderItem = FindMovieItems( f )		  If s.Ubound > -1 Then		    Dim TotalSize as String		    For i as Integer = 0 to s.Ubound		      If s(i).Name = "VIDEO_TS" Then		        TotalSize = "4630"		      ElseIf s(i).Name = "BDMV" Then		        TotalSize = "25000"		      Else		        TotalSize = Str( Val( TotalSize ) + ( s(i).Length / 1000 / 1000 ) )		      End If		    Next		    		    If TotalSize.NthField(".",1).Len = 2 Then TotalSize = "000" + TotalSize		    If TotalSize.NthField(".",1).Len = 3 Then TotalSize = "00"  + TotalSize		    If TotalSize.NthField(".",1).Len = 4 Then TotalSize = "0"   + TotalSize		    		    Cell( LastIndex, 11 ) = Str( TotalSize )		  End If		  		  // 12. Duration		  If MovieAttr.InfoVideoRuntime <> "" Then		    Dim t as String = MovieAttr.InfoVideoRuntime		    If t.len = 1 Then t = "000" + t		    If t.Len = 2 Then t = "00" + t		    If t.len = 3 Then t = "0" + t		    		    Cell( LastIndex, 12 ) = t		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ConstructMountMenu() As MenuItem		  Dim base as new MenuItem ( "Filter Shares" )		  		  		  Dim miAll as New MenuItem ( "All" )		  Dim miSeperator as New MenuItem ( "-" )		  		  miAll.Name = "Share:All"		  'miAll.Checked = ( FilterSelection = "All" )		  		  base.Append miAll		  base.Append miSeperator		  		  Dim Dict as Dictionary = Prefs.dictionaryForKey("MoviePaths")		  If Dict.Count <= 1 Then Return Nil		  		  For Each Key as Variant in Dict.Keys		    Dim ShareName as String = Trim( Dict.Value( Key ) )		    Dim SharePath as String = Key		    Dim tpm as New MenuItem ( ShareName )		    tpm.Name = "Share:" + SharePath		    'tpm.Checked = ( FilterSelection = "Share:" + SharePath )		    base.Append tpm		  Next		  		  If Dict.Count > 1 Then Return base Else Return Nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub CreateList(Update as Boolean = True)		  #pragma DisableBackgroundTasks		  Dim f as FolderItem = SpecialFolder.ApplicationData.Child("ViMediaManager")		  If f.Child("MovieDB.xml").Exists Then f.Child("MovieDB.xml").Delete		  		  Dim Dict as Dictionary = Prefs.dictionaryForKey("MoviePaths")		  Dim Paths() as FolderItem		  		  If Dict = Nil Then		    Me.DeleteAllRows		    Return		  End If		  		  For Each Key as Variant in Dict.Keys		    'Paths.Append GetFolderItem( Trim( Dict.Value( Key ) ) )		    Paths.Append GetFolderItem( Key )		  Next		  		  ReDim MovieFolders(-1)		  lindex = ListIndex		  ListIndex = -1		  If NOT Update Then Me.DeleteAllRows		  If Paths.Ubound = -1 then		    Me.DeleteAllRows		    Return		  End If		  		  		  // Scan available directories for movie files.		  Dim ItemCount as Integer		  For i as Integer = 0 to Paths.Ubound		    If Paths(i) <> Nil and Paths(i).Exists then		      ItemCount = Paths(i).Count		      For n as Integer = 1 to ItemCount		        ScanDir Paths(i).Item(n)		      Next		    End If		    ItemCount = -1		  Next		  		  // If update, remove folders that no longer exist.		  If Update Then		    For i as Integer = ListCount - 1 DownTo 0		      Dim listfolder as FolderItem = GetFolderItem( Cell( i, 1 ) )		      If listfolder = Nil OR NOT listfolder.Exists Then RemoveRow i		    Next		  End If		  		  // If update, add folders that aren't in the list yet, otherwise add every folder.		  For i as Integer = 0 to MovieFolders.Ubound		    		    If Update Then		      Dim b as Boolean = False		      For n as Integer = 0 to ListCount - 1		        If cell( n, 1 ) = MovieFolders(i).AbsolutePath Then		          b = True		          Exit		        End If		      Next		      		      If NOT b Then AddItem MovieFolders(i)		      		    Else		      AddItem MovieFolders(i)		    End If		    		  Next		  		  SaveToDB		  ReDim MovieFolders(-1)		  SortList		  wndMain.lstSearch.CopyFrom Me		  		  wndMain.ActBar( wndMain.ppMain.Value ).TextValue( Str( Me.ListCount ) + " " + Loc.Movies )		  'Return		  		  'Listindex		  If lindex > -1 and lindex > ListCount - 1 then		    ListIndex = ListCount - 1		  ElseIf lindex > -1 then		    ListIndex = lindex		  Else		    ListIndex = 0		  End If		  lindex = -1		  		  Dim MovieParent as FolderItem = GetFolderItem( Cell( ListIndex, 1 ) )		  If MovieParent <> Nil And MovieParent.Exists Then		    MovieAttr.NFORead( MovieParent )		    MovieAttr.LoadImages( MovieParent )		    wndMain.cvsMovieDetails.Invalidate		  End If		  		  Return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DeleteItem()		  If ListIndex = -1 then Return		  		  Dim LastIndex as Integer = ListIndex		  Dim Path as String = Cell( ListIndex, 1 )		  Dim f as FolderItem = GetFolderItem( Path )		  		  If f <> Nil And f.Exists Then		    		    Dim strRemoveItem   as String = Loc.msgRemoveItem.ReplaceAll( "%S", Cell( ListIndex, 0 ) ).ReplaceAll( "%F", f.Parent.Name )		    Dim strMovedToTrash as String = Loc.msgWillBeMovedToTrash.ReplaceAll( "%F", f.Parent.Name )		    		    If MsgDlg( Parent.Window, 1, strRemoveItem, strMovedToTrash, Loc.btnMoveToTrash, Loc.btnKeepIt ) = 2 Then Return		    		    // Update the 'search listbox'.		    'For i as Integer = 0 to wndMain.lstSearchMovies.ListCount - 1		    'If wndMain.lstSearchMovies.Cell( i, 1 ) = Path Then wndMain.lstSearchMovies.RemoveRow(i)		    'Next		    		    f.MoveFileToTrash( False )		    CacheImageDelete( MovieAttr.ID_IMDB )		    RemoveItem		    		    wndMain.lstSearch.CopyFrom( Me ) // Update the 'search listbox'.		  End If		  		  If LastIndex >= ListCount Then ListIndex = ListCount - 1 Else ListIndex = LastIndex		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub FilterShares(SharePath as String)		  		  // UNUSED		  		  #If TargetLinux Then		    		    Dim LstBox as Listbox = wndMain.lstSearch		    		    // 0, 2, 5, 9, 10		    Me.DeleteAllRows		    'FilterSelection = "Share:" + SharePath		    		    If SharePath <> "" and SharePath <> "All" Then		      		      Me.ListIndex = -1		      		      For i as Integer = 0 to LstBox.ListCount - 1		        Dim s as String = LstBox.Cell(i,1)		        If s.InStr( 0, SharePath ) > 0 Then		          'If s.Left( SharePath.Len ) = SharePath Then		          Me.AddRow LstBox.Cell(i,0), LstBox.Cell(i,1), LstBox.Cell(i,2), LstBox.Cell(i,3), LstBox.Cell(i,4), LstBox.Cell(i,5), LstBox.Cell(i,6), LstBox.Cell(i,7), LstBox.Cell(i,8), LstBox.Cell(i,9), LstBox.Cell(i,10), LstBox.Cell(i,11)		          'End If		        End If		      Next		      		    Else		      		      For i as Integer = 0 to LstBox.ListCount - 1		        Me.AddRow LstBox.Cell(i,0), LstBox.Cell(i,1), LstBox.Cell(i,2), LstBox.Cell(i,3), LstBox.Cell(i,4), LstBox.Cell(i,5), LstBox.Cell(i,6), LstBox.Cell(i,7), LstBox.Cell(i,8), LstBox.Cell(i,9), LstBox.Cell(i,10), LstBox.Cell(i,11)		      Next		      		      me.ListIndex = 0		      		    End If		    		    wndMain.ActBar( wndMain.ppMain.Value ).Text = Str( wndMain.lstMovies.ListCount ) + " " + Loc.Movies		    wndMain.ActBar( wndMain.ppMain.Value ).Refresh		    		  #EndIf		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub LoadList()		  #pragma DisableBackgroundTasks		  		  Dim AppSupport as FolderItem = SpecialFolder.ApplicationData.Child("ViMediaManager")		  If AppSupport.Child("MovieDB.xml") <> Nil and AppSupport.Child("MovieDB.xml").Exists then		    		    Dim Xml as new XmlDocument		    Dim xRoot, xNode, xItem as XmlNode		    Dim fi as FolderItem		    Xml.PreserveWhitespace = False		    		    Dim TextIn as TextInputStream		    TextIn = TextIn.Open( SpecialFolder.ApplicationData.Child("ViMediaManager").Child("MovieDB.xml") )		    Dim Content as String = TextIn.ReadAll		    TextIn.Close		    		    If Content.Left(5) = "<?xml" then Xml.LoadXml( content ) Else Return		    xRoot = Xml.Child(0)		    		    DeleteAllRows		    		    For i as Integer = 0 to xRoot.ChildCount - 1		      xNode = xRoot.Child(i)		      		      AddRow "Row"		      		      If xNode.FirstChild <> Nil Then		        		        For n as Integer = 0 to xNode.ChildCount - 1		          xItem = xNode.Child(n)		          		          If xItem.FirstChild <> Nil then		            		            Select case xItem.Name		              		            case "Title"		              Cell( LastIndex, 0 ) = xItem.FirstChild.Value		            case "Path"		              Cell( LastIndex, 1 ) = xItem.FirstChild.Value		            case "DBID"		              Cell( LastIndex, 2 ) = xItem.FirstChild.Value		            case "SortTitle"		              Cell( LastIndex, 3 ) = xItem.FirstChild.Value		            case "Status"		              Cell( LastIndex, 4 ) = xItem.FirstChild.Value		            case "Premiere"		              Cell( LastIndex, 5 ) = xItem.FirstChild.Value		            case "Quality"		              Cell( LastIndex, 6 ) = xItem.FirstChild.Value		            case "Rating"		              Cell( LastIndex, 7 ) = xItem.FirstChild.Value		            case "FilesAvailable"		              Cell( LastIndex, 8 ) = xItem.FirstChild.Value		            case "Set"		              Cell( LastIndex, 9 ) = xItem.FirstChild.Value		            case "Studio"		              Cell( LastIndex, 10 ) = xItem.FirstChild.Value		            case "Size"		              Cell( LastIndex, 11 ) = xItem.FirstChild.Value		            case "Runtime"		              Cell( LastIndex, 12 ) = xItem.FirstChild.Value		              		            end Select		            		          End If		          		        Next		        		      End If		      		      // Remove row if the folder is not available.		      Dim f as FolderItem = GetFolderItem( Cell( LastIndex, 1 ) )		      If f = Nil or NOT f.Exists Then RemoveRow( LastIndex )		      		    Next		    		    'SortList		  Else		    CreateList		  End If		  		  wndMain.ActBar(0).Text = str( ListCount ) + " " + Loc.Movies		  SortList		  If ListIndex <> 0 then ListIndex = 0		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RemoveItem()		  RemoveRow( ListIndex )		  SaveToDB		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub SaveToDB()		  #pragma DisableBackgroundTasks		  		  Dim Xml as new XmlDocument		  Dim xRoot, xNode as XmlNode		  Xml.PreserveWhitespace = True		  		  'SortList(0)		  		  xRoot = Xml.AppendChild( Xml.CreateElement( "list" ) )		  		  For i as Integer = 0 to me.ListCount - 1		    xNode = xRoot.AppendNewChild("movie")		    xNode.AppendSimpleChild "Title",          Cell( i, 0 )		    xNode.AppendSimpleChild "Path",           Cell( i, 1 )		    xNode.AppendSimpleChild "DBID",           Cell( i, 2 )		    xNode.AppendSimpleChild "SortTitle",      Cell( i, 3 )		    xNode.AppendSimpleChild "Status",         Cell( i, 4 )		    xNode.AppendSimpleChild "Premiere",       Cell( i, 5 )		    xNode.AppendSimpleChild "Quality",        Cell( i, 6 )		    xNode.AppendSimpleChild "Rating",         Cell( i, 7 )		    xNode.AppendSimpleChild "FilesAvailable", Cell( i, 8 )		    xNode.AppendSimpleChild "Set",            Cell( i, 9 )		    xNode.AppendSimpleChild "Studio",         Cell( i, 10 )		    xNode.AppendSimpleChild "Size",           Cell( i, 11 )		    xNode.AppendSimpleChild "Runtime",        Cell( i, 12 )		  Next		  		  'xRoot.Indent(0)		  Xml.LoadXml( Xml.ToString )'.IndentRoot("list") )		  		  If SpecialFolder.ApplicationData.Child("ViMediaManager").Exists then		    Xml.SaveXml( SpecialFolder.ApplicationData.Child("ViMediaManager").Child("MovieDB.xml") )		  End If		  		  'SortList		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub ScanDir(Dir as FolderItem)		  #pragma DisableBackgroundTasks		  		  If Dir = Nil or NOT Dir.Exists then Return // Saveguarding		  		  If Dir.Visible and Dir.Directory then		    Dim MovieFile as FolderItem = FindMovieItem( Dir )		    If MovieFile <> Nil Then		      dlgProgress.Add("Scanning:" + ":", dir.Name )		      MovieFolders.Append MovieFile.Parent		    End If		    		    Dim ItemCount as Integer = Dir.Count		    For i as Integer = 1 to ItemCount		      If Dir.Item(i).Name <> "BDMV" And Dir.Item(i).Name <> "VIDEO_TS" Then ScanDir Dir.Item(i)		    Next		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SearchList(SearchTerm as String)		  wndMain.lstSearch.Search( SearchTerm, Me )		  		  'Dim LstBox as Listbox = wndMain.lstSearch		  '		  '// 0, 2, 5, 9, 10		  'Me.DeleteAllRows		  '		  'If SearchTerm <> "" Then		  '		  'Me.ListIndex = -1		  '		  'For i as Integer = 0 to LstBox.ListCount - 1		  'Dim s as String = LstBox.Cell(i,0) + " " + LstBox.Cell(i,2) + " " + LstBox.Cell(i,5) + " " + LstBox.Cell(i, 9) + " " + LstBox.Cell(i, 10)		  'If s.InStr( 0, SearchTerm ) > 0 Then		  'Me.AddRow LstBox.Cell(i,0), LstBox.Cell(i,1), LstBox.Cell(i,2), LstBox.Cell(i,3), LstBox.Cell(i,4), LstBox.Cell(i,5), LstBox.Cell(i,6), LstBox.Cell(i,7), LstBox.Cell(i,8), LstBox.Cell(i,9), LstBox.Cell(i,10), LstBox.Cell(i,11), LstBox.Cell(i,12)		  'End If		  'Next		  '		  'me.ListIndex = 0		  '		  'Else		  '		  'Dim Path as String = Me.Cell( Me.ListIndex, 1 )		  '		  'For i as Integer = 0 to LstBox.ListCount - 1		  'Me.AddRow LstBox.Cell(i,0), LstBox.Cell(i,1), LstBox.Cell(i,2), LstBox.Cell(i,3), LstBox.Cell(i,4), LstBox.Cell(i,5), LstBox.Cell(i,6), LstBox.Cell(i,7), LstBox.Cell(i,8), LstBox.Cell(i,9), LstBox.Cell(i,10), LstBox.Cell(i,11), LstBox.Cell(i,12)		  'Next		  '		  'For i as Integer = 0 to Me.ListCount - 1		  'If Me.Cell(i, 1) = Path Then Me.ListIndex = i		  'Return		  'Next		  '		  'End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SortList(SortColumn as Integer = - 1)		  #pragma DisableBackgroundTasks		  // Title		  'SortedColumn = 0		  'ColumnSortDirection(0) = 1		  'Sort		  		  // Sort Title		  'SortedColumn = 3		  'ColumnSortDirection(3) = 1		  'Sort		  		  'Dim lstBox as Listbox = wndMain.lstSearchMovies		  		  If SortColumn = -1 then SortColumn = Prefs.integerForKey("SortByMovie")		  		  Dim SortDir as Integer = 1		  If Prefs.boolForKey("SortMovieAscending") Then SortDir = -1		  		  Select Case SortColumn		    		  Case 0 // Movie Title		    SortedColumn = 0		    ColumnSortDirection(0) = SortDir		    		    'lstBox.SortedColumn = 0		    'lstBox.ColumnSortDirection(0) = SortDir		    		  Case 1 // Movie Sort Title		    SortedColumn = 3		    ColumnSortDirection(3) = SortDir		    		    'lstBox.SortedColumn = 3		    'lstBox.ColumnSortDirection(3) = SortDir		    		  Case 2 // Path		    SortedColumn = 1		    ColumnSortDirection(1) = SortDir		    		    'lstBox.SortedColumn = 1		    'lstBox.ColumnSortDirection(1) = SortDir		    		  Case 3 // Watched Status		    SortedColumn = 4		    ColumnSortDirection(4) = SortDir		    		    'lstBox.SortedColumn = 4		    'lstBox.ColumnSortDirection(4) = SortDir		    		  Case 4 // Premiere Date		    If SortDir = -1 Then SortDir = 1 Else SortDir = -1 // Reverse for numeric		    SortedColumn = 5		    ColumnSortDirection(5) = SortDir		    		    'lstBox.SortedColumn = 5		    'lstBox.ColumnSortDirection(5) = SortDir		    		  Case 5 // Quality		    SortedColumn = 6		    ColumnSortDirection(6) = SortDir		    		    'lstBox.SortedColumn = 6		    'lstBox.ColumnSortDirection(6) = SortDir		    		  Case 6 // Rating		    If SortDir = -1 Then SortDir = 1 Else SortDir = -1 // Reverse for numeric		    SortedColumn = 7		    ColumnSortDirection(7) = SortDir		    		    'lstBox.SortedColumn = 7		    'lstBox.ColumnSortDirection(7) = SortDir		    		  Case 7 // Size		    If SortDir = -1 Then SortDir = 1 Else SortDir = -1 // Reverse for numeric		    SortedColumn = 11		    ColumnSortDirection(11) = SortDir		    		    'lstBox.SortedColumn = 11		    'lstBox.ColumnSortDirection(11) = SortDir		    		  Case 8 // Duration		    If SortDir = -1 Then SortDir = 1 Else SortDir = -1 // Reverse for numeric		    SortedColumn = 12		    ColumnSortDirection(12) = SortDir		    		    'lstBox.SortedColumn = 12		    'lstBox.ColumnSortDirection(12) = SortDir		    		  End Select		  		  If SortColumn > -1 Then		    Sort		    wndMain.lstSearch.CopyFrom( Me )		    'lstBox.Sort		  End If		  		  If Trim( wndMain.ccSearchBoxMovies.edtSearch.Text ) = "" Then		    'wndMain.lstSearchMovies.DeleteAllRows		    'For i as Integer = 0 to ListCount - 1		    'wndMain.lstSearchMovies.AddRow Cell(i, 0), Cell(i, 1), Cell(i, 2), Cell(i, 3), Cell(i, 4), Cell(i, 5), Cell(i, 6), Cell(i, 7), Cell(i, 8), Cell(i, 9), Cell(i, 10), Cell(i, 11), Cell(i, 12)		    'Next		    wndMain.lstSearch.CopyFrom( Me )		  Else		    SaveToDB		  End If		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdateRow(Lindex as Integer = - 1, NewLocation as FolderItem = Nil)		  '#pragma DisableBackgroundTasks		  		  If Lindex = -1 Then Lindex = ListIndex		  Dim f as FolderItem		  If NewLocation = Nil Then		    f = GetFolderItem( Cell( Lindex, 1 ) )		  Else		    f = NewLocation		  End If		  		  		  If f = Nil or NOT f.Exists then Return		  		  MovieAttr.NFORead f		  		  // 0. Movie Title		  Dim MovieTitle as String		  If MovieAttr.Title <> "" then		    MovieTitle = MovieAttr.Title		    If MovieAttr.DateYear > 0 then MovieTitle = MovieAttr.Title + " (" + str( MovieAttr.DateYear ) + ")"		    Cell( Lindex, 0 ) = MovieTitle		  End If		  		  // 1. Absolute Path		  If NewLocation <> Nil And f <> Nil and f.Exists Then Cell( Lindex, 1 ) = f.AbsolutePath		  		  // 2. MovieDB ID		  If MovieAttr.ID_IMDB <> "" Then		    Cell( Lindex, 2 ) = MovieAttr.ID_IMDB		  ElseIf MovieAttr.ID_TMDB <> "" Then		    Cell( Lindex, 2 ) = MovieAttr.ID_TMDB		  End If		  		  // 3. Sort Title		  If MovieAttr.TitleSort <> "" then		    Cell( Lindex, 3 ) = MovieAttr.TitleSort		  ElseIf MovieAttr.Title <> "" then		    Cell( Lindex, 3 ) = Articulator( MovieAttr.Title )		    If MovieAttr.DateYear > 0 then Cell( Lindex, 3 ) = Cell( Lindex, 3 ) + " (" + str( MovieAttr.DateYear ) + ")"		  Else		    Cell( Lindex, 3 ) = Articulator( Cell( Lindex, 0 ) )		  End If		  		  // 4. Status Watched		  If FindNFOFile( f ) <> Nil then Cell( Lindex, 4 ) = str( MovieAttr.StatusWatched ) else Cell( Lindex, 4 ) = ""		  		  // 5. Date Premiered		  If MovieAttr.DatePremiered <> "" then		    Cell( Lindex, 5 ) = MovieAttr.DatePremiered		  ElseIf ( MovieAttr.DatePremiered = "N/A" Or MovieAttr.DatePremiered = "" ) and MovieAttr.DateYear > 0 Then		    Cell( Lindex, 5 ) = str(MovieAttr.DateYear)		  End If		  		  // 6. Definition/Quality		  If MovieAttr.InfoVideoHeight > -1 then		    If MovieAttr.InfoVideoHeight >= 1080 or MovieAttr.InfoVideoWidth >= 1920 then		      Cell( Lindex, 6 ) = "1080p"		    ElseIf ( MovieAttr.InfoVideoHeight < 1080 and MovieAttr.InfoVideoHeight >=  720 ) or _		      ( MovieAttr.InfoVideoWidth  < 1920 and MovieAttr.InfoVideoWidth  >= 1280 ) then		      Cell( Lindex, 6 ) = "720p"		    ElseIf MovieAttr.InfoVideoHeight < 720 and MovieAttr.InfoVideoWidth < 1280 then		      Cell( Lindex, 6 ) = "SD"		    Else		      Cell( Lindex, 6 ) = "N/A"		    End If		    		    If MovieAttr.FolderParent.Child( "VIDEO_TS" ).Exists Then		      Cell( Lindex, 6 ) = "DVD"		    ElseIf MovieAttr.FolderParent.Child( "BDMV" ).Exists Then		      Cell( Lindex, 6 ) = "BluRay"		    End If		    		  End If		  		  // 7. Rating		  If MovieAttr.Rating > -1 Then		    Dim Rate as String = Str( MovieAttr.Rating )		    If Rate.Len = 1 Then Rate = Rate + ".0"		    If Rate.Len = 3 Then Rate = "0" + Rate		    Cell( Lindex, 7 ) = Rate		  End If		  		  // 8. FilesAvailable		  Cell( Lindex, 8 ) = ""		  If FindImagePoster( f ) <> Nil Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "Poster|"		  If FindImageFanart( f ) <> Nil Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "Fanart|"		  If FindTrailerItem( f ) <> Nil Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "Trailer|"		  If FindSubtitles( f )   <> Nil Or MovieAttr.InfoSubtitleLanguage.Ubound > -1 Then _		  Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "Subtitle|"		  		  If FindImageBanner( f ) <> Nil       Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "Banner|"		  If f.Child( "clearart.png" ).Exists  Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "ClearArt|"		  If f.Child( "disc.png" ).Exists      Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "DiscArt|"		  If f.Child( "logo.png" ).Exists      Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "Logo|"		  If f.Child( "landscape.jpg" ).Exists Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "Landscape|"		  If f.Child( "extrathumbs" ).Exists   Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "ExtraT|"		  If f.Child( "extrafanart" ).Exists   Then Cell( Lindex, 8 ) = Cell( Lindex, 8 ) + "ExtraF|"		  		  // 9. Set		  If MovieAttr.SetOrder > -1 Then Cell( Lindex, 9 ) = MovieAttr.Set + "" + str( MovieAttr.SetOrder ) Else Cell( Lindex, 9 ) = MovieAttr.Set		  		  // 10. Studio		  If MovieAttr.Studios.Ubound > -1 Then Cell( Lindex, 10 ) = MovieAttr.Studios(0)		  		  // 11. Size		  Dim s() as FolderItem = FindMovieItems( f )		  If s.Ubound > -1 Then		    Dim TotalSize as String		    For i as Integer = 0 to s.Ubound		      If s(i).Name = "VIDEO_TS" Then		        TotalSize = "4630"		      ElseIf s(i).Name = "BDMV" Then		        TotalSize = "25000"		      Else		        TotalSize = Str( Val( TotalSize ) + ( s(i).Length / 1000 / 1000 ) )		      End If		    Next		    		    If TotalSize.NthField(".",1).Len = 2 Then TotalSize = "000" + TotalSize		    If TotalSize.NthField(".",1).Len = 3 Then TotalSize = "00"  + TotalSize		    If TotalSize.NthField(".",1).Len = 4 Then TotalSize = "0"   + TotalSize		    		    Cell( Lindex, 11 ) = Str( TotalSize )		  End If		  		  // 12. Duration		  If MovieAttr.InfoVideoRuntime <> "" Then		    Dim t as String = MovieAttr.InfoVideoRuntime		    If t.len = 1 Then t = "000" + t		    If t.Len = 2 Then t = "00" + t		    If t.len = 3 Then t = "0" + t		    		    Cell( Lindex, 12 ) = t		  End If		  		  		  // Update search listbox		  'Dim LstBox as Listbox = wndMain.lstSearchMovies		  'For i as Integer = 0 to LstBox.ListCount - 1		  'If LstBox.Cell(i,1) = Cell( Lindex, 1 ) Then		  'LstBox.Cell( i, 0 ) = Cell( Lindex, 0 )		  'LstBox.Cell( i, 1 ) = Cell( Lindex, 1 )		  'LstBox.Cell( i, 2 ) = Cell( Lindex, 2 )		  'LstBox.Cell( i, 3 ) = Cell( Lindex, 3 )		  'LstBox.Cell( i, 4 ) = Cell( Lindex, 4 )		  'LstBox.Cell( i, 5 ) = Cell( Lindex, 5 )		  'LstBox.Cell( i, 6 ) = Cell( Lindex, 6 )		  'LstBox.Cell( i, 7 ) = Cell( Lindex, 7 )		  'LstBox.Cell( i, 8 ) = Cell( Lindex, 8 )		  'LstBox.Cell( i, 9 ) = Cell( Lindex, 9 )		  'LstBox.Cell( i, 10 ) = Cell( Lindex, 10 )		  'LstBox.Cell( i, 11 ) = Cell( Lindex, 11 )		  'LstBox.Cell( i, 12 ) = Cell( Lindex, 12 )		  'End If		  'Next		  		  If wndMain.ccSearchBoxMovies.edtSearch.Text = "" Then		    wndMain.lstSearch.CopyFrom( Me )		    SaveToDB		  End If		End Sub	#tag EndMethod	#tag Property, Flags = &h0		LastKeyPressed As String	#tag EndProperty	#tag Property, Flags = &h0		LastKeyPressedAt As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected lindex As Integer	#tag EndProperty	#tag Property, Flags = &h0		MovieFolders() As FolderItem	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="AutoHideScrollbars"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Bold"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Border"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnCount"			Visible=true			Group="Appearance"			InitialValue="1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnsResizable"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ColumnWidths"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DataField"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataField"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DataSource"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataSource"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="DefaultRowHeight"			Visible=true			Group="Appearance"			InitialValue="36"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDrag"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="EnableDragReorder"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesHorizontal"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Default"				"1 - None"				"2 - ThinDotted"				"3 - ThinSolid"				"4 - ThickSolid"				"5 - DoubleThinSolid"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="GridLinesVertical"			Visible=true			Group="Appearance"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Default"				"1 - None"				"2 - ThinDotted"				"3 - ThinSolid"				"4 - ThickSolid"				"5 - DoubleThinSolid"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="HasHeading"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="HeadingIndex"			Visible=true			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Hierarchical"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			Group="Initial State"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="InitialValue"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Italic"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LastKeyPressed"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="LastKeyPressedAt"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="RequiresSelection"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarHorizontal"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollBarVertical"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="SelectionType"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Single"				"1 - Multiple"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Visible=true			Group="Font"			InitialValue="System"			Type="String"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Visible=true			Group="Font"			InitialValue="11"			Type="Single"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="TextUnit"			Visible=true			Group="Font"			InitialValue="0"			Type="FontUnits"			EditorType="Enum"			InheritedFrom="Listbox"			#tag EnumValues				"0 - Default"				"1 - Pixel"				"2 - Point"				"3 - Inch"				"4 - Millimeter"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Underline"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollOffset"			Group="Appearance"			InitialValue="0"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty		#tag ViewProperty			Name="_ScrollWidth"			Group="Appearance"			InitialValue="-1"			Type="Integer"			InheritedFrom="Listbox"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass