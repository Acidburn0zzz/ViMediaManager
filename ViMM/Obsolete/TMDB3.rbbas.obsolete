#tag ClassProtected Class TMDB3Inherits HTTPSocket	#tag Event		Sub Error(code as integer)		  SocketError( code, Me )		  		Exception err as NilObjectException		  Me.Close		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub GetMovieNFO(ID as String)		  Dim JSONString as String		  Dim sckt as New TMDB3		  sckt.Yield = True		  		  MovieAttr.ClearProperties		  If NOT Scrape.MassSearch Then dlgProgress.Reset		  		  // ---- Gathering Information.		  Dim Lang as String = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 )		  Dim TimeOut as Integer = Prefs.integerForKey("TimeOut") / 4		  		  // General Info		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "General Information...", 1, 15 ) // 3		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieInfo", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim MovieInfo as New JSONItem		  If JSONString.ValidJSON("TMDB - Info") Then MovieInfo.Load ConvertEncoding( JSONString, Encodings.UTF8 ) Else Return		  		  // Alternative Titles		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "Alternative Titles Information..." ) // 4		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieAlternativeTitles", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim AlternativeTitles as New JSONItem		  If JSONString.ValidJSON("TMDB - Alternative Titles") Then AlternativeTitles.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  		  // Cast		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "Cast Information..." ) // 5		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieCast", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Cast as New JSONItem		  If JSONString.ValidJSON("TMDB - Cast") Then Cast.Load ConvertEncoding( JSONString, Encodings.UTF8 ) Else Return		  		  // Images		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "Images Information..." ) // 6		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieImages", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Images as New JSONItem		  If JSONString.ValidJSON("TMDB - Images") Then Images.Load ConvertEncoding( JSONString, Encodings.UTF8 ) Else Return		  		  // Releases		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "Releases Information..." ) // 7		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieReleases", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Releases as New JSONItem		  If JSONString.ValidJSON("TMDB - Releases") Then Releases.Load ConvertEncoding( JSONString, Encodings.UTF8 ) Else Return		  		  // Trailers		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "Trailers Information..." ) // 8		  JSONString = DefineEncoding( sckt.Get( sckt.URL( "MovieTrailers", ID, Lang ), TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim Trailers as New JSONItem		  If JSONString.ValidJSON("TMDB - Trailers") Then Trailers.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  		  // IMDB Full Plot		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "IMDb Full Information..." ) // 9		  JSONString = DefineEncoding( sckt.Get( "http://www.omdbapi.com/?i=" + MovieInfo.Value("imdb_id") + "&tomatoes=true&plot=full", TimeOut ), Encodings.UTF8 )		  sckt.Close		  		  Dim IMDBFull as New JSONItem		  If JSONString.ValidJSON("IMDb Full") Then IMDBFull.Load ConvertEncoding( JSONString, Encodings.MacRoman )		  		  // IMDB Outline Plot		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", "IMDb Short Information..." ) // 10		  Dim IMDBShort as New JSONItem		  If Lang.InStr(0, "en") > 0 Then		    JSONString = DefineEncoding( sckt.Get( "http://www.omdbapi.com/?i=" + MovieInfo.Value("imdb_id") + "&tomatoes=true&plot=short", TimeOut ), Encodings.UTF8 )		    sckt.Close		    		    If JSONString.ValidJSON("IMDb Short") Then IMDBShort.Load ConvertEncoding( JSONString, Encodings.UTF8 )		  End If		  		  // FanartTV		  Dim FanartTVJSON as New JSONItem		  If Prefs.boolForKey("AutoDownloadClearArt") Or Prefs.boolForKey("AutoDownloadLogo") Or Prefs.boolForKey("AutoDownloadDiscArt") Then		    'http://fanart.tv/webservice/movie/apikey/imdb-tmdb_id[|id2|id3]/format/type/sort/limit/		    If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownload + ":", "FanartTV Information..." ) // 11		    JSONString = DefineEncoding( sckt.Get( "http://fanart.tv/webservice/movie/" + Scrape.ApiKey_FanartTV + "/" + ID + "/json/all/1/2/", TimeOut ), Encodings.UTF8 )		    sckt.Close		    		    If JSONString.ValidJSON("FanartTV") Then FanartTVJSON.Load JSONString		  End If		  		  JSONString = ""		  		  // ---- Process Information		  If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kProcessing + ":", FindMovieName( MovieAttr.FolderParent ) ) // 11		  		  If Lang = "en-gb" Then Lang = "GB"		  If Lang.InStr( 0, "en" ) > 0 Then Lang = "US" Else Lang = Lang.Uppercase		  Dim IMDBEnabled as Boolean = ( MovieInfo.Value("imdb_id") <> "" And IMDBFull.ToString <> "" And IMDBFull.ToString <> "{}" )'Prefs.boolForKey("IMDBUnofficialEnabled") )		  		  // Downloaded Image Sizes.		  Dim PosterSize, FanartSize as String		  		  Select Case Prefs.integerForKey("DownloadedPosterSize")		    // "poster_sizes": ["w92", "w154", "w185", "w342", "w500", "original"],		  Case 0		    PosterSize = "original"		  Case 2		    PosterSize = "w92"		  Case 3		    PosterSize = "w185"		  Case 4		    PosterSize = "w500"		    		  End Select		  		  Select Case Prefs.integerForKey("DownloadedFanartSize")		    //  "backdrop_sizes": ["w300", "w780", "w1280", "original"],		  Case 0		    FanartSize = "original"		  Case 2		    FanartSize = "w300"		  Case 3		    FanartSize = "w780"		  Case 4		    FanartSize = "w1280"		    		  End Select		  		  // ID's		  MovieAttr.ID_IMDB = MovieInfo.Value("imdb_id")		  MovieAttr.ID_TMDB = MovieInfo.Value("id")		  		  // Titles		  MovieAttr.Title = MovieInfo.Value("title")		  		  // Localized Title		  If NOT ( Lang = "US" ) Or NOT Lang.InStr(0, "en") > 0 Then		    		    For i as Integer = 0 To AlternativeTitles.Child("titles").Count - 1		      Dim jItem as New JSONItem		      jItem = AlternativeTitles.Child("titles").Child(i)		      If jItem.Value("iso_3166_1") = Lang and jItem.Value("title") <> "" Then		        MovieAttr.Title = jItem.Value("title")		        Exit		      End If		    Next		    		  End If		  		  MovieAttr.TitleOriginal = MovieInfo.Value("original_title")		  MovieAttr.TitleSort = Articulator( MovieAttr.Title )		  		  // Description		  MovieAttr.DescriptionPlot = MovieInfo.Value("overview")		  MovieAttr.DescriptionTagline = MovieInfo.Value( "tagline" )		  If IMDBEnabled And Lang = "US" Then		    If IMDBShort.ToString <> "" And IMDBShort.ToString <> "{}" And IMDBShort.Value("Plot") <> "N/A" Then MovieAttr.DescriptionOutline = IMDBShort.Value("Plot")		    If IMDBFull.Value("Plot") <> "N/A" And _		      Len( IMDBFull.Value("Plot") ) >= Len( MovieInfo.Value("overview") ) _		      Then MovieAttr.DescriptionPlot = IMDBFull.Value("Plot")		    End If		    		    // Release		    MovieAttr.DatePremiered = MovieInfo.Value("release_date")		    MovieAttr.DateYear = Val( MovieInfo.Value("release_date").left(4) )		    		    If IMDBEnabled Then		      // Formatting IMDB Date to ViMM/TMDB date		      If IMDBFull.Value("Released") <> "N/A" Then		        Dim Date, PrettyMonth, Day, Year as String		        Date = IMDBFull.Value("Released")		        PrettyMonth = Date.Right(8).Left(3)		        Day = Date.Left(2)		        Year = Date.Right(4)		        MovieAttr.DatePremiered = Year + "-" + Month2Int( PrettyMonth ) + "-" + Day		      End If		      		      If IMDBFull.Value("Year") <> "" Then MovieAttr.DateYear = IMDBFull.Value("Year")		    End If		    		    // MPAA		    If IMDBEnabled And IMDBFull.Value("Rated") <> "N/A" Then MovieAttr.RatingMPAA = IMDBFull.Value("Rated")		    		    Dim ArrCountry(), ArrMPAA() as String		    For i as Integer = 0 to Releases.Child("countries").Count - 1		      Dim jItem as New JSONItem		      jItem = Releases.Child("countries").Child(i)		      		      ArrCountry.Append jItem.Value("iso_3166_1")		      ArrMPAA.Append    jItem.Value("certification")		      		      If jItem.Value("iso_3166_1") = Lang Then		        MovieAttr.DatePremiered = jItem.Value("release_date")		        If jItem.Value("certification") <> "" Then MovieAttr.RatingMPAA = MPAAFromCountry( jItem.Value("certification"), Lang )		      End If		    Next		    		    For i as Integer = 0 to ArrCountry.Ubound		      If ArrCountry(i) <> "" And ArrMPAA(i) <> "" Then		        MovieAttr.RatingCertification.Append FlagCountry( ArrCountry(i) ) + ":" + ArrMPAA(i)		      End If		    Next		    		    // Rating		    MovieAttr.Rating = Round( MovieInfo.Value( "vote_average" ) * 10 ) / 10		    MovieAttr.RatingVotes = MovieInfo.Value( "vote_count" )		    		    If IMDBEnabled Then		      If IMDBFull.Value("imdbRating") <> "N/A" Then MovieAttr.Rating = IMDBFull.Value("imdbRating")		      If IMDBFull.Value("imdbVotes") <> "N/A" Then MovieAttr.RatingVotes = Val( IMDBFull.Value("imdbVotes").ReplaceAll(",", "") )		    End If		    		    // IMDB's Formula for Weighted Rating (WR) = (v ÷ (v+m)) × R + (m ÷ (v+m)) × C		    // Should really only be used if IMDB is enabled, but maybe weighted rating is fun for TMDB rating as well.		    Dim WeightedRating as Double = ( MovieAttr.RatingVotes / ( MovieAttr.RatingVotes + 25000 ) ) * MovieAttr.Rating + ( 25000 / ( MovieAttr.RatingVotes + 3000 ) ) * 7.1		    If MovieAttr.RatingVotes >= 25000 and WeightedRating >= 8 then MovieAttr.RatingTop250 = Round( WeightedRating * 10 ) / 10		    		    // IMDB's Formula for Weighted Rating (WR) = ( ( R * v ) + ( C * m ) ) / ( v + m ) According to Wikpedia		    'Dim WeightedRating as Double = ( ( MovieAttr.Rating * MovieAttr.RatingVotes ) + ( 7.1 * 25000) ) / ( MovieAttr.RatingVotes + 25000 )		    'If MovieAttr.RatingVotes >= 25000 And WeightedRating > 8 Then MovieAttr.RatingTop250 = WeightedRating		    		    // Genres		    MovieAttr.Genres = JSONArray( MovieInfo.Child("genres"), "name" )		    If IMDBEnabled Then		      Dim TmpGenre() as String = IMDBFull.Value("Genre").split(", ")		      For i as Integer = 0 to TmpGenre.Ubound		        MovieAttr.Genres.Append TmpGenre(i)		      Next		    End If		    		    // Sort out double genres		    MovieAttr.Genres.Sort		    For i as Integer = MovieAttr.Genres.Ubound To 1 Step -1		      If MovieAttr.Genres(i) = MovieAttr.Genres(i-1) Then MovieAttr.Genres.Remove(i)		    Next i		    		    // Studios		    MovieAttr.Studios = JSONArray( MovieInfo.Child("production_companies"), "name" )		    		    // Countries		    MovieAttr.Countries = JSONArray( MovieInfo.Child("production_countries"), "name" )		    		    // Spoken Languages		    MovieAttr.LanguagesSpoken = JSONArray( MovieInfo.Child("spoken_languages"), "name" )		    MovieAttr.LanguagesSpokenCode = JSONArray( MovieInfo.Child("spoken_languages"), "iso_639_1" )		    		    		    // Other MovieInfo		    MovieAttr.InfoVideoRuntime = MovieInfo.Value("runtime")		    		    'MsgBox MovieInfo.Child("belongs_to_collection")		    If MovieInfo.Child("belongs_to_collection") <> Nil Then		      MovieAttr.Set = MovieInfo.Child("belongs_to_collection").Value("name")		      MovieAttr.Set = Trim( MovieAttr.Set.ReplaceAll( "collection", "" ) )		      MovieAttr.SetPosterURL = URLbase_image + PosterSize + MovieInfo.Child("belongs_to_collection").Value("poster_path")		      MovieAttr.SetFanartURL = URLbase_image + FanartSize + MovieInfo.Child("belongs_to_collection").Value("backdrop_path")		    End If		    		    // Cast		    For i as Integer = 0 to Cast.Child("cast").Count - 1		      Dim jItem as New JSONItem		      jItem = Cast.Child("cast").Child(i)		      		      MovieAttr.ActorID.Append   jItem.value("id")		      MovieAttr.ActorName.Append jItem.Value("name")		      MovieAttr.ActorRole.Append jItem.Value("character")		      If jItem.Value("profile_path") = "" Then MovieAttr.ActorThumbURL.Append "" Else MovieAttr.ActorThumbURL.Append URLbase_image + "w185" + jItem.Value("profile_path")		      		    Next		    		    // Crew		    For i as Integer = 0 to Cast.Child("crew").Count - 1		      Dim jItem as New JSONItem		      jItem = Cast.Child("crew").Child(i)		      		      		      If jItem.Value("department") = "Directing" Then		        If MovieAttr.CreditDirector = "" Then		          MovieAttr.CreditDirector   = jItem.Value("name")		          MovieAttr.CreditDirectorID = jItem.Value("id")		        Else		          MovieAttr.CreditDirector   = MovieAttr.CreditDirector   + ", " + jItem.Value("name")		          MovieAttr.CreditDirectorID = MovieAttr.CreditDirectorID + ","  + jItem.Value("id")		        End If		      End If		      		      If jItem.Value("department") = "Writing" Then		        If MovieAttr.CreditWriter = "" Then		          MovieAttr.CreditWriter   = jItem.Value("name")		          MovieAttr.CreditWriterID = jItem.Value("id")		        Else		          MovieAttr.CreditWriter   = MovieAttr.CreditWriter   + ", " + jItem.Value("name")		          MovieAttr.CreditWriterID = MovieAttr.CreditWriterID + ","  + jItem.Value("id")		        End If		      End If		      		      If jItem.Value("department") = "Sound" Then		        If MovieAttr.CreditSound = "" Then		          MovieAttr.CreditSound = jItem.Value("name")		          MovieAttr.CreditSoundID = jItem.Value("id")		        Else		          MovieAttr.CreditSound   = MovieAttr.CreditSound   + ", " + jItem.Value("name")		          MovieAttr.CreditSoundID = MovieAttr.CreditSoundID + ","  + jItem.Value("id")		        End If		      End If		      		    Next		    		    // Other IMDBInfo		    If IMDBEnabled Then		      If IMDBFull.Value("tomatoConsensus") <> "N/A" Then MovieAttr.TomatoConcensus = IMDBFull.Value("tomatoConsensus")		      If IMDBFull.Value("Director") <> "N/A" And MovieAttr.CreditDirector = "" Then MovieAttr.CreditDirector = IMDBFull.Value("Director")		      If IMDBFull.Value("Writer") <> "N/A" And MovieAttr.CreditWriter = "" Then MovieAttr.CreditWriter = IMDBFull.Value("Writer")		    End If		    		    If Prefs.boolForKey("AutoManageMedia") Then SingleRenamer MovieAttr.FolderParent, -1, True		    		    // Poster		    Dim FirstPoster as String		    For i as Integer = 0 to Images.Child("posters").Count - 1		      Dim jItem as new JSONItem		      jItem = Images.Child("posters").Child(i)		      		      If FirstPoster = "" And _		        (jItem.Value("iso_639_1") = Prefs.textStringForKey("DBLanguage").NthField("-",1) OR _		        jItem.Value("iso_639_1") = "" ) Then FirstPoster = URLbase_image + PosterSize + jItem.Value("file_path")		        		        MovieAttr.ART_PosterURLs.Append       URLbase_image + "original" + jItem.Value("file_path")		        MovieAttr.ART_PosterThumbURLs.Append  URLbase_image + "w92" + jItem.Value("file_path")		        MovieAttr.ART_PosterDimensions.Append jItem.Value("width") + "x" + jItem.Value("height")		    Next		    		    // IMDB Poster		    If IMDBEnabled And IMDBFull.Value("Poster") <> "N/A" Then		      MovieAttr.ART_PosterURLs.Append IMDBFull.Value("Poster")		      MovieAttr.ART_PosterThumbURLs.Append IMDBFull.Value("Poster")		      MovieAttr.ART_PosterDimensions.Append ""		    End If		    		    If Prefs.boolForKey("AutoDownloadPoster") Then		      Dim PosterLocation as FolderItem = MovieAttr.DestinationPoster( MovieAttr.FolderParent )		      If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", Localizable.kDefaultPoster )		      If PosterLocation <> Nil And NOT PosterLocation.Exists Then		        MovieAttr.ART_Poster = URL2Picture( FirstPoster, PosterLocation.NameWithoutExtension, PosterLocation.NameExtension, MovieAttr.FolderParent )		        CacheImageSet MovieAttr.ART_Poster, MovieAttr.ID_IMDB + ".movie.poster.jpg"		      End If		    End If		    		    // Fanart		    Dim FirstFanart as String		    For i as Integer = 0 to Images.Child("backdrops").Count - 1		      Dim jItem as New JSONItem		      jItem = Images.Child("backdrops").Child(i)		      		      If FirstFanart = "" Then FirstFanart = URLbase_image + FanartSize + jItem.Value("file_path")		      		      MovieAttr.ART_FanartURLs.Append       URLbase_image + "original" + jItem.Value("file_path")		      MovieAttr.ART_FanartThumbURLs.Append  URLbase_image + "w300"     + jItem.Value("file_path")		      MovieAttr.ART_FanartDimensions.Append jItem.Value("width") + "x" + jItem.Value("height")		    Next		    		    If Prefs.boolForKey("AutoDownloadFanart") Then		      Dim FanartLocation as FolderItem = MovieAttr.DestinationFanart( MovieAttr.FolderParent )		      If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", Localizable.kDefaultFanart )		      If FanartLocation <> Nil And NOT FanartLocation.Exists Then		        MovieAttr.ART_Fanart = URL2Picture( FirstFanart, FanartLocation.NameWithoutExtension, FanartLocation.NameExtension, MovieAttr.FolderParent )		        CacheImageSet MovieAttr.ART_Fanart, MovieAttr.ID_IMDB + ".movie.fanart.jpg"		      End If		    End If		    		    // File -> MediaInfo		    If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kReadingInfo + ":", Scrape.kFileInfo + ": " + FindMovieName( MovieAttr.FolderParent ) )		    Scrape.MovieFileInfo( MovieAttr.FolderParent )		    		    // Write NFO		    If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kMetadata + ":", Localizable.kWritingNFO )		    MovieAttr.NFOWrite( MovieAttr.DestinationNFO( MovieAttr.FolderParent ) )		    		    // ExtraThumbs / ExtraFanart		    If Images.Child("backdrops").Count > 0 Then		      Dim Pic as Picture		      		      // ExtraThumbs		      If Prefs.boolForKey("AutoDownloadExtraThumbs") Then		        If NOT Scrape.MassSearch Then dlgProgress.Reset		        Dim Destination as FolderItem = MovieAttr.FolderParent.Child("extrathumbs")		        If NOT Destination.Exists Then Destination.CreateAsFolder		        		        For i as Integer = 0 to Images.Child("backdrops").Count - 1		          Dim jItem as new JSONItem		          jItem = Images.Child("backdrops").Child(i)		          		          If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", str(i+1) + Localizable.k1of2 + Str( Images.Child("backdrops").Count ) + " " + Localizable.kThumb + " " + Localizable.kImages + "...", 1, Images.Child("backdrops").Count )		          Pic = URL2Picture( URLbase_image + "w780" + jItem.Value("file_path"), "thumb" + str(i+1), "jpg", Destination )		          		        Next		      End If		      		      		      // ExtraFanart		      If Prefs.boolForKey("AutoDownloadExtraFanart") Then		        If NOT Scrape.MassSearch Then dlgProgress.Reset		        Dim Destination as FolderItem = MovieAttr.FolderParent.Child("extrafanart")		        If NOT Destination.Exists Then Destination.CreateAsFolder		        		        For i as Integer = 0 to Images.Child("backdrops").Count - 1		          Dim jItem as new JSONItem		          jItem = Images.Child("backdrops").Child(i)		          		          If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", str(i+1) + Localizable.k1of2 + Str( Images.Child("backdrops").Count ) + " " + Localizable.kFanart + " " + Localizable.kImages + "...", 1, Images.Child("backdrops").Count )		          Pic = URL2Picture( URLbase_image + FanartSize + jItem.Value("file_path"), "fanart" + str(i+1), "jpg", Destination )		          		        Next		      End If		      		    End If		    		    		    // FanartTV		    If Prefs.boolForKey("AutoDownloadClearArt") Or Prefs.boolForKey("AutoDownloadLogo") Or Prefs.boolForKey("AutoDownloadDiscArt") Then		      If FanartTVJSON.HasName( MovieAttr.TitleOriginal ) Then		        Dim xRoot as New JSONItem		        xRoot = FanartTVJSON.Child( MovieAttr.TitleOriginal )		        		        If NOT Scrape.MassSearch Then dlgProgress.Reset		        Dim Pic as Picture		        Dim URL as String = ""		        		        // ClearArt		        If Prefs.boolForKey("AutoDownloadClearArt") And xRoot.HasName("movieart") Then		          Dim ClearArt as New JSONItem		          ClearArt = xRoot.Child("movieart")		          		          If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", Localizable.kDefaultClearArt, 1, xRoot.Count - 2 )		          For i as Integer = 0 to ClearArt.Count - 1		            If ClearArt.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = ClearArt.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = ClearArt.Child(i).Value("url")		            End If		          Next		          		          Pic = URL2Picture( URL, "clearart", "png", MovieAttr.FolderParent )		          URL = ""		        End If		        		        // ClearLogo		        If Prefs.boolForKey("AutoDownloadLogo") And xRoot.HasName("movielogo") Then		          Dim Logo as New JSONItem		          Logo = xRoot.Child("movielogo")		          		          If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", Localizable.kDefaultLogo, 1, xRoot.Count - 2 )		          For i as Integer = 0 to Logo.Count - 1		            If Logo.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = Logo.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = Logo.Child(i).Value("url")		            End If		          Next		          		          Pic = URL2Picture( URL, "logo", "png", MovieAttr.FolderParent )		          URL = ""		        End If		        		        // ClearDisc		        If Prefs.boolForKey("AutoDownloadDiscArt") And xRoot.HasName("moviedisc") Then		          		          Dim Disc as New JSONItem		          Disc = xRoot.Child("moviedisc")		          		          If NOT Scrape.MassSearch Then dlgProgress.Add( Localizable.kDownloading + ":", Localizable.kDefaultDiscArt, 1, xRoot.Count - 2 )		          For i as Integer = 0 to Disc.Count - 1		            If Disc.Child(i).Value("lang") = Prefs.textStringForKey("DBLanguage").NthField( "-", 1 ) Then		              URL = Disc.Child(i).Value("url")		              Exit		            Else		              If URL = "" Then URL = Disc.Child(i).Value("url")		            End If		          Next		          		          Pic = URL2Picture( URL, "disc", "png", MovieAttr.FolderParent )		          URL = ""		        End If		        		      End If		    End If		    		    For i as Integer = 0 to Trailers.Child("youtube").Count - 1		      MsgBox Trailers.Child("youtube").ToString		      Dim jItem as New JSONItem		      jItem = Trailers.Child("youtube").Child(i)		      If jItem.Value("source") <> "" Then		        MovieAttr.TrailerNames.Append   jItem.Value("name")		        MovieAttr.TrailerQuality.Append jItem.Value("size")		        MovieAttr.TrailerURLs.Append    "http://www.youtube.com/watch?v=" + jItem.Value("source")		      End If		    Next		    		    		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetPersonNFO(ID as String)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function URL(Method As String, Parameter As String, Lang As String = "All", Page As Integer = 1, Opt As String = "") As String		  Dim ext as String		  		  If Lang = "All" Then		    Lang = ""		  Else		    Lang = "&language=" + Prefs.textStringForKey("DBLanguage").NthField( "-", 1 )		  End If		  		  Select Case Method		    		  Case "MovieInfo"		    ext = URLmovie_info		    		  Case "MovieAlternativeTitles"		    ext = URLmovie_alternative_titles		    		  Case "MovieCast"		    ext = URLMovie_casts		    		  Case "MovieImages"		    ext = URLmovie_images		    Lang = ""		    		  Case "MovieReleases"		    ext = URLmovie_releases		    		  Case "MovieTrailers"		    ext = URLmovie_trailers		    		  Case "SearchMovie"		    ext = URLsearch_movie		    If Opt <> "" Then Opt = "&year=" + opt		    Parameter = String2Entities( Parameter )		    		  End Select		  		  Return URLbase + ext.ReplaceAll("{0}", Parameter ) + Scrape.ApiKey_TMDB + "&page=" + Str(Page) + Lang + Opt + "&include_adult=true"		End Function	#tag EndMethod	#tag Note, Name = Image Sizes		"images": {		  "backdrop_sizes": ["w300", "w780", "w1280", "original"],		  "base_url": "http://cf2.imgobject.com/t/p/",		  "poster_sizes": ["w92", "w154", "w185", "w342", "w500", "original"],		  "profile_sizes": ["w45", "w185", "h632", "original"]		}				Construction:		  URLbase_image + "{size}" + "image.jpg"	#tag EndNote	#tag Note, Name = Untitled				  Dim Lang as String = Prefs.textStringForKey("DBLanguage")		  If Lang.InStr(0,"-") = 0 Then Lang = Lang + "-" + Lang		  If Lang = "en-en" Then Lang = "en"		  		  Dim test as JSONItem		  		  Dim Base as String = "http://api.themoviedb.org/3"		  Dim Extension as String		  		  Select Case url		    		  Case "misc_upcoming"		    Extension = "/movie/upcoming?page={0}&api_key="		    		  End Select		  		  Return Base + Extension.ReplaceAll("{0}", prm) + ApiKey		  		  		  If ID.Left(2) = "tt" then		    // IMDB Lookup		    Return "http://api.themoviedb.org/2.1/Movie.imdbLookup/" + Lang + "/xml/" + ApiKey + "/" + ID		  Else		    // TMDB Lookup		    Return "http://api.themoviedb.org/2.1/Movie.getInfo/" + Lang + "/xml/" + ApiKey + "/" + ID		  End If	#tag EndNote	#tag Note, Name = URL Construction				Return URLbase + URL*.ReplaceAll("{0}", "ID or Query") + ApiKey + "&page=" + "1+" + "&language="				URL search_* all have multi pages.		URL top_rated/popular/upcoming all have (5) multi-pages.	#tag EndNote	#tag Constant, Name = URLbase, Type = String, Dynamic = False, Default = \"http://api.themoviedb.org/3", Scope = Public	#tag EndConstant	#tag Constant, Name = URLbase_image, Type = String, Dynamic = False, Default = \"http://cf2.imgobject.com/t/p/", Scope = Public	#tag EndConstant	#tag Constant, Name = URLcompany_info, Type = String, Dynamic = False, Default = \"/company/{0}\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLcompany_movies, Type = String, Dynamic = False, Default = \"/company/{0}/movies\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLconfiguration, Type = String, Dynamic = False, Default = \"/configuration\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLgenre_list, Type = String, Dynamic = False, Default = \"/genre/list\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLgenre_movies, Type = String, Dynamic = False, Default = \"/genre/{0}/movies\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmisc_popular, Type = String, Dynamic = False, Default = \"/movie/popular\?page\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmisc_top_rated, Type = String, Dynamic = False, Default = \"/movie/top-rated\?page\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmisc_upcoming, Type = String, Dynamic = False, Default = \"/movie/upcoming\?page\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_alternative_titles, Type = String, Dynamic = False, Default = \"/movie/{0}/alternative_titles\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_casts, Type = String, Dynamic = False, Default = \"/movie/{0}/casts\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_images, Type = String, Dynamic = False, Default = \"/movie/{0}/images\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_info, Type = String, Dynamic = False, Default = \"/movie/{0}\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_keywords, Type = String, Dynamic = False, Default = \"/movie/{0}/keywords\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_releases, Type = String, Dynamic = False, Default = \"/movie/{0}/releases\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_similar, Type = String, Dynamic = False, Default = \"/movie/{0}/similar_movies\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_trailers, Type = String, Dynamic = False, Default = \"/movie/{0}/trailers\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLmovie_translations, Type = String, Dynamic = False, Default = \"/movie/{0}/translations\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLperson_credits, Type = String, Dynamic = False, Default = \"/person/{0}/credits\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLperson_images, Type = String, Dynamic = False, Default = \"/person/{0}/images\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLperson_info, Type = String, Dynamic = False, Default = \"/person/{0}\?api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLsearch_companies, Type = String, Dynamic = False, Default = \"/search/company\?query\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLsearch_movie, Type = String, Dynamic = False, Default = \"/search/movie\?query\x3D{0}&api_key\x3D", Scope = Protected	#tag EndConstant	#tag Constant, Name = URLsearch_person, Type = String, Dynamic = False, Default = \"/search/person\?query\x3D{0}&api_key", Scope = Protected	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Address"			Visible=true			Group="Behavior"			Type="String"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="defaultPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyAddress"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="httpProxyPort"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="HTTPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Port"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InheritedFrom="TCPSocket"		#tag EndViewProperty		#tag ViewProperty			Name="yield"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="HTTPSocket"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass