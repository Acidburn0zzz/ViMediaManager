#tag ClassClass NSAffineTransformInherits NSObject	#tag Method, Flags = &h0		Sub AppendTransform(aTransform as NSAffineTransform)		  		  #if TargetMacOS		    declare sub appendTransform lib CocoaLib selector "appendTransform:" (obj_id as Ptr, aTransform as Ptr)		    		    if aTransform <> nil then		      appendTransform(self, aTransform)		    else		      appendTransform(self, nil)		    end if		    		  #else		    #pragma unused aTransform		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Concat()		  		  #if TargetMacOS		    declare sub concat lib CocoaLib selector "concat" (obj_id as Ptr)		    		    concat(self)		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1000		Sub Constructor(aTransform as NSAffineTransform)		  		  #if targetMacOS		    declare function initWithTransform lib CocoaLib selector "initWithTransform:" (obj_id as Ptr, aTransform as Ptr) as Ptr		    		    dim aTransformRef as Ptr		    if aTransform <> nil then		      aTransformRef = aTransform		    end if		    		    super.Constructor(initWithTransform(Allocate("NSAffineTransform"), aTransformRef), NSAffineTransform.hasOwnership)		    		  #else		    #pragma unused aTransform		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function Create() As NSAffineTransform		  		  #if TargetMacOS		    declare function transform lib CocoaLib selector "transform" (obj_id as Ptr) as Ptr		    		    dim transformRef as Ptr = transform(Cocoa.NSClassFromString("NSAffineTransform"))		    		    if transformRef <> nil then		      return new NSAffineTransform(transformRef)		    end if		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function InitWithTransform(aTransform as NSAffineTransform) As NSAffineTransform		  		  #if TargetMacOS		    declare function initWithTransform lib CocoaLib selector "initWithTransform:" (obj_id as Ptr, aTransform as Ptr) as Ptr		    		    dim objectRef as Ptr		    if aTransform <> nil then		      objectRef = initWithTransform(self, aTransform)		    else		      objectRef = initWithTransform(self, nil)		    end if		    		    if objectRef <> nil then		      return new NSAffineTransform(objectRef)		    else		      return nil		    end if		    		  #else		    #pragma unused aTransform		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Invert()		  		  #if TargetMacOS		    declare sub invert lib CocoaLib selector "invert" (obj_id as Ptr)		    		    invert(self)		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub PrependTransform(aTransform as NSAffineTransform)		  		  #if TargetMacOS		    declare sub prependTransform lib CocoaLib selector "prependTransform:" (obj_id as Ptr, aTransform as Ptr)		    		    if aTransform <> nil then		      prependTransform(self, aTransform)		    else		      prependTransform(self, nil)		    end if		    		  #else		    #pragma unused aTransform		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RotateByDegrees(angle as Single)		  		  #if TargetMacOS		    declare sub rotateByDegrees lib CocoaLib selector "rotateByDegrees:" (obj_id as Ptr, angle as Single)		    		    rotateByDegrees(self, angle)		    		  #else		    #pragma unused angle		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub rotateByRadians(angle as Single)		  		  #if TargetMacOS		    declare sub rotateByRadians lib CocoaLib selector "rotateByRadians:" (obj_id as Ptr, angle as Single)		    		    rotateByRadians(self, angle)		    		  #else		    #pragma unused angle		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Scale(scale as Single)		  		  #if TargetMacOS		    declare sub scaleBy lib CocoaLib selector "scaleBy:" (obj_id as Ptr, scale as Single)		    		    scaleBy(self, scale)		    		  #else		    #pragma unused scale		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Scale(scaleX as Single, scaleY as Single)		  		  #if TargetMacOS		    declare sub scaleXBy lib CocoaLib selector "scaleXBy:yBy:" (obj_id as Ptr, scaleX as Single, scaleY as Single)		    		    scaleXBy(self, scaleX, scaleY)		    		  #else		    #pragma unused scaleX		    #pragma unused scaleY		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Set()		  		  #if TargetMacOS		    declare sub set lib CocoaLib selector "set" (obj_id as Ptr)		    		    set(self)		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function TransformBezierPath(aPath as NSBezierPath) As NSBezierPath		  		  #if TargetMacOS		    declare function transformBezierPath lib CocoaLib selector "transformBezierPath:" (obj_id as Ptr, aPath as Ptr) as Ptr		    		    dim aPathRef as Ptr		    if aPath <> nil then		      aPathRef = aPath		    end if		    		    dim returnPathRef as Ptr = transformBezierPath(self, aPathRef)		    		    if returnPathRef <> nil then		      return new NSBezierPath(returnPathRef)		    end if		    		  #else		    #pragma unused aPath		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TransformPoint(aPoint as Cocoa.NSPoint) As Cocoa.NSPoint		  		  #if TargetMacOS		    declare function transformPoint lib CocoaLib selector "transformPoint:" (obj_id as Ptr, aPoint as Cocoa.NSPoint) as Cocoa.NSPoint		    		    return transformPoint(self, aPoint)		    		  #else		    #pragma unused aPoint		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TransformSize(aSize as Cocoa.NSSize) As Cocoa.NSSize		  		  #if TargetMacOS		    declare function transformSize lib CocoaLib selector "transformSize:" (obj_id as Ptr, aSize as Cocoa.NSSize) as Cocoa.NSSize		    		    return transformSize(self, aSize)		    		  #else		    #pragma unused aSize		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Translate(deltaX as Single, deltaY as Single)		  		  #if TargetMacOS		    declare sub translateXBy lib CocoaLib selector "translateXBy:yBy:" (obj_id as Ptr, deltaX as Single, deltaY as Single)		    		    translateXBy(self, deltaX, deltaY)		    		  #else		    #pragma unused deltaX		    #pragma unused deltaY		  #endif		  		End Sub	#tag EndMethod	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  			  #if TargetMacOS			    declare function transformStruct lib CocoaLib selector "transformStruct" (obj_id as Ptr) as NSAffineTransformStruct			    			    return transformStruct(self)			    			  #endif			  			End Get		#tag EndGetter		#tag Setter			Set			  			  #if TargetMacOS			    declare sub setTransformStruct lib CocoaLib selector "setTransformStruct:" (obj_id as Ptr, aStruct as NSAffineTransformStruct)			    			    setTransformStruct self, value			    			  #else			    #pragma unused value			  #endif			  			End Set		#tag EndSetter		TransformStruct As NSAffineTransformStruct	#tag EndComputedProperty	#tag Structure, Name = NSAffineTransformStruct, Flags = &h0		m11 as Single		  m12 as Single		  m21 as Single		  m22 as Single		  tX as Single		tY as Single	#tag EndStructure	#tag ViewBehavior		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="NSObject"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass