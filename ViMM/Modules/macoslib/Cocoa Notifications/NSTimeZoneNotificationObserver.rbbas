#tag ClassProtected Class NSTimeZoneNotificationObserverInherits CocoaDelegate	#tag Event		Function DelegateClassName() As String		  		  return "MLNSTimeZoneNotificationObserver"		  		End Function	#tag EndEvent	#tag Event		Function DelegateMethods() As Tuple()		  		  dim methodList() as Tuple		  methodList.Append kNotificationSelector : FPtr(AddressOf DispatchNotification) : "v@:@"		  		  return methodList		  		End Function	#tag EndEvent	#tag Method, Flags = &h1000		Sub Constructor(handler as NSTimeZoneNotificationInterface = nil)		  		  // construct a delegate and accept an optional delegate handler which is a NSTimeZoneNotificationInterface instance		  // this permits to use this class in two modes:		  //		  // 1. Without subclassing, just instantiating it passing a NSTimeZoneNotificationInterface member that will handle		  //     the events (eg. a window or another class). The handler can also be changed at any time setting the DelegateHandler		  //     property.		  //		  // 2. Subclassing this class and handling the events. This can be also done dragging an instance of this class in a window.		  //		  		  // store the handler		  DelegateHandler = handler		  		  // call super to construct the object		  super.Constructor		  		  // raise the Open event (for use by subclasses or instances dragged to a window)		  raiseEvent Open()		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Destructor()		  		  // if we are registered as observer, we must unregister before getting deallocated or a runtime error will happen		  if registered then		    self.Unregister		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Sub DispatchNotification(id as Ptr, sel as Ptr, notification as Ptr)		  		  // dispatch the message to the right instance handler		  		  #pragma StackOverflowChecking false		  		  #pragma unused sel		  		  if CocoaDelegateMap.HasKey(id) then // lookup the delegate instance		    dim w as WeakRef = CocoaDelegateMap.Lookup(id, new WeakRef(nil))		    dim obj as NSTimeZoneNotificationObserver = NSTimeZoneNotificationObserver(w.Value) // get the delegate instance		    		    // be sure to have a valid object		    if obj = nil then		      return		    end if		    		    // build objects to pass to the instance method		    dim notificationObj as NSNotification		    if notification <> nil then		      notificationObj = new NSNotification(notification)		      		      // identify the notification and call the right handler		      select case notificationObj.Name		        		      case "NSSystemTimeZoneDidChangeNotification"		        obj.NSSystemTimeZone_DidChangeHandler notificationObj		        		      end select		      		    end if		    		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub NSSystemTimeZone_DidChangeHandler(notification as NSNotification)		  		  // handle the message and call the handler or fire the event		  		  if DelegateHandler <> nil then		    DelegateHandler.NSSystemTimeZone_DidChange(notification)		  else		    raiseEvent NSSystemTimeZone_DidChange(notification)		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Register()		  		  // These notifications are accessible through the shared default notification center		  		  // only proceed if we are not already registered		  if not registered then		    // get the notification center		    dim center as NSNotificationCenter = NSNotificationCenter.DefaultCenter		    		    // register for all notifications		    center.AddObserver self, kNotificationSelector, "", nil		    		    // mark we registered as observer		    registered = true		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Unregister()		  		  // These notifications are accessible through the shared default notification center		  		  // only proceed if we are currently registered		  if registered then		    // get the notification center		    dim center as NSNotificationCenter = NSNotificationCenter.DefaultCenter		    		    // unregister self as observer		    center.RemoveObserver self		    		    // mark we are no longer registered as observer		    registered = false		  end if		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event NSSystemTimeZone_DidChange(notification as NSNotification)	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Property, Flags = &h0		DelegateHandler As NSTimeZoneNotificationInterface	#tag EndProperty	#tag Property, Flags = &h21		Private registered As Boolean	#tag EndProperty	#tag Constant, Name = kNotificationSelector, Type = String, Dynamic = False, Default = \"dispatchTimeZoneNotification:", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="ClassName"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="CocoaDelegate"		#tag EndViewProperty		#tag ViewProperty			Name="Description"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="NSObject"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass