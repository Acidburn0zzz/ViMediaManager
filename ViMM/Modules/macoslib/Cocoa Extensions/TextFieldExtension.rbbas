#tag ModuleProtected Module TextFieldExtension	#tag Method, Flags = &h0		Function Bezeled(Extends t as TextField) As Boolean		  		  #if TargetCocoa		    		    declare function isBezeled lib CocoaLib selector "isBezeled" (obj_id as Integer) as Boolean		    		    return isBezeled(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Bezeled(Extends t as TextField, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setBezeled lib CocoaLib selector "setBezeled:" (obj_id as Integer, flag as Boolean)		    		    setBezeled(t.handle, value)		    		  #else		    		    #pragma unused t		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function BezelStyle(Extends t as TextField) As NSTextFieldBezelStyle		  		  #if TargetCocoa		    		    declare function bezelStyle lib CocoaLib selector "bezelStyle" (obj_id as Integer) as NSTextFieldBezelStyle		    		    return bezelStyle(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub BezelStyle(Extends t as TextField, Assigns style as NSTextFieldBezelStyle)		  		  #if TargetCocoa		    		    declare sub setBezelStyle lib CocoaLib selector "setBezelStyle:" (obj_id as Integer, style as NSTextFieldBezelStyle)		    		    setBezelStyle(t.handle, style)		    		  #else		    		    #pragma unused t		    #pragma unused style		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Bordered(Extends t as TextField) As Boolean		  		  #if TargetCocoa		    		    declare function isBordered lib CocoaLib selector "isBordered" (obj_id as Integer) as Boolean		    		    return isBordered(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Bordered(Extends t as TextField, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setBordered lib CocoaLib selector "setBordered:" (obj_id as Integer, flag as Boolean)		    		    setBordered(t.handle, value)		    		  #else		    		    #pragma unused t		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function DoubleValue(Extends t as TextField) As Double		  		  #if TargetCocoa		    		    declare function doubleValue lib CocoaLib selector "doubleValue" (obj_id as Integer) as Double		    		    return doubleValue(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DoubleValue(Extends t as TextField, Assigns value as Double)		  		  #if TargetCocoa		    		    declare sub setDoubleValue lib CocoaLib selector "setDoubleValue:" (obj_id as Integer, value as Double)		    		    setDoubleValue(t.handle, value)		    		  #else		    		    #pragma unused t		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Editable(Extends t as TextField) As Boolean		  		  #if TargetCocoa		    		    declare function isEditable lib CocoaLib selector "isEditable" (obj_id as Integer) as Boolean		    		    return isEditable(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Editable(Extends t as TextField, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setEditable lib CocoaLib selector "setEditable:" (obj_id as Integer, flag as Boolean)		    		    setEditable(t.handle, value)		    		  #else		    		    #pragma unused t		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IntegerValue(Extends t as TextField) As Integer		  		  #if TargetCocoa		    		    declare function integerValue lib CocoaLib selector "integerValue" (obj_id as Integer) as Integer		    		    return integerValue(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub IntegerValue(Extends t as TextField, Assigns value as Integer)		  		  #if TargetCocoa		    		    declare sub setIntegerValue lib CocoaLib selector "setIntegerValue:" (obj_id as Integer, value as Integer)		    		    setIntegerValue(t.handle, value)		    		  #else		    		    #pragma unused t		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Selectable(Extends t as TextField) As Boolean		  		  #if TargetCocoa		    		    declare function isSelectable lib CocoaLib selector "isSelectable" (obj_id as Integer) as Boolean		    		    return isSelectable(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Selectable(Extends t as TextField, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setSelectable lib CocoaLib selector "setSelectable:" (obj_id as Integer, flag as Boolean)		    		    setSelectable(t.handle, value)		    		  #else		    		    #pragma unused t		    #pragma unused value		    		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function SingleValue(Extends t as TextField) As Single		  		  #if TargetCocoa		    		    declare function floatValue lib CocoaLib selector "floatValue" (obj_id as Integer) as Single		    		    return floatValue(t.handle)		    		  #else		    		    #pragma unused t		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SingleValue(Extends t as TextField, Assigns value as Single)		  		  #if TargetCocoa		    		    declare sub setFloatValue lib CocoaLib selector "setFloatValue:" (obj_id as Integer, value as Single)		    		    setFloatValue(t.handle, value)		    		  #else		    		    #pragma unused t		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Enum, Name = NSTextFieldBezelStyle, Type = Integer, Flags = &h0		NSTextFieldSquareBezel		NSTextFieldRoundedBezel	#tag EndEnum	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule