#tag ModuleProtected Module ComboBoxExtension	#tag Method, Flags = &h0		Function Bordered(Extends c as ComboBox) As Boolean		  		  #if TargetCocoa		    		    declare function isBordered lib CocoaLib selector "isBordered" (obj_id as Integer) as Boolean		    		    return isBordered(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Bordered(Extends c as ComboBox, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setBordered lib CocoaLib selector "setBordered:" (obj_id as Integer, flag as Boolean)		    		    setBordered(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ButtonBordered(Extends c as ComboBox) As Boolean		  		  #if TargetCocoa		    		    declare function isButtonBordered lib CocoaLib selector "isButtonBordered" (obj_id as Integer) as Boolean		    		    return isButtonBordered(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ButtonBordered(Extends c as ComboBox, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setButtonBordered lib CocoaLib selector "setButtonBordered:" (obj_id as Integer, value as Boolean)		    		    setButtonBordered(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function DoubleValue(Extends c as ComboBox) As Double		  		  #if TargetCocoa		    		    declare function doubleValue lib CocoaLib selector "doubleValue" (obj_id as Integer) as Double		    		    return doubleValue(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DoubleValue(Extends c as ComboBox, Assigns value as Double)		  		  #if TargetCocoa		    		    declare sub setDoubleValue lib CocoaLib selector "setDoubleValue:" (obj_id as Integer, value as Double)		    		    setDoubleValue(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Editable(Extends c as ComboBox) As Boolean		  		  #if TargetCocoa		    		    declare function isEditable lib CocoaLib selector "isEditable" (obj_id as Integer) as Boolean		    		    return isEditable(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Editable(Extends c as ComboBox, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setEditable lib CocoaLib selector "setEditable:" (obj_id as Integer, flag as Boolean)		    		    setEditable(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function HasVerticalScroller(Extends c as ComboBox) As Boolean		  		  #if TargetCocoa		    		    declare function hasVerticalScroller lib CocoaLib selector "hasVerticalScroller" (obj_id as Integer) as Boolean		    		    return hasVerticalScroller(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub HasVerticalScroller(Extends c as ComboBox, Assigns value as Boolean)		  		  #if TargetCocoa		    		    declare sub setHasVerticalScroller lib CocoaLib selector "setHasVerticalScroller:" (obj_id as Integer, value as Boolean)		    		    setHasVerticalScroller(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IntegerValue(Extends c as ComboBox) As Integer		  		  #if TargetCocoa		    		    declare function integerValue lib CocoaLib selector "integerValue" (obj_id as Integer) as Integer		    		    return integerValue(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub IntegerValue(Extends c as ComboBox, Assigns value as Integer)		  		  #if TargetCocoa		    		    declare sub setIntegerValue lib CocoaLib selector "setIntegerValue:" (obj_id as Integer, value as Integer)		    		    setIntegerValue(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IntercellSpacing(Extends c as ComboBox) As Cocoa.NSSize		  		  #if TargetCocoa		    		    declare function intercellSpacing lib CocoaLib selector "intercellSpacing" (obj_id as Integer) as Cocoa.NSSize		    		    return intercellSpacing(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub IntercellSpacing(Extends c as ComboBox, Assigns value as Cocoa.NSSize)		  		  #if TargetCocoa		    		    declare sub setIntercellSpacing lib CocoaLib selector "setIntercellSpacing:" (obj_id as Integer, value as Cocoa.NSSize)		    		    setIntercellSpacing(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ItemHeight(Extends c as ComboBox) As Single		  		  #if TargetCocoa		    		    declare function itemHeight lib CocoaLib selector "itemHeight" (obj_id as Integer) as Single		    		    return itemHeight(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ItemHeight(Extends c as ComboBox, Assigns value as Single)		  		  #if TargetCocoa		    		    declare sub setItemHeight lib CocoaLib selector "setItemHeight:" (obj_id as Integer, value as Single)		    		    setItemHeight(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function NumberOfVisibleItems(Extends c as ComboBox) As Integer		  		  #if TargetCocoa		    		    declare function numberOfVisibleItems lib CocoaLib selector "numberOfVisibleItems" (obj_id as Integer) as Integer		    		    return numberOfVisibleItems(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub NumberOfVisibleItems(Extends c as ComboBox, Assigns value as Integer)		  		  #if TargetCocoa		    		    declare sub setNumberOfVisibleItems lib CocoaLib selector "setNumberOfVisibleItems:" (obj_id as Integer, value as Integer)		    		    setNumberOfVisibleItems(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function SingleValue(Extends c as ComboBox) As Single		  		  #if TargetCocoa		    		    declare function floatValue lib CocoaLib selector "floatValue" (obj_id as Integer) as Single		    		    return floatValue(c.handle)		    		  #else		    		    #pragma unused c		    		  #endif		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SingleValue(Extends c as ComboBox, Assigns value as Single)		  		  #if TargetCocoa		    		    declare sub setFloatValue lib CocoaLib selector "setFloatValue:" (obj_id as Integer, value as Single)		    		    setFloatValue(c.handle, value)		    		  #else		    		    #pragma unused c		    #pragma unused value		    		  #endif		  		End Sub	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule