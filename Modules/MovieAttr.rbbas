#tag ModuleProtected Module MovieAttr	#tag Method, Flags = &h1		Protected Sub ClearProperties()		  ReDim ActorName(-1)		  ReDim ActorRole(-1)		  ReDim ActorThumbURL(-1)		  		  ART_Fanart = nil		  ART_Poster = nil		  ART_Studio = nil		  ART_MPAARating = Nil		  		  ReDim ART_PosterURLs(-1)		  ReDim ART_FanartURLs(-1)		  ReDim ART_FanartThumbURLs(-1)		  		  audioinfoChannels = -1		  audioinfoCodec = ""		  audioinfoLanguage = ""		  		  videoinfoAspect = -1		  videoinfoCodec = ""		  videoinfoDurationInMinutes = ""		  videoinfoHeight = -1		  videoinfoWidth = -1		  videoinfoScantype = ""		  		  ReDim Credits(-1)		  ReDim Genre(-1)		  ReDim Studios(-1)		  ReDim SubtitleLanguage(-1)		  ReDim Countries(-1)		  		  AniDBID = ""		  Certification = ""		  Company = ""		  Country = ""		  Director = ""		  IMDBID = ""		  MPAA = ""		  OriginalTitle = ""		  Outline = ""		  Plot = ""		  Premiered = ""		  Rating = -1		  RuntimeStr = ""		  set = ""		  setorder = -1		  SortTitle = ""		  Studio = ""		  Tagline = ""		  Title = ""		  TMDbID = ""		  top250 = -1		  Trailer = ""		  Votes = ""		  Watched = ""		  Writer = ""		  Year = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function MovieFanartFilter(fanartParent as FolderItem) As FolderItem		  Dim i as Integer		  		  for i = 1 to fanartParent.Count		    if fanartParent.Item(i).Type = "image/jpg" or fanartParent.Item(i).Type = "image/png" then		      if fanartParent.Item(i).Name.InStr( -1, "fanart" ) > 0 then return fanartParent.Item(i)		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function MovieItemFilter(MovieParent As FolderItem) As FolderItem		  		  Dim Mvie as FolderItem		  Dim i as Integer		  		  For i = 1 to MovieParent.Count		    		    if MovieParent.Item(i).Type = "video/any" then Mvie = MovieParent.Item(i)		    		    if Mvie <> nil And Mvie.Visible = True And Mvie.Directory = False And _		      Mvie.Name.InStr( -1, "trailer" )  = 0 And _		      Mvie.Name.InStr( -1, "sample" ) = 0 then		      		      Return Mvie		    end if		    		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function MovieNameFilter(MovieDir As FolderItem, Filter as Boolean = False) As String		  Dim Mvie as FolderItem		  Dim MovieName as String		  		  Mvie = MovieAttr.MovieItemFilter( MovieDir )		  if Mvie = nil then Mvie = MovieDir		  if Mvie = nil or NOT Mvie.Exists then return ""		  		  // File Extensions Filter		  MovieName = Mvie.NameWithoutExtensionMBS		  		  // File Name Tags and types		  if filter then		    		    MovieName = MovieName.ReplaceAll(".", " ")		    		    MovieName = MovieName.ReplaceAll("x264", "")		    MovieName = MovieName.ReplaceAll("AC3", "")		    MovieName = MovieName.ReplaceAll("DTS", "")		    		    MovieName = MovieName.ReplaceAll("xvid", "")		    MovieName = MovieName.ReplaceAll("divx", "")		    		    MovieName = MovieName.ReplaceAll("DVDrip", "")		    MovieName = MovieName.ReplaceAll("DVD rip", "")		    MovieName = MovieName.ReplaceAll("DVD", "")		    MovieName = MovieName.ReplaceAll("BluRay", "")		    MovieName = MovieName.ReplaceAll("brrip", "")		    MovieName = MovieName.ReplaceAll("bdrip", "")		    MovieName = MovieName.ReplaceAll("460p", "")		    MovieName = MovieName.ReplaceAll("720p", "")		    MovieName = MovieName.ReplaceAll("1080p", "")		    		    MovieName = MovieName.ReplaceAll("unrated", "")		    MovieName = MovieName.ReplaceAll("uncut", "")		    MovieName = MovieName.ReplaceAll("Directors Cut", "")		    MovieName = MovieName.ReplaceAll("Director's Cut", "")		    MovieName = MovieName.ReplaceAll("Extended Cut", "")		    		    if MovieName.InStr(-1, "-") > 0 then MovieName = MovieName.Left( MovieName.InStr(-1, "-") - 1 )		    		    		    if MovieName.Left(1) = "[" then MovieName = MovieName.Right( MovieName.Len - MovieName.InStr( -1, "]") - 1 )		    if MovieName.Right(1) = "]" then MovieName = MovieName.Left( MovieName.Len - MovieName.InStr( -1, "[") - 1 )		    		    while MovieName.Right(1) = " "		      MovieName = MovieName.Left( MovieName.Len - 1 )		    wend		    		    While MovieName.InStr( -1, "  " ) > 0		      MovieName = MovieName.ReplaceAll( "  ", " " )		    wend		    		    MovieName = Titlecase(MovieName)		  end if		  		  return MovieName		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function MovieNFOFilter(NFOParent As FolderItem) As FolderItem		  Dim textin as TextInputStream		  Dim content as String		  Dim i as Integer		  		  for i = 1 to NFOParent.Count		    if NFOParent.Item(i).Name.Right(4) = ".nfo" then		      		      textin = textin.Open( NFOParent.Item(i) )		      content = textin.ReadAll		      textin.close		      		      // Is valid XML NFO?		      if content.Left(5) = "<?xml" then Return NFOParent.Item(i)		      		    end if		  next		  		  Return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function MoviePosterFilter(posterParent As FolderItem) As FolderItem		  Dim i as Integer		  		  for i = 1 to posterParent.Count		    if   posterParent.Item(i).Name.Right(5) = ".jpeg" or _		      posterParent.Item(i).Name.Right(4) = ".jpg" or _		      posterParent.Item(i).Name.Right(4) = ".tbn" or _		      posterParent.Item(i).Name.Right(4) = ".png" _		      then		      		      if   posterParent.Item(i).Name.InStr( -1, "poster" ) > 0 or _		        posterParent.Item(i).Name.left(5) = "movie" or _		        posterParent.Item(i).Name.left(6) = "folder" _		        then		        Return posterParent.Item(i)		      end if		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function MovieTrailerFilter(trailerParent as FolderItem) As FolderItem		  Dim i as Integer		  		  if trailerParent <> nil then		    for i = 1 to trailerParent.Count		      if trailerParent.Item(i).Name.InStr(-1, "trailer") > 0 then		        		        'MovieAttr.Trailer = trailerParent.Item(i).Name		        Return trailerParent.Item(i)		        		      end if		    next		  end if		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub ReadInformation(nfoFile as FolderItem = nil)		  #pragma disablebackgroundtasks		  #if not targetwin32 then		    #pragma disableboundsChecking		    #pragma nilObjectChecking false		    #pragma stackOverflowChecking false		    #pragma disableautoWaitCursor		  #endif		  		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem, xaudio, xvideo, xsubtitle as XmlNode		  		  Dim f, ArtFile as FolderItem		  Dim textin as TextInputStream		  		  Dim content, tmparray() as string		  Dim i, n, t as integer		  		  MovieAttr.ClearProperties		  xml.PreserveWhitespace = false		  		  if nfoFile <> nil then		    f = nfoFile		  else		    		    if wndMain.lstMovies.ListIndex <> -1 then		      f = wndMain.lstMovies.CellTag( wndMain.lstMovies.ListIndex, 0 )		      nfoFile = MovieAttr.MovieNFOFilter( f )		    else		      return		    end if		    		  end if		  		  if NOT wndMain.Populating then		    ArtFile = MovieAttr.MovieFanartFilter( f )		    if ArtFile <> nil and ArtFile.Exists then ART_Fanart = Picture.Open( ArtFile )		    		    ArtFile = MovieAttr.MoviePosterFilter( f )		    if ArtFile <> nil and ArtFile.Exists then ART_Poster = Picture.Open( ArtFile )		  end if		  		  if nfoFile <> nil and nfoFile.Exists then		    textin = textin.Open( nfoFile )		    content = textin.ReadAll		    textin.Close		  else		    return		  end if		  		  if content.Left(5) = "<?xml" then		    Xml.LoadXml(content)		  else		    return		  end if		  		  xroot = Xml.Child(0)		  		  for i = 0 to xroot.ChildCount - 1		    		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      'MsgBox xnode.Name + " = " + xnode.FirstChild.Value		      		      select case xnode.Name		        		      case "id"		        		        'MsgBox xnode.FirstChild.Value		        if xnode.FirstChild.Value.Left(2) = "tt" then		          MovieAttr.IMDBID = xnode.FirstChild.Value		        else		          MovieAttr.TMDbID = xnode.FirstChild.Value		        end if		        		        if xnode.GetAttribute("movieDB") = "TMDb" then		          MovieAttr.TMDbID = xnode.FirstChild.Value		        elseif xnode.GetAttribute("movieDB") = "anidb" then		          MovieAttr.AniDBID = xnode.FirstChild.Value		        end if		        'MsgBox "Read MDBID: " + MovieAttr.IMDBID + " TMDB: " + MovieAttr.TMDbID		        		      case "title"		        MovieAttr.Title = xnode.FirstChild.Value		        		      case "originaltitle"		        MovieAttr.OriginalTitle = xnode.FirstChild.Value		        		      case "sorttitle"		        MovieAttr.SortTitle = xnode.FirstChild.Value		        		      case "year"		        MovieAttr.Year = xnode.FirstChild.Value		        		      case "releasedate"		        MovieAttr.Premiered = xnode.FirstChild.Value		        		      case "rating"		        MovieAttr.Rating = val(xnode.FirstChild.Value)		        		      case "votes"		        MovieAttr.Votes = xnode.FirstChild.Value		        		      case "watched"		        MovieAttr.Watched = xnode.FirstChild.Value		        		      case "certification"		        MovieAttr.Certification = xnode.FirstChild.Value		        		        tmparray = xnode.FirstChild.Value.Split(" / ")		        		        for n = 0 to tmparray.Ubound		          		          select case tmparray(n)		            		          case "USA:G"		            MovieAttr.MPAA = "G"		          case "USA:PG"		            MovieAttr.MPAA = "PG"		          case "USA:PG-13"		            MovieAttr.MPAA = "PG-13"		          case "USA:NC-17"		            MovieAttr.MPAA = "NC-17"		          case "USA:R"		            MovieAttr.MPAA = "R"		          case "Unrated"		            MovieAttr.MPAA = "Unrated"		            		          end select		          		        next		        		      case "mpaa"		        MovieAttr.MPAA = xnode.FirstChild.Value		        		      case "genre"		        if InStr(0, xnode.FirstChild.Value, " / ") > 0 then		          MovieAttr.Genre = xnode.FirstChild.Value.Split(" / ")		        else		          MovieAttr.Genre.Append xnode.FirstChild.Value		        end if		        		      case "studio"		        MovieAttr.Studios.Append xnode.FirstChild.Value		        MovieAttr.Studio = MovieAttr.Studios(0)		        		      case "director"		        MovieAttr.Director = xnode.FirstChild.Value		        		      case "credits"		        MovieAttr.Writer = xnode.FirstChild.Value		        		      case "company"		        MovieAttr.Company = xnode.FirstChild.Value		        		      case "country"		        MovieAttr.Countries.Append xnode.FirstChild.Value		        MovieAttr.Country = MovieAttr.Countries(0)		        		      case "credits"		        if InStr(0, xnode.FirstChild.Value, " / ") > 0 then		          MovieAttr.Credits = xnode.FirstChild.Value.Split(" / ")		        else		          MovieAttr.Credits.Append xnode.FirstChild.Value		        end if		        		      case "top250"		        MovieAttr.top250 = val( xnode.FirstChild.Value )		        		      case "tagline"		        MovieAttr.Tagline = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine )		        		      case "outline"		        MovieAttr.Outline = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine )		        		      case "plot"		        MovieAttr.Plot = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine )		        		      case "set"		        MovieAttr.set = xnode.FirstChild.FirstChild.Value		        MovieAttr.setorder = val( xnode.FirstChild.FirstChild.GetAttribute("order") )		        		      case "runtime"		        'MovieAttr.RuntimeStr = xnode.FirstChild.Value		        MovieAttr.videoinfoDurationInMinutes = xnode.FirstChild.Value		        		        if MovieAttr.videoinfoDurationInMinutes.Right(5) = " mins" then		          MovieAttr.videoinfoDurationInMinutes = MovieAttr.videoinfoDurationInMinutes.Left( MovieAttr.RuntimeStr.Len - 5 )		        elseif MovieAttr.videoinfoDurationInMinutes.Right(4) = " min" then		          MovieAttr.videoinfoDurationInMinutes = MovieAttr.videoinfoDurationInMinutes.Left( MovieAttr.RuntimeStr.Len - 4 )		        elseif MovieAttr.videoinfoDurationInMinutes.Right(8) = " minutes" then		          MovieAttr.videoinfoDurationInMinutes = MovieAttr.videoinfoDurationInMinutes.Left( MovieAttr.RuntimeStr.Len - 8 )		        end if		        		      case "thumb"		        if xnode.FirstChild.Value.left(4) = "http" then MovieAttr.ART_PosterURLs.Append xnode.FirstChild.Value		        		      case "fanart"		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          MovieAttr.ART_FanartURLs.Append xitem.FirstChild.Value		          MovieAttr.ART_FanartThumbURLs.Append xitem.GetAttribute("preview")		        next		        		      case "actor"		        		        // --------------------		        'if xnode.Child(0).FirstChild <> nil and xnode.Child(1).FirstChild <> nil and xnode.Child(2).FirstChild <> nil then		        'MovieAttr.ActorName.Append    xnode.Child(0).FirstChild.Value		        'MovieAttr.ActorRole.Append    xnode.Child(1).FirstChild.Value		        'MovieAttr.ActorThumbURL.Append   xnode.Child(2).FirstChild.Value		        'elseif xnode.Child(0).FirstChild <> nil and xnode.Child(1).FirstChild <> nil and xnode.Child(2).FirstChild = nil then		        'MovieAttr.ActorName.Append    xnode.Child(0).FirstChild.Value		        'MovieAttr.ActorRole.Append    xnode.Child(1).FirstChild.Value		        'MovieAttr.ActorThumbURL.Append   ""		        '		        ''MsgBox xnode.Child(0).FirstChild.Value + " as " + xnode.Child(1).FirstChild.Value + " @ " + "nowhere"		        'end if		        // -------------------		        		        'MsgBox str(xnode.ChildCount)		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          if  xnode.ChildCount > 2 then		            		            Select case xitem.Name		              		            case "name"		              if xitem.FirstChild <> nil then		                MovieAttr.ActorName.Append xitem.FirstChild.Value		              else		                MovieAttr.ActorName.Append ""		              end if		            case "role"		              if xitem.FirstChild <> nil then		                MovieAttr.ActorRole.Append xitem.FirstChild.Value		              else		                MovieAttr.ActorRole.Append ""		              end if		            case "thumb"		              if xitem.FirstChild <> nil then		                MovieAttr.ActorThumbURL.Append xitem.FirstChild.Value		              else		                MovieAttr.ActorThumbURL.Append ""		              end if		              		            end select		            		          elseif xnode.ChildCount = 2 then		            		            Select case xitem.Name		              		            case "name"		              if xitem.FirstChild <> nil then MovieAttr.ActorName.Append xitem.FirstChild.Value		            case "role"		              if xitem.FirstChild <> nil then MovieAttr.ActorRole.Append xitem.FirstChild.Value		              		            end select		            // No thumburl available, now here's to hoping that role always stays available even if thumburl is not...		            MovieAttr.ActorThumbURL.Append ""		            		          elseif xnode.ChildCount = 1 then		            		            if xitem.Name = "name" and xitem.FirstChild <> nil then MovieAttr.ActorName.Append xitem.FirstChild.Value		            MovieAttr.ActorRole.Append ""		            MovieAttr.ActorThumbURL.Append ""		            		          end if		          		        next		        		        		      case "fileinfo"		        xitem = xnode.FirstChild		        		        for n = 0 to xitem.ChildCount - 1		          'MsgBox xitem.Child(n).Name		          		          select case xitem.Child(n).Name		            		          case "audio"		            xaudio = xitem.Child(n)		            		            for t = 0 to xaudio.ChildCount - 1		              if xaudio.Child(t).FirstChild <> nil then		                select case xaudio.Child(t).Name		                  		                case "channels"		                  audioinfoChannels = val( xaudio.Child(t).FirstChild.Value )		                case "codec"		                  audioinfoCodec = xaudio.Child(t).FirstChild.Value		                  		                end select		              end if		              		            next		            		          case "video"		            xvideo = xitem.Child(n)		            		            for t = 0 to xvideo.ChildCount - 1		              if xvideo.Child(t).FirstChild <> nil then		                		                select case xvideo.Child(t).Name		                  		                case "aspect"		                  videoinfoAspect = val( xvideo.Child(t).FirstChild.Value )		                case "codec"		                  videoinfoCodec = xvideo.Child(t).FirstChild.Value		                case "duration"		                  videoinfoDurationInMinutes = xvideo.Child(t).FirstChild.Value		                case "height"		                  videoinfoHeight = val( xvideo.Child(t).FirstChild.Value )		                case "scantype"		                  videoinfoScantype = xvideo.Child(t).FirstChild.Value		                case "width"		                  videoinfoWidth = val( xvideo.Child(t).FirstChild.Value )		                  		                end select		              end if		            next		            		          case "subtitle"		            xsubtitle = xitem.Child(n)		            for t = 0 to xsubtitle.ChildCount - 1		              if xsubtitle.Child(t).FirstChild <> nil then		                		                select case xsubtitle.Child(t).Name		                  		                case "language"		                  MovieAttr.SubtitleLanguage.Append xnode.FirstChild.Value		                  		                end select		                		              end if		            next		            		          end select		        next		        		      end select		      		    else		      'MsgBox xnode.Name + " = NIL"		    end if		    		  next		  		  ArtFile = GetFolderItem("Studios").Child( MovieAttr.Studio + ".png" )		  if ArtFile <> nil and ArtFile.Exists then ART_Studio = Picture.Open( ArtFile )		  		  ART_MPAARating = MPAA2Logo( MovieAttr.MPAA )		  		  'wndMain.cvsMovies.Refresh(False)		  		  Xml = nil		  f = nil		  nfoFile = nil		  ArtFile = nil		  content = ""		  i = -1		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ReadKey(Key as String, nfoFile as FolderItem, AttributeKey As String = "", AttributeValue As String = "") As String		  Dim Xml as new XmlDocument		  Dim xroot, xnode as XmlNode		  		  Dim textin as TextInputStream		  		  Dim content as string		  Dim i as integer		  		  xml.PreserveWhitespace = false		  		  if nfoFile = nil then		    'return ""		    nfoFile = wndMain.lstMovies.CellTag( wndMain.lstMovies.ListIndex, 0 )		    nfoFile = MovieAttr.MovieNFOFilter( nfoFile )		  end if		  		  textin = textin.Open( nfoFile )		  content = textin.ReadAll		  textin.Close		  		  if content.Left(5) = "<?xml" then		    Xml.LoadXml( content )		  else		    return ""		  end if		  		  xroot = Xml.Child(0)		  		  for i = 0 to xroot.ChildCount - 1		    		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      		      if AttributeKey = "" then		        		        if xnode.Name = Key then return xnode.FirstChild.Value		        		      else		        		        if xnode.Name = Key then		          if xnode.GetAttribute(AttributeKey) = AttributeValue then		            return xnode.FirstChild.Value		          end if		        end if		        		      end if		      		    end if		    		  next		  		  Xml = nil		  nfoFile = nil		  content = ""		  i = -1		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub WriteInformation(NfoFileLocation as FolderItem = nil)		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  Dim i as integer		  		  Xml.PreserveWhitespace = True		  		  if NfoFileLocation = nil then		    MsgBox "Forgot the NFO file location..."		    return		  end if		  		  xroot = Xml.AppendChild( Xml.CreateElement( "movie" ) )		  		  if MovieAttr.IMDBID <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "id" ) )		    xnode.SetAttribute("moviedb", "imdb")		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.IMDBID )		  end if		  		  if MovieAttr.TMDbID <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "id" ) )		    xnode.SetAttribute("moviedb", "TMDb")		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.TMDbID )		  end if		  		  if MovieAttr.Title <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "title" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Title )		  end if		  		  if MovieAttr.OriginalTitle <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "originaltitle" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.OriginalTitle )		  end if		  		  if MovieAttr.SortTitle <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "sorttitle" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.SortTitle )		  end if		  		  if MovieAttr.Year <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "year" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Year )		  end if		  		  if MovieAttr.set <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "set" ) )		    'xitem = xnode.AppendChild( Xml.CreateElement( "set" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.set )		    if MovieAttr.setorder <> -1 then xnode.SetAttribute("order", str( MovieAttr.setorder ) )		  end if		  		  if MovieAttr.Rating > -1 then		    xnode = xroot.AppendChild( Xml.CreateElement( "rating" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(MovieAttr.Rating) )		  end if		  		  if MovieAttr.Votes <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "votes" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Votes )		  end if		  		  if MovieAttr.top250 > -1 then		    xnode = xroot.AppendChild( Xml.CreateElement( "top250" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(MovieAttr.top250) )		  end if		  		  if MovieAttr.Watched <> "" and MovieAttr.Watched <> "false" then		    xnode = xroot.AppendChild( Xml.CreateElement( "watched" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Watched )		  end if		  		  if MovieAttr.Tagline <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "tagline" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Tagline.ReplaceAll( endofline, "<br>" ) )		  end if		  		  if MovieAttr.Outline <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "outline" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Outline.ReplaceAll( endofline, "<br>" ) )		  end if		  		  if MovieAttr.Plot <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "plot" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Plot.ReplaceAll( endofline, "<br>" ) )		  end if		  		  if MovieAttr.videoinfoDurationInMinutes <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "runtime" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.videoinfoDurationInMinutes )		  end if		  		  if MovieAttr.Premiered <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "releasedate" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Premiered )		  end if		  		  if MovieAttr.MPAA <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "mpaa" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.MPAA )		  end if		  		  if MovieAttr.Certification <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "certification" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Certification )		  end if		  		  'if MovieAttr.Trailer <> "" or MovieTrailerFilter( NfoFileLocation.Parent ) <> nil then		  'xnode = xroot.AppendChild( Xml.CreateElement( "trailer" ) )		  'xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Trailer )		  'end if		  		  if MovieAttr.Genre.Ubound > -1 then		    for i = 0 to MovieAttr.Genre.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "genre" ) )		      xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Genre(i) )		    next		  end if		  		  if MovieAttr.Company <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "company" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.company )		  end if		  		  if MovieAttr.Studios.Ubound > - 1 then		    for i = 0 to MovieAttr.Studios.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "studio" ) )		      xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Studios(i) )		    next		  end if		  		  if MovieAttr.Countries.Ubound > - 1 then		    for i = 0 to MovieAttr.Countries.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "country" ) )		      xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Countries(i) )		    next		  end if		  		  if MovieAttr.Director <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "director" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Director )		  end if		  		  if MovieAttr.Writer <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "credits" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Writer )		  end if		  		  if MovieAttr.Credits.Ubound > -1 then		    for i = 0 to MovieAttr.Credits.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "cedits" ) )		      xnode.AppendChild          Xml.CreateTextNode( MovieAttr.Credits(i) )		    next		  end if		  		  if MovieAttr.ActorName.Ubound > -1 then		    for i = 0 to MovieAttr.ActorName.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "actor" ) )		      		      xitem = xnode.AppendChild( Xml.CreateElement( "name" ) )		      if MovieAttr.ActorName(i) <> "" then		        xitem.AppendChild          Xml.CreateTextNode( MovieAttr.ActorName(i) )		      end if		      		      xitem = xnode.AppendChild( Xml.CreateElement( "role" ) )		      if MovieAttr.ActorRole(i) <> "" then		        xitem.AppendChild          Xml.CreateTextNode( MovieAttr.ActorRole(i) )		      end if		      		      xitem = xnode.AppendChild( Xml.CreateElement( "thumb" ) )		      if MovieAttr.ActorThumbURL(i) <> "" then		        xitem.AppendChild          Xml.CreateTextNode( MovieAttr.ActorThumbURL(i) )		      end if		    next // @END Go through actor attributes		  end if // @END Actors		  		  if MovieAttr.MoviePosterFilter( NfoFileLocation.Parent ) <> nil then		    xnode = xroot.AppendChild( Xml.CreateElement( "thumb" ) )		    xnode.AppendChild          Xml.CreateTextNode( MovieAttr.MoviePosterFilter( NfoFileLocation.Parent ).Name )		  end if		  		  if MovieAttr.ART_PosterURLs.Ubound > -1 then		    for i = 0 to MovieAttr.ART_PosterURLs.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "thumb" ) )		      xnode.AppendChild          Xml.CreateTextNode( MovieAttr.ART_PosterURLs(i) )		    next		  end if		  		  if MovieAttr.ART_FanartURLs.Ubound > -1 then		    xnode = xroot.AppendChild( Xml.CreateElement( "fanart" ) )		    for i = 0 to MovieAttr.ART_FanartURLs.Ubound		      xitem = xnode.AppendChild( Xml.CreateElement( "thumb" ) )		      xitem.SetAttribute( "preview", MovieAttr.ART_FanartThumbURLs(i) )		      xitem.AppendChild          Xml.CreateTextNode( MovieAttr.ART_FanartURLs(i) )		    next		  end if		  		  'if MovieAttr.videoinfoAspect <> -1 or _		  'MovieAttr.videoinfoCodec <> "" or _		  'MovieAttr.videoinfoHeight <> -1 or _		  'MovieAttr.videoinfoWidth <> -1 or _		  'MovieAttr.videoinfoDurationInMinutes <> "" or _		  'MovieAttr.videoinfoScantype <> "" or _		  'MovieAttr.audioinfoChannels <> -1 or _		  'MovieAttr.audioinfoCodec <> "" or _		  'MovieAttr.audioinfoLanguage <> "" then		  '		  'xnode = xroot.AppendChild( Xml.CreateElement( "fileinfo" ) )		  'xitem = xnode.AppendChild( Xml.CreateElement( "streamdetails" ) )		  'end if		  '		  'if MovieAttr.videoinfoAspect <> -1 or _		  'MovieAttr.videoinfoCodec <> "" or _		  'MovieAttr.videoinfoHeight <> -1 or _		  'MovieAttr.videoinfoWidth <> -1 or _		  'MovieAttr.videoinfoDurationInMinutes <> "" or _		  'MovieAttr.videoinfoScantype <> "" then		  '		  'xvideo = xitem.AppendChild( Xml.CreateElement( "video" ) )		  '		  'if MovieAttr.videoinfoAspect <> -1 then		  'xleaf = xvideo.AppendChild( Xml.CreateElement( "aspect" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( str(MovieAttr.videoinfoAspect) )		  'end if		  '		  'if MovieAttr.videoinfoCodec <> "" then		  'xleaf = xvideo.AppendChild( Xml.CreateElement( "codec" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( MovieAttr.videoinfoCodec )		  'end if		  '		  'if MovieAttr.videoinfoHeight <> -1 then		  'xleaf = xvideo.AppendChild( Xml.CreateElement( "height" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( str(MovieAttr.videoinfoHeight) )		  'end if		  '		  'if MovieAttr.videoinfoWidth <> -1 then		  'xleaf = xvideo.AppendChild( Xml.CreateElement( "width" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( str(MovieAttr.videoinfoWidth) )		  'end if		  '		  'if MovieAttr.videoinfoDurationInMinutes <> "" then		  'xleaf = xvideo.AppendChild( Xml.CreateElement( "duration" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( MovieAttr.videoinfoDurationInMinutes )		  'end if		  '		  'if MovieAttr.videoinfoScantype <> "" then		  'xleaf = xvideo.AppendChild( Xml.CreateElement( "scantype" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( MovieAttr.videoinfoScantype )		  'end if		  'end if		  '		  'if MovieAttr.audioinfoChannels <> -1 or MovieAttr.audioinfoCodec <> "" or MovieAttr.audioinfoLanguage <> "" then		  'xaudio = xitem.AppendChild( Xml.CreateElement( "audio" ) )		  '		  'if MovieAttr.audioinfoCodec <> "" then		  'xleaf = xaudio.AppendChild( Xml.CreateElement( "codec" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( MovieAttr.audioinfoCodec )		  'end if		  '		  'if MovieAttr.audioinfoLanguage <> "" then		  'xleaf = xaudio.AppendChild( Xml.CreateElement( "language" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( MovieAttr.audioinfoLanguage )		  'end if		  '		  'if MovieAttr.audioinfoChannels <> - 1 then		  'xleaf = xaudio.AppendChild( Xml.CreateElement( "channels" ) )		  'xleaf.AppendChild           Xml.CreateTextNode( str(MovieAttr.audioinfoChannels) )		  'end if		  'end if		  '		  'if MovieAttr.SubtitleLanguage.Ubound > -1 then		  'for i = 0 to MovieAttr.SubtitleLanguage.Ubound		  'xsubtitle = xitem.AppendChild( Xml.CreateElement( "subtitle" ) )		  'xleaf = xsubtitle.AppendChild( Xml.CreateElement( "language" ) )		  'xleaf.AppendChild          Xml.CreateTextNode( MovieAttr.SubtitleLanguage(i) )		  'next		  'end if		  		  		  Xml.LoadXml( TidyXML( Xml.ToString ).ReplaceAll( "&lt;br&gt;", EndOfLine ) )		  Xml.SaveXml( NfoFileLocation )		  		  'ReadInformation		  		  if NOT Scrape.MassSearch then wndMain.PopulateMoviesList		End Sub	#tag EndMethod	#tag Note, Name = Naming Conventions		ai = Audio Information		vi = Video Information				FileInfo Format:				        <fileinfo>		            <streamdetails>		                <video>		                    <codec>xvid</codec>		                    <aspect>2.388060</aspect>		                    <width>1280</width>		                    <height>536</height>		                    <durationinseconds>5165</durationinseconds>		                </video>		                <audio>		                    <codec>ac3</codec>		                    <language></language>		                    <channels>6</channels>		                </audio>		            </streamdetails>		        </fileinfo>				Actor Format:				        <actor>		            <name>Rutger Hauer</name>		            <role>Hobo</role>		            <thumb>http://ia.media-imdb.com/images/M/MV5BMTI5MjE4MTg3MV5BMl5BanBnXkFtZTYwMjk0Mzgy._V1._SY275_SX400_.jpg</thumb>		        </actor>	#tag EndNote	#tag Property, Flags = &h1		Protected ActorName() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorRole() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected AniDBID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Fanart As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartThumbURLs() As String = "-1"	#tag EndProperty	#tag Property, Flags = &h0		ART_FanartURLs() As String = "-1"	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_MPAARating As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Poster As Picture	#tag EndProperty	#tag Property, Flags = &h0		ART_PosterURLs() As String = "-1"	#tag EndProperty	#tag Property, Flags = &h0		ART_Studio As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected audioinfoChannels As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected audioinfoCodec As String	#tag EndProperty	#tag Property, Flags = &h1		Protected audioinfoLanguage As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Certification As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Company As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Countries() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Country As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Credits() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Director As String	#tag EndProperty	#tag Property, Flags = &h0		FolderParent As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected Genre() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected IMDBID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected MPAA As String	#tag EndProperty	#tag Property, Flags = &h1		Protected OriginalTitle As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Outline As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Plot As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Premiered As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Rating As Double = -1	#tag EndProperty	#tag Property, Flags = &h1		Protected RuntimeStr As String	#tag EndProperty	#tag Property, Flags = &h1		Protected set As String	#tag EndProperty	#tag Property, Flags = &h1		Protected setorder As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected SortTitle As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Studio As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Studios() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected SubtitleLanguage() As String = "-1"	#tag EndProperty	#tag Property, Flags = &h1		Protected Tagline As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Title As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TMDbID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected top250 As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected Trailer As String	#tag EndProperty	#tag Property, Flags = &h1		Protected videoinfoAspect As Double	#tag EndProperty	#tag Property, Flags = &h1		Protected videoinfoCodec As String	#tag EndProperty	#tag Property, Flags = &h1		Protected videoinfoDurationInMinutes As String	#tag EndProperty	#tag Property, Flags = &h1		Protected videoinfoHeight As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected videoinfoScantype As String	#tag EndProperty	#tag Property, Flags = &h1		Protected videoinfoWidth As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected Votes As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Watched As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Writer As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Year As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="ART_Studio"			Group="Behavior"			Type="Picture"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule