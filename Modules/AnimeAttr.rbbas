#tag ModuleProtected Module AnimeAttr	#tag Method, Flags = &h1		Protected Function AnimeBannerFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "Banner" ) > 0 then return FolderParent.Item(i)		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function AnimeFanartFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "Fanart" ) > 0 then return FolderParent.Item(i)		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function AnimeNFOFilter(NFOParent as FolderItem) As FolderItem		  Dim textin as TextInputStream		  Dim content as String		  Dim i as Integer		  		  for i = 1 to NFOParent.Count		    if NFOParent.Item(i).Name.Right(4) = ".nfo" then		      		      textin = textin.Open( NFOParent.Item(i) )		      content = textin.ReadAll		      textin.close		      		      // Is valid XML NFO?		      if content.Left(5) = "<?xml" then Return NFOParent.Item(i)		      		    end if		  next		  		  Return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function AnimePosterFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "poster" ) > 0 then		        return FolderParent.Item(i)		      elseif FolderParent.Item(i).Name.InStr( -1, "season-all" ) > 0 then		        Return FolderParent.Item(i)		      elseif FolderParent.Item(i).Name.InStr( -1, "folder") > 0 then		        Return FolderParent.Item(i)		      end if		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub ClearProperties()		  ReDim ActorName(-1)		  ReDim ActorRole(-1)		  ReDim ActorRoleDescription(-1)		  ReDim ActorThumbURL(-1)		  		  ReDim Genre(-1)		  		  ReDim SimilarAnimeID(-1)		  ReDim SimilarAnimeTitle(-1)		  		  ReDim ART_BannerURLs(-1)		  ReDim ART_FanartDimensions(-1)		  ReDim ART_FanartThumbURLs(-1)		  ReDim ART_FanartURLs(-1)		  ReDim ART_PosterURLs(-1)		  		  ART_Banner = nil		  ART_Fanart = nil		  ART_Poster = nil		  		  ART_ClearArt = nil		  ART_Logo = nil		  ART_TVThumb = nil		  		  ART_Studio = nil		  ART_MPAARating = nil		  		  DatePremiered = ""		  ID_AniDB = ""		  ID_IMDB = ""		  ID_TMDb = ""		  ID_TVDb = ""		  ID_TVRage = ""		  MPAA = ""		  PeopleAnimationWork = ""		  PeopleCharacterDesign = ""		  PeopleMusic = ""		  PeopleOriginalWork = ""		  Plot = ""		  Rating = -1		  RuntimeInMinutes = -1		  Status = ""		  Studio = ""		  Title = ""		  TitleOriginal = ""		  TitleSort = ""		  Type = ""		  Votes = -1		  Year = ""		  		  ReDim countries(-1)		  ReDim Studios(-1)		  Tagline = ""		  Outline = ""		  		  NextAired = ""		  NextEpisode = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub ReadInformation(NfoFileLocation As FolderItem = Nil)		  #pragma disablebackgroundtasks		  #if NOT targetwin32 and NOT DebugBuild then		    #pragma disableboundsChecking		    #pragma nilObjectChecking false		    #pragma stackOverflowChecking false		    #pragma disableautoWaitCursor		  #endif		  		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  		  Dim f, ArtFile as FolderItem		  Dim textin as TextInputStream		  		  Dim content as String		  Dim i, n as integer		  		  AnimeAttr.ClearProperties		  Xml.PreserveWhitespace = False		  		  if NfoFileLocation <> nil and FolderParent = NfoFileLocation then NfoFileLocation = FolderParent.Child("tvshow.nfo")		  if NfoFileLocation = nil and FolderParent <> nil then NfoFileLocation = FolderParent.Child("tvshow.nfo")		  if NfoFileLocation = nil or NOT NfoFileLocation.Exists then		    if AnimeAttr.FolderParent <> nil then NfoFileLocation = AnimeAttr.AnimeNFOFilter( AnimeAttr.FolderParent )		  end if		  		  // Every possible way of getting the NFO file location.		  'if NfoFileLocation = nil and FolderParent <> nil then		  'NfoFileLocation = FolderParent.Child("tvshow.nfo")		  'elseif NfoFileLocation <> nil and NfoFileLocation.Name <> "tvshow.nfo" then		  'NfoFileLocation = NfoFileLocation.Child("tvshow.nfo")		  'elseif NfoFileLocation <> nil and NfoFileLocation.Name = "tvshow.nfo" then		  '// Do nothing		  '// NfoFileLocation = NfoFileLocation		  '		  '// Replaced with FolderParenting		  'elseif NfoFileLocation = nil and wndMain.ppMedia.Value = 1 and wndMain.lstTVShows.ListIndex <> -1 then		  'NfoFileLocation = wndMain.lstTVShows.CellTag( wndMain.lstTVShows.ListIndex, 0 )		  'NfoFileLocation = NfoFileLocation.Child("tvshow.nfo")		  '		  'elseif NfoFileLocation = nil and wndMain.ppMedia.Value = 2 and wndMain.lstAnime.ListIndex <> -1 then		  'NfoFileLocation = wndMain.lstAnime.CellTag( wndMain.lstAnime.ListIndex, 0 )		  'NfoFileLocation = NfoFileLocation.Child("tvshow.nfo")		  '		  'else		  'Return		  'end if		  		  if NfoFileLocation <> nil and NfoFileLocation.Exists then		    textin = textin.Open( NfoFileLocation )		    content = TextIn.ReadAll		    TextIn.Close		  else		    Return		  end if		  		  if content.Left(5) = "<?xml" then Xml.LoadXml( content ) else Return		  		  xroot = Xml.Child(0)		  		  for i = 0 to xroot.ChildCount - 1		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      		      select case xnode.Name		        		      case "animetype"		        AnimeAttr.Type = xnode.FirstChild.Value		        		      case "id"		        if xnode.GetAttribute("movieDB") = "anidb" then		          AnimeAttr.ID_AniDB = xnode.FirstChild.Value		        elseif xnode.GetAttribute("movieDB") = "tvdb" then		          AnimeAttr.ID_TVDb = xnode.FirstChild.Value		        elseif xnode.GetAttribute("movieDB") = "tmdb" then		          AnimeAttr.ID_TMDb = xnode.FirstChild.Value		        elseif xnode.GetAttribute("movieDB") = "imdb" then		          AnimeAttr.ID_IMDB = xnode.FirstChild.Value		        elseif xnode.GetAttribute("movieDB") = "tvrage" then		          AnimeAttr.ID_TVRage = xnode.FirstChild.Value		        end if		        		        		      case "title"		        AnimeAttr.Title = xnode.FirstChild.Value		      case "originaltitle"		        AnimeAttr.TitleOriginal = xnode.FirstChild.Value		      case "sorttitle"		        AnimeAttr.TitleSort = xnode.FirstChild.Value		        		      case "rating"		        AnimeAttr.Rating = val( xnode.FirstChild.Value )		      case "votes"		        AnimeAttr.Votes = val( xnode.FirstChild.Value )		      case "mpaa"		        AnimeAttr.MPAA = xnode.FirstChild.Value		        		      case "watched"		        AnimeAttr.Watched = xnode.FirstChild.Value		        		      case "certification"		        Dim tmparray() as String = xnode.FirstChild.Value.Split(" / ")		        		        for n = 0 to tmparray.Ubound		          		          select case tmparray(n)		            		          case "USA:G"		            AnimeAttr.MPAA = "G"		          case "USA:PG"		            AnimeAttr.MPAA = "PG"		          case "USA:PG-13"		            AnimeAttr.MPAA = "PG-13"		          case "USA:NC-17"		            AnimeAttr.MPAA = "NC-17"		          case "USA:R"		            AnimeAttr.MPAA = "R"		          case "Unrated"		            AnimeAttr.MPAA = "Unrated"		            		          end select		          		        next		        		      case "premiered"		        AnimeAttr.DatePremiered = xnode.FirstChild.Value		      case "releasedate"		        AnimeAttr.DatePremiered = xnode.FirstChild.Value		        		      case "year"		        AnimeAttr.Year = xnode.FirstChild.Value		      case "status"		        AnimeAttr.Status = xnode.FirstChild.Value		        		      case "genre"		        AnimeAttr.Genre.Append xnode.FirstChild.Value		      case "plot"		        AnimeAttr.Plot = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine )		      case "outline"		        AnimeAttr.Outline = xnode.FirstChild.Value		      case "Tagline"		        AnimeAttr.Tagline = xnode.FirstChild.Value		        		      case "runtime"		        AnimeAttr.RuntimeInMinutes = val( xnode.FirstChild.Value )		        		      case "set"		        AnimeAttr.set = xnode.FirstChild.FirstChild.Value		        AnimeAttr.setorder = val( xnode.FirstChild.FirstChild.GetAttribute("order") )		        		      case "similaranime"		        AnimeAttr.SimilarAnimeID.Append val( xnode.GetAttribute("id") )		        AnimeAttr.SimilarAnimeTitle.Append xnode.FirstChild.Value		        		      case "studio"		        AnimeAttr.Studios.Append xnode.FirstChild.Value		        AnimeAttr.Studio = AnimeAttr.Studios(0)		        		      case "company"		        AnimeAttr.Studio = xnode.FirstChild.Value		        		      case "country"		        AnimeAttr.countries.Append xnode.FirstChild.Value		        		      case "thumb"		        if xnode.GetAttribute("type") = "season" and xnode.GetAttribute("season") <> "-1" then		          AnimeAttr.ART_SeasonURLs.Append xnode.FirstChild.Value		          AnimeAttr.ART_SeasonNumbers.Append val( xnode.GetAttribute("season") )		        ElseIf xnode.FirstChild.Value.InStr(0, "graphical") > 0 or xnode.FirstChild.Value.InStr(0, "text") > 0 or xnode.FirstChild.Value.InStr(0, "blank") > 0 then		          AnimeAttr.ART_BannerURLs.Append xnode.FirstChild.Value		        ElseIf xnode.FirstChild.Value.InStr(0, "poster") > 0 and xnode.AttributeCount = 0 and xnode.FirstChild.Value.Left(4) = "http" then		          AnimeAttr.ART_PosterURLs.Append xnode.FirstChild.Value		        elseif xnode.FirstChild.Value.left(4) = "http" then		          AnimeAttr.ART_PosterURLs.Append xnode.FirstChild.Value		        end if		        		      case "fanart"		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          AnimeAttr.ART_FanartURLs.Append       xitem.FirstChild.Value		          AnimeAttr.ART_FanartThumbURLs.Append  xitem.GetAttribute("preview")		          AnimeAttr.ART_FanartDimensions.Append xitem.GetAttribute("dim")		        next		        		      case "director"		        AnimeAttr.Director = xnode.FirstChild.Value		        		      case "writer"		        AnimeAttr.PeopleOriginalWork = xnode.FirstChild.Value		        		      case "actor"		        		        for n = 0 to xnode.ChildCount - 1		          xitem = xnode.Child(n)		          		          if xnode.ChildCount = 4 then		            		            select case xitem.Name		            case "name"		              if xitem.FirstChild <> nil then AnimeAttr.ActorName.Append xitem.FirstChild.Value else AnimeAttr.ActorName.Append ""		            case "role"		              if xitem.FirstChild <> nil then AnimeAttr.ActorRole.Append xitem.FirstChild.Value else AnimeAttr.ActorRole.Append ""		            case "thumb"		              if xitem.FirstChild <> nil then AnimeAttr.ActorThumbURL.Append xitem.FirstChild.Value else AnimeAttr.ActorThumbURL.Append ""		            case "description"		              if xitem.FirstChild <> nil then AnimeAttr.ActorRoleDescription.Append xitem.FirstChild.Value else AnimeAttr.ActorRoleDescription.Append ""		            end select		            		          elseif xnode.ChildCount = 3 then		            		            select case xitem.Name		            case "name"		              if xitem.FirstChild <> nil then AnimeAttr.ActorName.Append xitem.FirstChild.Value else AnimeAttr.ActorName.Append ""		            case "role"		              if xitem.FirstChild <> nil then AnimeAttr.ActorRole.Append xitem.FirstChild.Value else AnimeAttr.ActorRole.Append ""		            case "thumb"		              if xitem.FirstChild <> nil then AnimeAttr.ActorThumbURL.Append xitem.FirstChild.Value else AnimeAttr.ActorThumbURL.Append ""		            end select		            		            AnimeAttr.ActorRoleDescription.Append ""		            		          elseif xnode.ChildCount = 2 then		            		            select case xitem.Name		            case "name"		              if xitem.FirstChild <> nil then AnimeAttr.ActorName.Append xitem.FirstChild.Value else AnimeAttr.ActorName.Append ""		            case "role"		              if xitem.FirstChild <> nil then AnimeAttr.ActorRole.Append xitem.FirstChild.Value else AnimeAttr.ActorRole.Append ""		            end select		            		            AnimeAttr.ActorThumbURL.Append ""		            AnimeAttr.ActorRoleDescription.Append ""		            		          elseif xnode.ChildCount = 1 then		            		            select case xitem.Name		            case "name"		              if xitem.FirstChild <> nil then AnimeAttr.ActorName.Append xitem.FirstChild.Value else AnimeAttr.ActorName.Append ""		            end select		            		            AnimeAttr.ActorRole.Append ""		            AnimeAttr.ActorThumbURL.Append ""		            AnimeAttr.ActorRoleDescription.Append ""		          end if		          		        next // @END actor.childcount		        		      end select // @END select xnode.name		      		    end if // @END xnode.FirstChild <> NIL		    		  next // @END xroot.ChildCount		  		  		  if FolderParent <> nil and NOT MassSearch and NOT wndMain.Populating then		    		    ArtFile = AnimeFanartFilter		    if ArtFile <> nil and ArtFile.Exists then ART_Fanart = Picture.Open( ArtFile )		    		    ArtFile = AnimePosterFilter		    if ArtFile <> nil and ArtFile.Exists then ART_Poster = Picture.Open( ArtFile )		    		    ArtFile = AnimeBannerFilter		    if ArtFile <> nil and ArtFile.Exists then ART_Banner = Picture.Open( ArtFile )		    		    ArtFile = FolderParent.Child("clearart.png")		    if ArtFile <> nil and ArtFile.Exists then ART_ClearArt = Picture.Open( ArtFile )		    		    ArtFile = FolderParent.Child("logo.png")		    if ArtFile <> nil and ArtFile.Exists then ART_Logo = Picture.Open( ArtFile )		    		    ArtFile = FolderParent.Child("landscape.png")		    if ArtFile <> nil and ArtFile.Exists then ART_TVThumb = Picture.Open( ArtFile )		    		    ArtFile = GetFolderItem("Studios").Child( Studio + ".png" )		    if ArtFile <> nil and ArtFile.Exists then ART_Studio = Picture.Open( ArtFile )		    		    ART_MPAARating = MPAA2Logo( AnimeAttr.MPAA )		  end if		  		  ArtFile = nil		  content = ""		  Xml = nil		  xroot = nil		  xnode = nil		  xitem = nil		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ShowBannerFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "Banner" ) > 0 then return FolderParent.Item(i)		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ShowFanartFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "Fanart" ) > 0 then return FolderParent.Item(i)		      		    end if		  next		  		  Return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ShowPosterFilter() As Folderitem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "poster" ) > 0 then		        return FolderParent.Item(i)		      elseif FolderParent.Item(i).Name.InStr( -1, "season-all" ) > 0 then		        Return FolderParent.Item(i)		      elseif FolderParent.Item(i).Name.InStr( -1, "folder") > 0 then		        Return FolderParent.Item(i)		      end if		      		    end if		  next		  		  Return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub WriteInformation(NfoFileLocation as FolderItem)		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  Dim i as integer		  		  Dim MovieFile As FolderItem		  Dim MovieName As String		  		  Xml.PreserveWhitespace = True		  		  'if FolderParent <> nil then NfoFileLocation = FolderParent.Child( "tvshow.nfo" )		  'if NOT NfoFileLocation.Exists then Return		  		  if AnimeAttr.Type = "Movie" then		    		    NfoFileLocation = AnimeAttr.AnimeNFOFilter( NfoFileLocation )		    		    if NfoFileLocation <> nil and NfoFileLocation.Exists then		      		    elseif NfoFileLocation = nil then		      MovieName = MovieAttr.MovieNameFilter( AnimeAttr.FolderParent, False )		      MovieFile = MovieAttr.MovieItemFilter( AnimeAttr.FolderParent )		      		      if MovieName <> "" and MovieFile <> nil and MovieFile.Exists then		        NfoFileLocation = NfoFileLocation.Child( MovieName + ".nfo" )		      else		        NfoFileLocation = AnimeAttr.FolderParent.Child( "movie.nfo" )		      end if		      		    end if		    		  else		    		    if NfoFileLocation = nil and FolderParent <> nil then		      NfoFileLocation = FolderParent.Child( "tvshow.nfo" )		    elseif NfoFileLocation <> nil and NfoFileLocation.Exists then		      NfoFileLocation = NfoFileLocation.Child( "tvshow.nfo" )		    else		      MsgBox "Error: Couldn't find anime folder" + chr(13) + chr(13) + NfoFileLocation.AbsolutePath + " not found, please make sure that it exists."		      Return		    end if		    		  end if		  		  		  xroot = Xml.AppendChild( Xml.CreateElement( "tvshow" ) )		  		  if AnimeAttr.Type <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "animetype" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Type )		  end if		  		  if AnimeAttr.ID_AniDB <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "id" ) )		    xnode.SetAttribute( "movieDB", "anidb" ) 		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ID_AniDB )		  end if		  		  if AnimeAttr.Title <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "title" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Title )		  end if		  		  if AnimeAttr.TitleOriginal <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "originaltitle" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.TitleOriginal )		  end if		  		  if AnimeAttr.TitleSort <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "sorttitle" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.TitleSort )		  end if		  		  if AnimeAttr.Rating > 0 then		    xnode = xroot.AppendChild( Xml.CreateElement( "rating" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(AnimeAttr.Rating) )		  end if		  		  if AnimeAttr.Votes > 0 then		    xnode = xroot.AppendChild( Xml.CreateElement( "votes" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(AnimeAttr.Votes) )		  end if		  		  if AnimeAttr.Year <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "year" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Year )		  end if		  		  if AnimeAttr.DatePremiered <> "" then		    if AnimeAttr.Type = "Movie" then		      xnode = xroot.AppendChild( Xml.CreateElement( "releasedate" ) )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.DatePremiered )		    else		      xnode = xroot.AppendChild( Xml.CreateElement( "premiered" ) )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.DatePremiered )		    end if		  end if		  		  if AnimeAttr.set <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "set" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.set )		    if AnimeAttr.SetOrder <> -1 then xnode.SetAttribute("order", str( AnimeAttr.SetOrder ) )		  end if		  		  if AnimeAttr.Watched <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "watched" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Watched )		  end if		  		  if AnimeAttr.Plot <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "plot" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Plot.ReplaceAll( EndOfLine, "<br>" ) )		  end if		  		  if AnimeAttr.Outline <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "outline" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Outline )		  end if		  		  if AnimeAttr.Tagline <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "tagline" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Tagline )		  end if		  		  if AnimeAttr.RuntimeInMinutes > 0 then		    xnode = xroot.AppendChild( Xml.CreateElement( "runtime" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(AnimeAttr.RuntimeInMinutes) )		  end if		  		  if AnimeAttr.MPAA <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "mpaa" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.MPAA )		  end if		  		  if AnimeAttr.ID_TVDb <> "" then		    Dim sckt as new TVDB		    xnode = xroot.AppendChild( Xml.CreateElement( "episodeguide" ) )		    		    xitem = xnode.AppendChild( Xml.CreateElement( "url" ) )		    xitem.SetAttribute( "cache", AnimeAttr.ID_TVDb + ".xml" )		    xitem.AppendChild          Xml.CreateTextNode( sckt.URL_EpisodeGuide( AnimeAttr.ID_TVDb ) )		    		    xnode = xroot.AppendChild( Xml.CreateElement("id") )		    xnode.SetAttribute( "movieDB", "tvdb" )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ID_TVDb )		  end if		  		  if AnimeAttr.ID_TVRage <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement("id") )		    xnode.SetAttribute( "movieDB", "tvrage" )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ID_TVRage )		  end if		  		  if AnimeAttr.ID_TMDb <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "id" ) )		    xnode.SetAttribute( "movieDB", "tmdb" )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ID_TMDb )		  end if		  		  if AnimeAttr.ID_IMDB <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "id" ) )		    xnode.SetAttribute( "movieDB", "imdb" )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ID_IMDB )		  end if		  		  if AnimeAttr.Genre.Ubound > -1 then		    for i = 0 to AnimeAttr.Genre.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "genre" ) )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Genre(i) )		    next		  end if		  		  if AnimeAttr.Status <> "" or AnimeAttr.Type = "Movie" then		    xnode = xroot.AppendChild( Xml.CreateElement( "status" ) )		    if AnimeAttr.Type = "Movie" then		      xnode.AppendChild        Xml.CreateTextNode( "Movie" )		    else		      xnode.AppendChild        Xml.CreateTextNode( AnimeAttr.Status )		    end if		  end if		  		  if AnimeAttr.Countries.Ubound > -1 then		    for i = 0 to AnimeAttr.Countries.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "country" ) )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Countries(i) )		    next		  end if		  		  if AnimeAttr.SimilarAnimeTitle.Ubound > -1 then		    for i = 0 to AnimeAttr.SimilarAnimeTitle.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "similaranime" ) )		      xnode.SetAttribute( "id", str( AnimeAttr.SimilarAnimeID(i) ) )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.SimilarAnimeTitle(i) )		    next		  end if		  		  if AnimeAttr.Studios.Ubound > - 1 then		    for i = 0 to AnimeAttr.Studios.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "studio" ) )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Studios(i) )		    next		    		  elseif AnimeAttr.Studio <> "" and AnimeAttr.ID_TMDb = "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "studio" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Studio )		    		  elseif AnimeAttr.Studio <> "" and AnimeAttr.Type = "Movie" then		    xnode = xroot.AppendChild( Xml.CreateElement( "studio" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Studio )		    		  end if		  		  if AnimeAttr.Director <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "director" ) )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.Director )		  end if		  		  'if AnimeAttr.PeopleOriginalWork <> "" then		  'xnode = xroot.AppendChild( Xml.CreateElement( "writer" ) )		  'xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.PeopleOriginalWork )		  'end if		  		  if AnimeAttr.PeopleMusic <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "music") )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.PeopleMusic )		  end if		  		  if AnimeAttr.ActorName.Ubound > -1 then		    for i = 0 to AnimeAttr.ActorName.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "actor" ) )		      		      xitem = xnode.AppendChild( Xml.CreateElement( "name" ) )		      xitem.AppendChild          Xml.CreateTextNode( AnimeAttr.ActorName(i) )		      		      if AnimeAttr.ActorRole(i) <> "" then		        xitem = xnode.AppendChild( Xml.CreateElement( "role" ) )		        xitem.AppendChild          Xml.CreateTextNode( AnimeAttr.ActorRole(i) )		      end if		      		      if AnimeAttr.ActorThumbURL(i) <> "" and AnimeAttr.ActorThumbURL(i).Right(1) <> "/" then		        xitem = xnode.AppendChild( Xml.CreateElement( "thumb" ) )		        xitem.AppendChild          Xml.CreateTextNode( AnimeAttr.ActorThumbURL(i) )		      end if		      		      // Unused by XBMC		      if AnimeAttr.ActorRoleDescription(i) <> "" then		        xitem = xnode.AppendChild( Xml.CreateElement( "description" ) )		        xitem.AppendChild          Xml.CreateTextNode( AnimeAttr.ActorRoleDescription(i) )		      end if		      		    next // @END Go through actor attributes		  end if // @END Actors		  		  // Default Thumb		  if Preferences.DefaultAnimeThumb = "Poster" or AnimeAttr.ID_TMDb <> "" then		    if AnimePosterFilter <> nil then		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.AppendChild          Xml.CreateTextNode( AnimePosterFilter.Name )		    end if		  elseif Preferences.DefaultAnimeThumb = "Banner" then		    if AnimeBannerFilter <> nil then		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.AppendChild          Xml.CreateTextNode( AnimeBannerFilter.Name )		    end if		  end if		  		  // Posters		  if AnimeAttr.ART_PosterURLs.ubound > -1 then		    for i = 0 to AnimeAttr.ART_PosterURLs.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ART_PosterURLs(i) )		    next		  end if		  		  // Banners		  if AnimeAttr.ART_BannerURLs.ubound > -1 then		    for i = 0 to AnimeAttr.ART_BannerURLs.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "thumb" ) )		      xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ART_BannerURLs(i) )		    next		  end if		  		  // Fanarts		  if AnimeAttr.ART_FanartURLs.ubound > -1 then		    xnode = xroot.AppendChild( Xml.CreateElement("fanart") )		    xnode.SetAttribute         "url", TMDB.MirrorPath + "/banners/"		    		    for i = 0 to AnimeAttr.ART_FanartURLs.Ubound		      xitem = xnode.AppendChild( Xml.CreateElement("thumb") )		      if AnimeAttr.ART_FanartDimensions.Ubound > -1 then xitem.SetAttribute( "dim", AnimeAttr.ART_FanartDimensions(i) )		      xitem.SetAttribute         "preview", AnimeAttr.ART_FanartThumbURLs(i)		      xitem.AppendChild          Xml.CreateTextNode( AnimeAttr.ART_FanartURLs(i) )		    next		    		  end if		  		  Xml.LoadXml( TidyXML( Xml.ToString ).ReplaceAll( "&lt;br&gt;", endofline ) )		  Xml.SaveXml( NfoFileLocation )		End Sub	#tag EndMethod	#tag Note, Name = EpisodeGuide				  <episodeguide>		    <episode>		      <url>http://anidb.net/</url>		      <season>1</season>		      <epnum>1</epnum>		      <title>Transmigration</title>		    </episode>		    <episode>		      <url>http://anidb.net/</url>		      <season>1</season>		      <epnum>2</epnum>		      <title>Yakumo</title>		    </episode>		    <episode>		      <url>http://anidb.net/</url>		      <season>1</season>		      <epnum>3</epnum>		      <title>Sacrifice</title>		    </episode>		    <episode>		      <url>http://anidb.net/</url>		      <season>1</season>		      <epnum>4</epnum>		      <title>Straying</title>		    </episode>		  </episodeguide>						  <episodedetails>		     <season>?</season>		     <episode>?</episode>		     <title>Title Of The Episode</title>		     <plot>The plot of the episode</plot>		     <aired></aired>        <!-- the air date of the epsiode (YYYY-MM-DD) -->		     <airsAfterSeason></airsAfterSeason>		     <airsBeforeSeason></airsBeforeSeason>		     <airsBeforeEpisode></airsBeforeEpisode>		  </episodedetails>	#tag EndNote	#tag Note, Name = Unused Properties				There's a number of properties here that aren't usually used by XBMC (Such as similiar anime), but I'm gonna make use of them anyhow, mwhahahaha!		I kinda like having as much metadata as possible, so there...	#tag EndNote	#tag Property, Flags = &h1		Protected ActorName() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorRole() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorRoleDescription() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Banner As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_BannerURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_ClearArt As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Fanart As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartDimensions() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartThumbURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_FanartURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Logo As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_MPAARating As Picture	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			http://img7.anidb.net/pics/anime/11154.jpg		#tag EndNote		Protected ART_Poster As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_PosterURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_SeasonNumbers() As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_SeasonURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Studio As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_TVThumb As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected countries() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected DatePremiered As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Director As String	#tag EndProperty	#tag Property, Flags = &h1		Protected FolderParent As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected Genre() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_AniDB As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_IMDB As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_TMDb As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_TVDb As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_TVRage As String	#tag EndProperty	#tag Property, Flags = &h1		Protected MPAA As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			TVRage		#tag EndNote		Protected NextAired As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			TVRage		#tag EndNote		Protected NextEpisode As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Outline As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			http://anidb.net/perl-bin/animedb.pl?show=creator&creatorid=		#tag EndNote		Protected PeopleAnimationWork As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			http://anidb.net/perl-bin/animedb.pl?show=creator&creatorid=		#tag EndNote		Protected PeopleCharacterDesign As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			http://anidb.net/perl-bin/animedb.pl?show=creator&creatorid=		#tag EndNote		Protected PeopleMusic As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			http://anidb.net/perl-bin/animedb.pl?show=creator&creatorid=		#tag EndNote		Protected PeopleOriginalWork As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Plot As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			If permanent <> exist then use temporary		#tag EndNote		Protected Rating As Double	#tag EndProperty	#tag Property, Flags = &h1		Protected RuntimeInMinutes As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected set As String	#tag EndProperty	#tag Property, Flags = &h1		Protected SetOrder As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected SimilarAnimeID() As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected SimilarAnimeTitle() As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			TVDB		#tag EndNote		Protected Status As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Studio As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Studios() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Tagline As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			English:			  <title xml:lang="en" type="official">						or Original:			  <title xml:lang="x-jat" type="main">		#tag EndNote		Protected Title As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Romaji:			  <title xml:lang="x-jat" type="main">						or Japanese:			  <title xml:lang="ja" type="official">		#tag EndNote		Protected TitleOriginal As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note						  The Borrower Arrietty			to:			  Borrower Arrietty, The					#tag EndNote		Protected TitleSort As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			TV Series = TVDB			OVA       = TVDB			Movie     = TMDB / IMDB		#tag EndNote		Protected Type As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			If permanent <> exist then use temporary		#tag EndNote		Protected Votes As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected Watched As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Year As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule