#tag ModuleProtected Module TVAttr	#tag Method, Flags = &h1		Protected Sub ClearProperties()		  ReDim ActorName(-1)		  ReDim ActorRole(-1)		  ReDim ActorThumbURL(-1)		  		  ReDim Genre(-1)		  		  ReDim ART_BannerURLs(-1)		  ReDim ART_FanartURLs(-1)		  ReDim ART_FanartThumbURLs(-1)		  ReDim ART_FanartDimensions(-1)		  ReDim ART_PosterURLs(-1)		  ReDim ART_SeasonURLs(-1)		  ReDim ART_SeasonNumbers(-1)		  		  ART_Poster = nil		  ART_Fanart = nil		  ART_Banner = nil		  		  ART_ClearArt = nil		  ART_Logo = nil		  ART_TVThumb = nil		  		  ART_Studio = nil		  ART_MPAARating = nil		  		  IMDBID = ""		  MPAA = ""		  OriginalTitle = ""		  Plot = ""		  Premiered = ""		  Rating = -1		  RuntimeInMinutes = -1		  SortTitle = ""		  Status = ""		  Studio = ""		  Title = ""		  TVDBID = ""		  Votes = -1		  year = ""		  		  TVAttr.NextAired = ""		  TVAttr.NextEpisode = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub ReadInformation(nfoFile as FolderItem = nil)		  #pragma disablebackgroundtasks		  #if not targetwin32 then		    #pragma disableboundsChecking		    #pragma nilObjectChecking false		    #pragma stackOverflowChecking false		    #pragma disableautoWaitCursor		  #endif		  		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  		  Dim f, ArtFile as FolderItem		  Dim textin as TextInputStream		  		  Dim content as string		  Dim i, n as integer		  		  TVAttr.ClearProperties		  xml.PreserveWhitespace = false		  		  if FolderParent <> nil and nfoFile = nil then nfoFile = FolderParent.Child("tvshow.nfo")		  'if nfoFile <> nil and nfoFile.Name <> "tvshow.nfo" then		  'nfoFile = nfoFile.Child("tvshow.nfo")		  'elseif nfoFile <> nil and nfoFile.Name = "tvshow.nfo" then		  '// Do nothing		  ''nfoFile = nfoFile		  'elseif wndMain.ppMedia.Value = 1 and wndMain.lstTVShows.ListIndex <> -1 then		  'f = wndMain.lstTVShows.CellTag( wndMain.lstTVShows.ListIndex, 0 )		  'nfoFile = f.Child("tvshow.nfo")		  'elseif wndMain.ppMedia.Value = 2 and wndMain.lstAnime.ListIndex <> -1 then		  'f = wndMain.lstAnime.CellTag( wndMain.lstAnime.ListIndex, 0 )		  'nfoFile = f.Child("tvshow.nfo")		  'else		  'return		  'end if		  		  if nfoFile <> nil and nfoFile.Exists then		    textin = textin.Open( nfoFile )		    content = textin.ReadAll		    textin.Close		    		    if content.Left(5) = "<?xml" then		      Xml.LoadXml(content)		    else		      return		    end if		    		    xroot = Xml.Child(0)		    		    for i = 0 to xroot.ChildCount - 1		      		      xnode = xroot.Child(i)		      		      if xnode.FirstChild <> nil then		        		        select case xnode.Name		          		        case "id"		          if xnode.AttributeCount = 0 then		            TVAttr.TVDBID = xnode.FirstChild.Value		          elseif xnode.GetAttribute("movieDB") = "tvdb" then		            TVAttr.TVDBID = xnode.FirstChild.Value		          elseif xnode.GetAttribute("movieDB") = "imdb" then		            TVAttr.IMDBID = xnode.FirstChild.Value		          elseif xnode.GetAttribute("movieDB") = "tvrage" then		            TVAttr.ID_TVRage = xnode.FirstChild.Value		          end if		          		        case "title"		          TVAttr.Title = xnode.FirstChild.Value		          		        case "originaltitle"		          TVAttr.OriginalTitle = xnode.FirstChild.Value		        case "sorttitle"		          TVAttr.SortTitle = xnode.FirstChild.Value		        case "rating"		          TVAttr.Rating = val(xnode.FirstChild.Value)		        case "year"		          TVAttr.Year = xnode.FirstChild.Value		        case "votes"		          TVAttr.Votes = val(xnode.FirstChild.Value)		        case "plot"		          TVAttr.Plot = xnode.FirstChild.Value.ReplaceAll( chr(10), EndOfLine )		        case "runtime"		          TVAttr.RuntimeInMinutes = val(xnode.FirstChild.Value)		        case "mpaa"		          TVAttr.MPAA = xnode.FirstChild.Value		        case "genre"		          TVAttr.Genre.Append xnode.FirstChild.Value		          		        case "premiered"		          TVAttr.Premiered = xnode.FirstChild.Value		        case "status"		          TVAttr.Status = xnode.FirstChild.Value		        case "studio"		          TVAttr.Studio = xnode.FirstChild.Value		          		        case "thumb"		          if xnode.GetAttribute("type") = "season" and xnode.GetAttribute("season") <> "-1" then		            TVAttr.ART_SeasonURLs.Append xnode.FirstChild.Value		            TVAttr.ART_SeasonNumbers.Append xnode.GetAttribute("season")		          ElseIf xnode.FirstChild.Value.InStr(0, "graphical") > 0 or xnode.FirstChild.Value.InStr(0, "text") > 0 or xnode.FirstChild.Value.InStr(0, "blank") > 0 then		            TVAttr.ART_BannerURLs.Append xnode.FirstChild.Value		          ElseIf xnode.FirstChild.Value.InStr(0, "poster") > 0 and xnode.AttributeCount = 0 and xnode.FirstChild.Value.Left(4) = "http" then		            TVAttr.ART_PosterURLs.Append xnode.FirstChild.Value		          end if		          		        case "fanart"		          for n = 0 to xnode.ChildCount - 1		            xitem = xnode.Child(n)		            		            TVAttr.ART_FanartURLs.Append       xitem.FirstChild.Value		            TVAttr.ART_FanartThumbURLs.Append  xitem.GetAttribute("preview")		            TVAttr.ART_FanartDimensions.Append xitem.GetAttribute("dim")		          next		          		        case "actor"		          		          'MsgBox str(xnode.ChildCount)		          for n = 0 to xnode.ChildCount - 1		            xitem = xnode.Child(n)		            if  xnode.ChildCount > 2 then		              		              Select case xitem.Name		                		              case "name"		                if xitem.FirstChild <> nil then		                  TVAttr.ActorName.Append xitem.FirstChild.Value		                else		                  TVAttr.ActorName.Append ""		                end if		              case "role"		                if xitem.FirstChild <> nil then		                  TVAttr.ActorRole.Append xitem.FirstChild.Value		                else		                  TVAttr.ActorRole.Append ""		                end if		              case "thumb"		                if xitem.FirstChild <> nil then		                  TVAttr.ActorThumbURL.Append xitem.FirstChild.Value		                else		                  TVAttr.ActorThumbURL.Append ""		                end if		                		              end select		              		            elseif xnode.ChildCount = 2 then		              		              Select case xitem.Name		                		              case "name"		                TVAttr.ActorName.Append xitem.FirstChild.Value		              case "role"		                TVAttr.ActorRole.Append xitem.FirstChild.Value		                		              end select		              // No thumburl available, now here's to hoping that role always stays available even if thumburl is not...		              TVAttr.ActorThumbURL.Append ""		              		            elseif xnode.ChildCount = 1 then		              		              if xitem.Name = "name" then TVAttr.ActorName.Append xitem.FirstChild.Value		              TVAttr.ActorRole.Append ""		              TVAttr.ActorThumbURL.Append ""		              		            end if		            		          next		          		        end select // @END Select xnode value		        		      end if // @END xnode value is not nil		      		    next // @END Go trough all the xnodes		    		  end if // @END nfoFile exists		  		  if FolderParent <> nil and NOT MassSearch and NOT wndMain.Populating then		    		    ArtFile = ShowFanartFilter		    if ArtFile <> nil and ArtFile.Exists then ART_Fanart = Picture.Open( ArtFile )		    		    ArtFile = ShowPosterFilter		    if ArtFile <> nil and ArtFile.Exists then ART_Poster = Picture.Open( ArtFile )		    		    ArtFile = ShowBannerFilter		    if ArtFile <> nil and ArtFile.Exists then ART_Banner = Picture.Open( ArtFile )		    		    ArtFile = FolderParent.Child("clearart.png")		    if ArtFile <> nil and ArtFile.Exists then ART_ClearArt = Picture.Open( ArtFile )		    		    ArtFile = FolderParent.Child("logo.png")		    if ArtFile <> nil and ArtFile.Exists then ART_Logo = Picture.Open( ArtFile )		    		    ArtFile = FolderParent.Child("landscape.jpg")		    if ArtFile <> nil and ArtFile.Exists then ART_TVThumb = Picture.Open( ArtFile )		    		    ArtFile = GetFolderItem("Studios").Child( TVAttr.Studio + ".png" )		    if ArtFile <> nil and ArtFile.Exists then ART_Studio = Picture.Open( ArtFile )		    		    ART_MPAARating = MPAA2Logo( TVAttr.MPAA )		  end if		  		  ArtFile = nil		  content = ""		  Xml = nil		  xroot = nil		  xnode = nil		  xitem = nil		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ReadKey(Key as String, nfoFile as FolderItem) As String		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  		  Dim textin as TextInputStream		  		  Dim content as string		  Dim i as integer		  		  xml.PreserveWhitespace = false		  		  if nfoFile <> nil then nfoFile = nfoFile.Child("tvshow.nfo")		  		  if nfoFile <> nil and nfoFile.Exists then		    textin = textin.Open( nfoFile )		    content = textin.ReadAll		    textin.Close		  else		    return ""		  end if		  		  if content.Left(5) = "<?xml" then		    Xml.LoadXml(content)		  else		    return ""		  end if		  		  xroot = Xml.Child(0)		  		  for i = 0 to xroot.ChildCount - 1		    		    xnode = xroot.Child(i)		    		    if xnode.FirstChild <> nil then		      		      if xnode.Name = Key then		        return xnode.FirstChild.Value		      end if		    else		      return ""		    end if // @END xnode value is not nil		    		  next // @END Go trough all the xnodes		  		  content = ""		  Xml = nil		  xroot = nil		  xnode = nil		  xitem = nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ShowBannerFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "Banner" ) > 0 then return FolderParent.Item(i)		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ShowFanartFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "Fanart" ) > 0 then return FolderParent.Item(i)		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ShowNameFilter() As String		  Return FolderParent.Name		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function ShowPosterFilter() As FolderItem		  Dim i as Integer		  		  for i = 1 to FolderParent.Count		    if   FolderParent.Item(i).Name.InStr( -1, ".jpg" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".tbn" ) > 0 or _		      FolderParent.Item(i).Name.InStr( -1, ".png" ) > 0 then		      		      if FolderParent.Item(i).Name.InStr( -1, "poster" ) > 0 then		        return FolderParent.Item(i)		      elseif FolderParent.Item(i).Name.InStr( -1, "season-all" ) > 0 then		        Return FolderParent.Item(i)		      elseif FolderParent.Item(i).Name.InStr( -1, "folder") > 0 then		        Return FolderParent.Item(i)		      end if		      		    end if		  next		  		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub WriteInformation(NfoFileLocation as FolderItem)		  Dim Xml as new XmlDocument		  Dim xroot, xnode, xitem as XmlNode		  Dim i as integer		  		  Xml.PreserveWhitespace = true		  		  'if FolderParent <> nil then NfoFileLocation = FolderParent.Child( "tvshow.nfo" )		  'if NOT NfoFileLocation.Exists then Return		  		  if NfoFileLocation <> nil and NfoFileLocation.Exists then		    'f = wndMain.lstTVShows.CellTag( wndMain.lstTVShows.ListIndex, 0)		    NfoFileLocation = NfoFileLocation.Child("tvshow.nfo")		  else		    MsgBox "Error: Couldn't find show folder" + chr(13) + chr(13) + NfoFileLocation.AbsolutePath + " not found, please make sure that it exists."		    return		  end if		  		  xroot = Xml.AppendChild( Xml.CreateElement( "tvshow" ) )		  		  if TVAttr.Title <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "title" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.Title )		  end if		  		  if TVAttr.OriginalTitle <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "originaltitle") )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.OriginalTitle )		  end if		  		  if TVAttr.SortTitle <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "sorttitle" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.SortTitle )		  end if		  		  if TVAttr.Rating > 0 then		    xnode = xroot.AppendChild( Xml.CreateElement( "rating" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(TVAttr.Rating) )		  end if		  		  if TVAttr.Votes > 0 then		    xnode = xroot.AppendChild( Xml.CreateElement( "votes" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(TVAttr.Votes) )		  end if		  		  if TVAttr.Year <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "year" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.Year )		  end if		  		  if TVAttr.Premiered <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "premiered" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.Premiered )		  end if		  		  if TVAttr.Plot <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "plot" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.Plot.ReplaceAll( endofline, "<br>" ) )		  end if		  		  if TVAttr.RuntimeInMinutes > 0 then		    xnode = xroot.AppendChild( Xml.CreateElement( "runtime" ) )		    xnode.AppendChild          Xml.CreateTextNode( str(TVAttr.RuntimeInMinutes) )		  end if		  		  if TVAttr.MPAA <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "mpaa" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.MPAA )		  end if		  		  if TVAttr.TVDBID <> "" then		    Dim sckt as new TVDB		    xnode = xroot.AppendChild( Xml.CreateElement( "episodeguide" ) )		    		    xitem = xnode.AppendChild( Xml.CreateElement( "url" ) )		    xitem.SetAttribute( "cache", TVAttr.TVDBID + ".xml" )		    xitem.AppendChild          Xml.CreateTextNode( sckt.URL_EpisodeGuide( TVAttr.TVDBID ) )		    		    xnode = xroot.AppendChild( Xml.CreateElement("id") )		    xnode.SetAttribute( "movieDB", "tvdb" )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.TVDBID )		  end if		  		  if AnimeAttr.ID_TVRage <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement("id") )		    xnode.SetAttribute( "movieDB", "tvrage" )		    xnode.AppendChild          Xml.CreateTextNode( AnimeAttr.ID_TVRage )		  end if		  		  if TVAttr.IMDBID <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "id" ) )		    xnode.SetAttribute( "movieDB", "imdb" )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.IMDBID )		  end if		  		  if TVAttr.Genre.Ubound > -1 then		    for i = 0 to TVAttr.Genre.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "genre" ) )		      xnode.AppendChild          Xml.CreateTextNode( TVAttr.Genre(i) )		    next		  end if		  		  if TVAttr.Status <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "status" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.Status )		  end if		  		  if TVAttr.Studio <> "" then		    xnode = xroot.AppendChild( Xml.CreateElement( "studio" ) )		    xnode.AppendChild          Xml.CreateTextNode( TVAttr.Studio )		  end if		  		  if TVAttr.ActorName.Ubound > -1 then		    for i = 0 to TVAttr.ActorName.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "actor" ) )		      		      'if TVAttr.ActorName(i) <> "" then		      xitem = xnode.AppendChild( Xml.CreateElement( "name" ) )		      xitem.AppendChild          Xml.CreateTextNode( TVAttr.ActorName(i) )		      'end if		      		      'if TVAttr.ActorRole(i) <> "" then		      xitem = xnode.AppendChild( Xml.CreateElement( "role" ) )		      xitem.AppendChild          Xml.CreateTextNode( TVAttr.ActorRole(i) )		      'end if		      		      'if TVAttr.ActorThumbURL(i) <> "" then		      xitem = xnode.AppendChild( Xml.CreateElement( "thumb" ) )		      xitem.AppendChild          Xml.CreateTextNode( TVAttr.ActorThumbURL(i) )		      'end if		    next // @END Go through actor attributes		  end if // @END Actors		  		  // Default Thumb		  if Preferences.DefaultTVThumb = "Poster" then		    if ShowPosterFilter <> nil then		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.AppendChild          Xml.CreateTextNode( ShowPosterFilter.Name )		    end if		  elseif Preferences.DefaultTVThumb = "Banner" then		    if ShowBannerFilter <> nil then		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.AppendChild          Xml.CreateTextNode( ShowBannerFilter.Name )		    end if		  end if		  		  // Posters		  if TVAttr.ART_PosterURLs.ubound > -1 then		    for i = 0 to TVAttr.ART_PosterURLs.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.AppendChild          Xml.CreateTextNode( TVAttr.ART_PosterURLs(i) )		    next		  end if		  		  // Banners		  if TVAttr.ART_BannerURLs.ubound > -1 then		    for i = 0 to TVAttr.ART_BannerURLs.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement( "thumb" ) )		      xnode.AppendChild          Xml.CreateTextNode( TVAttr.ART_BannerURLs(i) )		    next		  end if		  		  // Set poster to season -1		  if TVAttr.ART_PosterURLs.ubound > -1 then		    for i = 0 to TVAttr.ART_PosterURLs.Ubound		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.AppendChild          Xml.CreateTextNode( TVAttr.ART_PosterURLs(i) )		      xnode.SetAttribute         "type", "season"		      xnode.SetAttribute         "season", "-1"		    Next		  end if		  		  // Seasons		  if TVAttr.ART_SeasonURLs.Ubound > -1 then		    for i = 0 to TVAttr.ART_SeasonURLs.Ubound		      'if TVAttr.TVAttr.ART_SeasonNumbers(i) = "-1" then		       // TODO: Something's going wrong here!! produces Season Numbers instead of URLS if seasonnumber is greater then -1		      xnode = xroot.AppendChild( Xml.CreateElement("thumb") )		      xnode.SetAttribute         "type", "season"		      xnode.SetAttribute         "season", TVAttr.ART_SeasonNumbers(i)		      xnode.AppendChild          Xml.CreateTextNode( TVAttr.ART_SeasonURLs(i) )		      'end if		    next		  end if		  		  if TVAttr.ART_FanartURLs.ubound > -1 then		    xnode = xroot.AppendChild( Xml.CreateElement("fanart") )		    xnode.SetAttribute         "url", TVDB.MirrorPath + "/banners/"		    		    for i = 0 to TVAttr.ART_FanartURLs.Ubound		      xitem = xnode.AppendChild( Xml.CreateElement("thumb") )		      xitem.SetAttribute         "dim", TVAttr.ART_FanartDimensions(i)		      xitem.SetAttribute         "preview", TVAttr.ART_FanartThumbURLs(i)		      xitem.AppendChild          Xml.CreateTextNode( TVAttr.ART_FanartURLs(i) )		    next		    		  end if		  		  Xml.LoadXml( TidyXML( Xml.ToString ).ReplaceAll( "&lt;br&gt;", endofline ) )		  Xml.SaveXml( NfoFileLocation )		End Sub	#tag EndMethod	#tag Note, Name = Unused and New properties				- 'Status' is usually unused, so I'm just gonna make some clever use of it myself and hope for the best.		- There is no such thing as "Original Title" or "Sort Title", but I can use them, so I will.	#tag EndNote	#tag Property, Flags = &h1		Protected ActorName() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorRole() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ActorThumbURL() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Banner As Picture = nil	#tag EndProperty	#tag Property, Flags = &h0		ART_BannerURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_ClearArt As Picture = nil	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Fanart As Picture = nil	#tag EndProperty	#tag Property, Flags = &h0		ART_FanartDimensions() As String	#tag EndProperty	#tag Property, Flags = &h0		ART_FanartThumbURLs() As String	#tag EndProperty	#tag Property, Flags = &h0		ART_FanartURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Logo As Picture = nil	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_MPAARating As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Poster As Picture = nil	#tag EndProperty	#tag Property, Flags = &h0		ART_PosterURLs() As String	#tag EndProperty	#tag Property, Flags = &h0		ART_SeasonNumbers() As String	#tag EndProperty	#tag Property, Flags = &h0		ART_SeasonURLs() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_Studio As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected ART_TVThumb As Picture = nil	#tag EndProperty	#tag Property, Flags = &h0		FolderParent As FolderItem	#tag EndProperty	#tag Property, Flags = &h1		Protected Genre() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected ID_TVRage As String	#tag EndProperty	#tag Property, Flags = &h1		Protected IMDBID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected MPAA As String	#tag EndProperty	#tag Property, Flags = &h0		NextAired As String	#tag EndProperty	#tag Property, Flags = &h0		NextEpisode As String	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Not officially used, but I think I can make some use of this. (For anime's)		#tag EndNote		Protected OriginalTitle As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Plot As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Premiered As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Rating As Double	#tag EndProperty	#tag Property, Flags = &h1		Protected RuntimeInMinutes As Integer	#tag EndProperty	#tag Property, Flags = &h1		#tag Note			Not officially used, but I think I can make some use of this.		#tag EndNote		Protected SortTitle As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Status As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Studio As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Title As String	#tag EndProperty	#tag Property, Flags = &h1		Protected TVDBID As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Votes As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected Year As String	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="NextAired"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="NextEpisode"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule